<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>About on Pi4J</title><link>https://pi4j.com/about/</link><description>Recent content in About on Pi4J</description><generator>Hugo</generator><language>en-us</language><atom:link href="https://pi4j.com/about/index.xml" rel="self" type="application/rss+xml"/><item><title>Info about V1</title><link>https://pi4j.com/about/info-v1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/about/info-v1/</guid><description>&lt;p>The original library which started in 2012 and got a last release in 2021. Up till &lt;strong>version 1.3.0 the library targets Java 8&lt;/strong>, while &lt;strong>version 1.4.0 relies on Java 11&lt;/strong>.&lt;/p>
&lt;h2 id="archived-sources">Archived Sources&lt;/h2>
&lt;p>&lt;a href="https://github.com/Pi4J/pi4j-v1" target="_blank" rel="noopener">The sources of V1 can be found in the read-only GitHub repository &lt;code>pi4j/pi4j-v1&lt;/code>&lt;/a>.&lt;/p>
&lt;h2 id="release-notes-v1x">Release Notes V1.X&lt;/h2>
&lt;h3 id="pi4j-version-14---2021-03-03">Pi4J Version 1.4 - 2021-03-03&lt;/h3>
&lt;ul>
&lt;li>Support for JDK/JRE 11 and 64-bit ARM platforms&lt;/li>
&lt;li>This release is the final release for the Pi4J Version 1.x codebase&lt;/li>
&lt;li>The Pi4J project is now prioritizing focus on providing Java programs access, control and communication with the core I/O capabilities of the Raspberry Pi platform&lt;/li>
&lt;li>Changed project to Apache License, Version 2.0&lt;/li>
&lt;li>Removed pi4j-device and pi4j-gpio-extension library&lt;/li>
&lt;li>Removed platform support for Odroid, BananaPi, BPi, NanoPi, OrangePi&lt;/li>
&lt;li>Various improvements and bug fixes listed here: &lt;a href="https://github.com/Pi4J/pi4j-v1/milestone/9?closed=1" target="_blank" rel="noopener">GitHub Issues (v1.4)&lt;/a>&lt;/li>
&lt;li>Not using Java-modules yet, this will be part of the V2&lt;/li>
&lt;li>&lt;a href="https://pi4j.com/1.4/index.html">Documentation website V1.4&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="pi4j-version-13---2021-01-29">Pi4J Version 1.3 - 2021-01-29&lt;/h3>
&lt;ul>
&lt;li>Added support for Raspberry Pi 4B, 400, and Compute Module 4&lt;/li>
&lt;li>Various improvements and bug fixes listed here: &lt;a href="https://github.com/Pi4J/pi4j-v1/milestone/10?closed=1" target="_blank" rel="noopener">GitHub Issues (v1.3)&lt;/a>&lt;/li>
&lt;li>Based on JDK8&lt;/li>
&lt;li>&lt;a href="https://pi4j.com/1.3/index.html">Documentation website V1.3&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="pi4j-version-12---2019-02-26">Pi4J Version 1.2 - 2019-02-26&lt;/h3>
&lt;ul>
&lt;li>Based on Java 8&lt;/li>
&lt;li>&lt;a href="https://pi4j.com/1.2/index.html">Documentation website V1.2&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="pi4j-version-11---2016-07-26">Pi4J Version 1.1 - 2016-07-26&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://pi4j.com/1.1/index.html">Documentation webiste V1.1&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="pi4j-version-10---2015-04-18">Pi4J Version 1.0 - 2015-04-18&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://pi4j.com/1.0/index.html">Documentation website V1.0&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>What's New in V2</title><link>https://pi4j.com/about/info-v2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/about/info-v2/</guid><description>&lt;p>As of versions 2.X.X, Pi4J &lt;strong>no longer includes support for peripheral devices and add-on chipsets/boards&lt;/strong> as part of the core project. A new plugin model has been introduced in version 2.0 that helps to enable third-party development and support third-party add-ons which can be developed and maintained independently of the core Pi4J project.&lt;/p>
&lt;p>&lt;strong>V2-versions of Pi4J require Java 11&lt;/strong> or higher.&lt;/p>
&lt;h2 id="whats-new-in-v2">What&amp;rsquo;s New in V2?&lt;/h2>
&lt;p>Pi4J V2 brings with it many new features, and an entirely new architecture that focuses on
extensibility, simplified integration and a modern Java API including the following:&lt;/p></description></item><item><title>What's New in V3</title><link>https://pi4j.com/about/info-v3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/about/info-v3/</guid><description>&lt;p>Versions 3.0.1 is based on 2.8.0 (released in January 2025), but bumps the &lt;strong>Java version to 21&lt;/strong>!&lt;/p>
&lt;p>We &lt;a href="https://github.com/Pi4J/pi4j/discussions/409" target="_blank" rel="noopener">asked our users&lt;/a> which minimal Java version we should use, but there was no one clear answer, as expected ;-)&lt;/p>
&lt;p>The current/latest Long Term Support (LTS) version of Java is version 21. So it makes sense to jump forward from 11 to 21. This will also prepare us for the next LTS, which will be Java 25 in September 2025. Bumping to the latest LTS makes it possible to make use of many newer Java language and runtime improvements, simplify parts of the code, etc.&lt;/p></description></item><item><title>Release Notes</title><link>https://pi4j.com/about/release-notes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/about/release-notes/</guid><description>&lt;p>All releases of Pi4J V2+ are listed on &lt;a href="https://github.com/Pi4J/pi4j/releases" target="_blank" rel="noopener">github.com/Pi4J/pi4j/releases&lt;/a>.&lt;/p>
&lt;h2 id="v3">V3&lt;/h2>
&lt;p>Requires Java 21, see &lt;a href="https://pi4j.com/about/info-v3/">What&amp;rsquo;s New in V3&lt;/a> for more info.&lt;/p>
&lt;h3 id="2025-03-24---v301">2025-03-24 - V3.0.1&lt;/h3>
&lt;p>This is the first release of Pi4J that requires Java runtime 21 or higher. Check the blog post &lt;a href="https://pi4j.com/blog/2025/20250211-welcome-java-21/">Pi4J welcomes Java 21&lt;/a> to understand why we needed this change to prepare the project for the future&amp;hellip;&lt;/p>
&lt;p>Because of a last-minute change to improve the detection of Raspberry Pi 5, 500, and Compute 5, &lt;strong>release 3.0.0 has been skipped&lt;/strong>.&lt;/p></description></item><item><title>Pi4J Downloads</title><link>https://pi4j.com/about/download/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/about/download/</guid><description>&lt;p>All downloads provided by the project can be found on &lt;a href="https://pi4j.com/download/" target="_blank" rel="noopener">pi4j.com/download&lt;/a>.&lt;/p>
&lt;p>The compiled artifacts (releases and snapshots) are available in the
&lt;a href="https://oss.sonatype.org/index.html#nexus-search;gav~com.pi4j~~~~" target="_blank" rel="noopener">Sonatype Maven repository&lt;/a>.&lt;/p>
&lt;iframe src="https://pi4j.com/download" style="width: 100%; height: 100vh;">&lt;/iframe></description></item><item><title>License (Open Source)</title><link>https://pi4j.com/about/license/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/about/license/</guid><description>&lt;p>The Pi4J Version 2.0 project is distributed and licensed under the &lt;strong>Apache License, Version 2.0&lt;/strong> license
(&lt;em>A business-friendly OSS license&lt;/em>).&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="noopener">apache.org/licenses/LICENSE-2.0&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/Pi4J/pi4j/blob/master/LICENSE.txt" target="_blank" rel="noopener">github.com/Pi4J/pi4j/blob/master/LICENSE.txt&lt;/a>&lt;/li>
&lt;/ul>
&lt;div style="max-width: 650px; margin-left: auto; margin-right: auto;" >
&lt;pre>
 Apache License
 Version 2.0, January 2004
 http://www.apache.org/licenses/
&lt;p>TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Definitions.&lt;/p>
&lt;p>&amp;ldquo;License&amp;rdquo; shall mean the terms and conditions for use, reproduction,
and distribution as defined by Sections 1 through 9 of this document.&lt;/p>
&lt;p>&amp;ldquo;Licensor&amp;rdquo; shall mean the copyright owner or entity authorized by
the copyright owner that is granting the License.&lt;/p></description></item><item><title>The Team</title><link>https://pi4j.com/about/team/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/about/team/</guid><description>&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th style="text-align: center">&lt;/th>
 &lt;th style="text-align: left">&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td style="text-align: center">&lt;img src="https://pi4j.com/assets/about/team/robert-savage.png" alt="">&lt;/td>
 &lt;td style="text-align: left">&lt;strong>&lt;a href="https://twitter.com/savageautomate" target="_blank" rel="noopener">Robert Savage&lt;/a>, Project Founder, Architect, Lead Developer&lt;/strong>.&lt;br>&lt;br>Principal Software Architect/Engineer. Consultant, technology enthusiast, entrepreneur, open source contributor, technology &lt;a href="http://www.savagehomeautomation.com/" target="_blank" rel="noopener">blogger&lt;/a>. Founder at shadeBlue, LLC and SavageSoftware, LLC. Robert has a more than 20 year career working in the professional audio visual and home/commercial automation industry and an extensive background in developing technology solutions with a special focus on home automation and hardware/firmware/software integration. In 2012, Robert created the Pi4J project which provides Java developers an easy to use Java library enabling access to low-level I/O functionality (GPIO, I2C, SPI, Serial, etc.) of embedded systems like the Raspberry Pi. I created Pi4J to empower Java programmers to get involved with embedded platforms such as the Raspberry Pi and provide an easy to use and accessible Java-centric object-oriented library enabling control of real world (physical) &amp;ldquo;things&amp;rdquo;. Pi4J V2 brings an entirely new and modern approach to Java I/O programming for embedded systems. I&amp;rsquo;m excited to get V2 released and see what additional creative projects emerge. &lt;br>&lt;br>Read more about &lt;a href="https://foojay.io/today/interviews-with-robert-savage-and-johan-vos-on-the-state-of-java-on-raspberry-pi/" target="_blank" rel="noopener">Robert Savage in this interview on Foojay.io&lt;/a>.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: center">&lt;img src="https://pi4j.com/assets/about/team/frank.jpg" alt="">&lt;/td>
 &lt;td style="text-align: left">&lt;strong>&lt;a href="https://twitter.com/frankdelporte" target="_blank" rel="noopener">Frank Delporte&lt;/a>, Project organization, Documenter, Developer&lt;/strong>.&lt;br>&lt;br>Java and Raspberry Pi-enthousiast, &lt;a href="https://webtechie.be/" target="_blank" rel="noopener">blogger on webtechie.be&lt;/a> and author of the book &lt;a href="https://webtechie.be/books/" target="_blank" rel="noopener">&amp;ldquo;Getting Started with Java on Raspberry Pi&amp;rdquo;&lt;/a>. Technical writer at &lt;a href="https://www.azul.com/" target="_blank" rel="noopener">Azul&lt;/a>. Lead coach &lt;a href="https://www.coderdojobelgium.be" target="_blank" rel="noopener">CoderDojo&lt;/a> in Ieper, Belgium. Software developer with more than 25 years of experience in video, multimedia, technical project management, digital signage and (web) programming. I&amp;rsquo;m a strong believer in the power and fun of Java on the Raspberry Pi. My goal is to make it as easy as possible to get started for new and experienced Java developers who want to start there first hardware experiment. That was the reason I wrote a book about this subject and share my experiments on my blog and GitHub. Pi4J V2 brings a lot of improvements to an already great project, and - just one example - the use of the BCM pin numbers will make it even a lot easier to use the GPIO&amp;rsquo;s. That&amp;rsquo;s why I join this great team to assist in delivering this V2 and extend it further so we can bring even more Java to the Raspberry Pi. &lt;br>&lt;br>Read more about &lt;a href="https://foojay.io/today/unlocking-java-secrets-with-frank-delporte-insights-stories-and-tips-for-success/" target="_blank" rel="noopener">Frank Delporte in this interview on Foojay.io&lt;/a>.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: center">&lt;img src="https://pi4j.com/assets/about/team/eitch.jpg" alt="">&lt;/td>
 &lt;td style="text-align: left">&lt;strong>&lt;a href="https://mstdn.gsi.li/@eitch" target="_blank" rel="noopener">Robert von Burg aka &amp;ldquo;Eitch&amp;rdquo;&lt;/a>, Developer, Releaser&lt;/strong>.&lt;br>&lt;br>As lead developer for &lt;a href="https://strolch.li" target="_blank" rel="noopener">strolch.li&lt;/a> we use Raspberry Pi as our platform to connect with products, and to implement a PLC in Java. The Pi4J project allows us to encapsulate the low level aspects of communicating with the hardware, and stay in our preferred choice. The &lt;a href="https://strolch.li/plc.html" target="_blank" rel="noopener">strolch.li/plc.html&lt;/a> project allows us to also stay in the same DSL for writing server applications, as well as communicating with low level devices. Since I love open source projects, it felt natural to me to start investing time in the Pi4J projects to assist in the further development.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: center">&lt;img src="https://pi4j.com/assets/about/team/dieter-holz.png" alt="">&lt;/td>
 &lt;td style="text-align: left">&lt;strong>&lt;a href="https://www.linkedin.com/in/dieter-holz-24761524/" target="_blank" rel="noopener">Dr. Dieter Holz&lt;/a>, Lecturer, Software Developer&lt;/strong>. &lt;br>&lt;br>Dr. Dieter Holz is lecturer and a software developer with more than 40 years of experience. He co-founded Canoo, a Software-Boutique based in Basel, Switzerland (now known as Karakun) and worked in several large scale Java projects. For over 10 years, he teaches at FHNW Java / JavaFX in the context of real-world business applications, and Kotlin and Jetpack Compose for native Android-Apps and desktop applications.&lt;br>&lt;br>Together with his students, Dieter created the &lt;a href="https://pi4j.com/examples/components/">CrowPi example implementations&lt;/a>, the &lt;a href="https://pi4j.com/pi4j-os/">Pi4J Operating System&lt;/a>, and other examples and documentation here on the Pi4J website.&lt;br>&lt;br>Read more about &lt;a href="https://foojay.io/today/java-in-education-combining-java-with-raspberry-pi-and-the-pi4j-library/" target="_blank" rel="noopener">Dieter Holz in this interview on Foojay.io&lt;/a>.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: center">&lt;img src="https://pi4j.com/assets/about/team/tom.jpg" alt="">&lt;/td>
 &lt;td style="text-align: left">&lt;strong>Thomas Aarts (aka Tom), Developer, Creating IC examples&lt;/strong>.&lt;br>&lt;br>My previous work entailed a decade in Alaska involving HF through Microwave communication and airport Instrument Landing Systems (ILS) DME NDB VASI. The next decade was centered around telephony. Working for ‘ROLM’ I was a software engineer working on the CBX series of switches. Most years in assembler using the DG instruction set. Later years on the larger CBX that used a company designed compiler much like ‘C’ on a much different instruction set. The last two decades I worked within an IBM lab. At the start I worked the AS400, a mid to large size server. Initially development of software at the user interface, above the MI. After a few years I moved in the firmware stack at the time all the servers, mid-mainframe, changed to using the IBM RISC processor. After some years in the firmware stack I moved to a newly formed simulation team. This entailed developing a simulation of the entire central processor complex (CPC) or Central Electronic Complex (CEC) to enable the firmware stack to boot and the partitions to boot on top and run. So after a long time working just above the hardware or simulating the hardware I found the Pi4j project of interest. After its’ use for some sensors and displays I am spending more time learning its capability and if possible offer something to the project. After that by decade history rundown I should add I retired. &lt;br>&lt;br>Read more about &lt;a href="https://pi4j.com/blog/2024/20240425_interview_tom_aarts/" target="_blank" rel="noopener">Tom Aarts in this interview&lt;/a>.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: center">&lt;img src="https://pi4j.com/assets/about/team/muhammad.jpg" alt="">&lt;/td>
 &lt;td style="text-align: left">&lt;strong>&lt;a href="https://twitter.com/UpsideDownTrees" target="_blank" rel="noopener">Muhammad Hashim aka &amp;ldquo;mhashim6&amp;rdquo;&lt;/a>, Developer, Focus on Kotlin&lt;/strong>.&lt;br>&lt;br>I&amp;rsquo;m a Software Engineer at &lt;a href="https://www.instabug.com/" target="_blank" rel="noopener">Instabug&lt;/a>, Writer &amp;amp; Blogger at &lt;a href="https://blog.mhashim6.me" target="_blank" rel="noopener">The Upside-Down Trees&lt;/a> &amp;amp; &lt;a href="https://blog.unhappyfolk.org" target="_blank" rel="noopener">The Unhappy Folk&lt;/a>. I go by &lt;em>&amp;ldquo;Timeless, Placeless&amp;rdquo;&lt;/em> As it better reflects the crafts I do; my art and interests; and my life. I&amp;rsquo;ve joined the team to bring Kotlin to Pi4J; The project that brought the JVM to the Raspberry Pi.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: center">&lt;img src="https://pi4j.com/assets/about/team/alexander.jpg" alt="">&lt;/td>
 &lt;td style="text-align: left">&lt;strong>&lt;a href="https://www.linkedin.com/in/alexander-liggesmeyer/" target="_blank" rel="noopener">Alexander Liggesmeyer&lt;/a>, Student Worker at Max Planck Institute for Informatics, &lt;a href="https://alexander.liggesmeyer.net/" target="_blank" rel="noopener">personal website&lt;/a>&lt;/strong>.&lt;br>&lt;br>Alexander created the GpioD Provider for release 2.5.0 to make Pi4J compatible with the Raspberry Pi 5. He also loves drinking cocktails with the &lt;a href="https://pi4j.com/featured-projects/cocktail-maker-by-alex9849/" target="_blank" rel="noopener">CocktailPi&lt;/a> as a result. &lt;br>&lt;br>Read more about &lt;a href="https://pi4j.com/blog/2024/20240318_interview_alexander_liggesmeyer/" target="_blank" rel="noopener">Alexander Liggesmeyer in this interview on Pi4J.com&lt;/a>.&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table></description></item></channel></rss>