<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>JBang Examples on Pi4J</title><link>https://pi4j.com/examples/jbang/</link><description>Recent content in JBang Examples on Pi4J</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://pi4j.com/examples/jbang/index.xml" rel="self" type="application/rss+xml"/><item><title>Minimal Example</title><link>https://pi4j.com/examples/jbang/jbang_minimal_example/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/examples/jbang/jbang_minimal_example/</guid><description>Minimal Pi4J with JBang example GITHUB PROJECT: github.com/Pi4J/pi4j-jbang &amp;gt; Pi4JMinimalExample.java
Intro Before proceeding with this example, make sure that you have a Raspberry Pi prepared to execute Java code with JBang as explained here.
The following example is based on the &amp;ldquo;Minimal example application&amp;rdquo;, and uses the same wiring with a button and LED. By using JBang we can run this project with a single file without the need of a full Maven or Gradle project, or compiling the Java code.</description></item><item><title>BME280 Sensor</title><link>https://pi4j.com/examples/jbang/bme280_temperature_humidity_pressure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/examples/jbang/bme280_temperature_humidity_pressure/</guid><description>BME280 Sensor (temp, humidity, pressure) via Pi4J, I2C, and JBang GITHUB PROJECT: github.com/Pi4J/pi4j-jbang &amp;gt; Pi4JTempHumPressI2C.java and github.com/Pi4J/pi4j-jbang &amp;gt; Pi4JTempHumPressSpi.java
Intro This is an example project to demonstrate how to read the temperature, humidity and pressure from a BME280 sensor, installed on an Adafruit board that can be controlled via I2C and SPI. Such a sensor itself is a very tiny component that can be integrated in phones and many other types of devices.</description></item><item><title>Pixelblaze Output Expander</title><link>https://pi4j.com/examples/jbang/pixelblaze_output_expander/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/examples/jbang/pixelblaze_output_expander/</guid><description>GITHUB PROJECT: github.com/Pi4J/pi4j-jbang &amp;gt; PixelblazeOutputExpander.java
One of the most &amp;ldquo;fancy&amp;rdquo; electronic components is definitely a LED strip. It&amp;rsquo;s really cool to control a long strip of lights with only a few lines of code&amp;hellip; But, there is a problem. The timing of the signals is crucial to reliably control these strips. Both Python and Java on a Raspberry Pi can struggle with these timings as they are running on Linux, a non-real-time operating system.</description></item></channel></rss>