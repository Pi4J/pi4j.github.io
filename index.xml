<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Welcome to Pi4J on Pi4J</title><link>https://pi4j.com/</link><description>Recent content in Welcome to Pi4J on Pi4J</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Thu, 09 Oct 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://pi4j.com/index.xml" rel="self" type="application/rss+xml"/><item><title>Basic Project Setup</title><link>https://pi4j.com/kotlin/kotlin-examples/getting-started/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/kotlin/kotlin-examples/getting-started/</guid><description>&lt;div class="notices note" &gt;&lt;p&gt;GITHUB PROJECT: &lt;a href="https://github.com/RoboticsLife/Lesson01-Gpio-Kotlin-Pi4J" target="_blank" rel="noopener"&gt;https://github.com/RoboticsLife/Lesson01-Gpio-Kotlin-Pi4J&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;In this video we go through the process of setting up the project in IntelliJIDEA to be able to do remote debugging between PC and a Raspberry Pi.&lt;/p&gt;
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;"&gt;
 &lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share; fullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/SkpH_MdL6hc?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"&gt;&lt;/iframe&gt;
 &lt;/div&gt;</description></item><item><title>Useful Tips</title><link>https://pi4j.com/kotlin/kotlin-examples/useful-tips/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/kotlin/kotlin-examples/useful-tips/</guid><description>&lt;div class="notices note" &gt;&lt;p&gt;GITHUB PROJECT: &lt;a href="https://github.com/RoboticsLife/Lesson02-Gpio-Kotlin-Pi4J" target="_blank" rel="noopener"&gt;https://github.com/RoboticsLife/Lesson02-Gpio-Kotlin-Pi4J&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;"&gt;
 &lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share; fullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/bYqifO31qI0?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"&gt;&lt;/iframe&gt;
 &lt;/div&gt;</description></item><item><title>Write OS to SD card</title><link>https://pi4j.com/prepare/sd-card/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/prepare/sd-card/</guid><description>&lt;p&gt;The SD card will hold the operating system. On the Raspberry Pi website, &lt;a href="https://www.raspberrypi.org/software/" target="_blank" rel="noopener"&gt;on the download page, you can
find the Imager tool&lt;/a&gt;. Select the version for your computer, download, and install it.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://pi4j.com/assets/getting-started/setup/download-imager.png" alt="Imager download"&gt;&lt;/p&gt;
&lt;p&gt;Start the Imager and follow these steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Put the SD Card in your computer&lt;/li&gt;
&lt;li&gt;Click &amp;ldquo;Choose Device&amp;rdquo; and select your type of board&lt;/li&gt;
&lt;li&gt;Click &amp;ldquo;Choose OS&amp;rdquo; &amp;gt; &amp;ldquo;Raspberry Pi OS (64-bit)&amp;rdquo; (or 32-bit for an older board)&lt;/li&gt;
&lt;li&gt;Click &amp;ldquo;Choose Storage&amp;rdquo; and select your SD card&lt;/li&gt;
&lt;li&gt;Click &amp;ldquo;Next&amp;rdquo;&lt;/li&gt;
&lt;li&gt;In the &amp;ldquo;Use OS customisation?&amp;rdquo; screen, click &amp;ldquo;Edit Settings&amp;rdquo;&lt;/li&gt;
&lt;li&gt;In &amp;ldquo;General&amp;rdquo;, fill in a name for your board, login, password, wifi settings, etc.&lt;/li&gt;
&lt;li&gt;In &amp;ldquo;Services&amp;rdquo;, enable SSH with password authentication&lt;/li&gt;
&lt;li&gt;In &amp;ldquo;Options&amp;rdquo; you can disable telemetry.&lt;/li&gt;
&lt;li&gt;Back in the &amp;ldquo;Use OS customisation?&amp;rdquo; screen, click &amp;ldquo;Yes&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Confirm with &amp;ldquo;Yes&amp;rdquo; that all data on the SD Card can be overwritten&lt;/li&gt;
&lt;li&gt;Wait until &amp;ldquo;Writing&amp;rdquo; and &amp;ldquo;Verifying&amp;rdquo; are finished&lt;/li&gt;
&lt;li&gt;You can now take the SD Card out of your computer, and put it in the Raspberry Pi&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;


&lt;div class="gallery caption-position-bottom caption-effect-slide hover-effect-zoom hover-transition" itemscope itemtype="http://schema.org/ImageGallery"&gt;
	 

&lt;link rel="stylesheet" href="https://pi4j.com/css/hugo-easy-gallery.css" /&gt;
&lt;div class="box fancy-figure caption-position-center caption-effect-fade" &gt;
 &lt;figure itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject"&gt;
 &lt;div class="img" style="background-image: url('/assets/getting-started/setup/imager-start.png');"&gt;
 &lt;img itemprop="thumbnail" src="https://pi4j.com/assets/getting-started/setup/imager-start.png" alt="Imager start screen"/&gt;
 &lt;/div&gt;
 &lt;a href="https://pi4j.com/assets/getting-started/setup/imager-start.png" itemprop="contentUrl"&gt;&lt;/a&gt;
 &lt;figcaption&gt;
 &lt;p&gt;Imager start screen&lt;/p&gt;</description></item><item><title>The First Boot</title><link>https://pi4j.com/prepare/first-boot/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/prepare/first-boot/</guid><description>&lt;p&gt;Put the SD Card with the operating system into the Raspberry Pi, connect a keyboard, mouse, and screen, and power it up!&lt;/p&gt;

&lt;div class="notices tip" &gt;&lt;p&gt;If you configured the login, password, WiFi, and SSH settings in the &amp;ldquo;Use OS customisation?&amp;rdquo; part of the Imager tool, you can connect to the Raspberry Pi from another PC via SSH with the username and hostname you filled in: &lt;code&gt;ssh USERNAME@HOSTNAME.local&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id="update-the-system"&gt;Update the System&lt;/h2&gt;
&lt;p&gt;Yes, even when you just created the SD Card with the latest OS provided by the Imager tool, it is possible that there are updates available.&lt;/p&gt;</description></item><item><title>Install Java and Tools</title><link>https://pi4j.com/prepare/install-java/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/prepare/install-java/</guid><description>&lt;p&gt;Our Raspberry Pi has started for the first time and we are now ready to add some Java to it!&lt;/p&gt;

&lt;div class="notices tip" &gt;&lt;p&gt;As described on the previous page &amp;ldquo;The First Boot&amp;rdquo;, a script can be executed that will do all this at once: &lt;code&gt;curl -sL https://raw.githubusercontent.com/Pi4J/pi4j-os/main/script/prepare-for-java.sh | bash&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id="add-missing-dependencies"&gt;Add Missing Dependencies&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s start with some helper tools that will be useful later.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ sudo apt install -y i2c-tools vim git java-common libxi6 libxrender1 libxtst6
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;i2c-tools&lt;/code&gt;: Tool to help you with I2C commands.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vim&lt;/code&gt;: Text editor like &lt;code&gt;nano&lt;/code&gt;, preferred by some, hated by others ;-)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git&lt;/code&gt;: Tool to interact with a Git repository, like GitHub.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;java-common libxi6 libxrender1 libxtst6&lt;/code&gt;: Dependencies of the JDK Debian package.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="install-java"&gt;Install Java&lt;/h2&gt;
&lt;p&gt;There are many ways you can install Java. The easiest way to make Java available for both normal use and as root user (&lt;code&gt;sudo&lt;/code&gt;), is the following approach which downloads one of the many distributions that are available.&lt;/p&gt;</description></item><item><title>Install Visual Studio Code</title><link>https://pi4j.com/prepare/install-vsc-ide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/prepare/install-vsc-ide/</guid><description>&lt;p&gt;You can develop Java applications on any computer and transfer the code or the compiled JAR-file to a Raspberry Pi to execute it. But Raspberry Pi 4 and 5 are definitely powerful enough to run an Integrated Development Environment (IDE)!&lt;/p&gt;
&lt;h2 id="visual-studio-code"&gt;Visual Studio Code&lt;/h2&gt;
&lt;p&gt;Visual Studio Code (VSC) is the free IDE (Integrated Developer Environment) by Microsoft. It&amp;rsquo;s designed as a universal tool that you can use for multiple programming languages with extensions.&lt;/p&gt;</description></item><item><title>Develop with Intellij IDEA</title><link>https://pi4j.com/examples/crowpi/develop-crowpi-with-intellij/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/examples/crowpi/develop-crowpi-with-intellij/</guid><description>&lt;p&gt;The CrowPi example project contains settings to make it easy to develop on a PC with IntelliJ IDEA and execute the application on the CrowPi. The articles, instructions and pictures are created accordingly.
IntelliJ IDEA is from available Jetbrains in different versions. The community version has enough functionality for development
with the CrowPi and is available for Windows, MacOS and Linux, but NOT for Raspberry Pi. The
&lt;a href="https://www.jetbrains.com/idea/download/" target="_blank" rel="noopener"&gt;download can be found here&lt;/a&gt;.&lt;/p&gt;</description></item><item><title>Download/Install</title><link>https://pi4j.com/architecture/about-the-code/download-sources/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/architecture/about-the-code/download-sources/</guid><description>&lt;p&gt;You can build the project from sources available on &lt;a href="https://github.com/Pi4J/pi4j" target="_blank" rel="noopener"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Checkout the project &lt;a href="https://github.com/Pi4J/pi4j" target="_blank" rel="noopener"&gt;pi4j&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Use a JDK version 21 or newer, e.g. &lt;code&gt;sdk use java 21.0.6-zulu&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;In the root of pi4j run &lt;code&gt;mvn clean install&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;[INFO] Executed tasks
[INFO] ------------------------------------------------------------------------
[INFO] Reactor Summary for Pi4J :: Parent POM 2.0-SNAPSHOT:
[INFO] 
[INFO] Pi4J :: Parent POM ................................. SUCCESS [ 0.972 s]
[INFO] Pi4J :: DOCKER :: Docker Parent POM .............. SUCCESS [ 0.290 s]
[INFO] Pi4J :: TESTING :: Arduino Test Harness ........... SUCCESS [ 1.832 s]
[INFO] Pi4J :: LIBRARY :: Libraries Parent POM ........... SUCCESS [ 0.064 s]
[INFO] Pi4J :: LIBRARY :: JNI Wrapper for PIGPIO Library . SUCCESS [ 6.615 s]
[INFO] Pi4J :: LIBRARY :: Java Library (CORE) ............ SUCCESS [ 6.260 s]
[INFO] Pi4J :: PLUGIN :: Plugins Parent POM ............. SUCCESS [ 0.061 s]
[INFO] Pi4J :: PLUGIN :: Mock Platform &amp;amp; Providers ...... SUCCESS [ 0.683 s]
[INFO] Pi4J :: PLUGIN :: PIGPIO I/O Providers ........... SUCCESS [ 2.084 s]
[INFO] Pi4J :: PLUGIN :: RaspberryPi Platform &amp;amp; Providers SUCCESS [ 0.447 s]
[INFO] Pi4J :: TESTING :: Unit/Integration Tests ......... SUCCESS [ 2.350 s]
[INFO] Pi4J :: EXAMPLE :: Sample Code .................... SUCCESS [ 0.632 s]
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="example-application"&gt;Example application&lt;/h2&gt;
&lt;h3 id="building-the-example-application"&gt;Building the example application&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Checkout the project &lt;a href="https://github.com/Pi4J/pi4j-demo-telegraph" target="_blank" rel="noopener"&gt;Pi4J V2+ - Telegraph Demo Project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Select JDK 21, e.g. &lt;code&gt;sdk use java 21.0.6-zulu&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;In the root of pi4j-demo-telegraph run &lt;code&gt;mvn clean install&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Check the directory target\distribution &amp;ndash;&amp;gt; this contains all the files to be copied to the Raspberry Pi&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;/target/distribution/pi4j-core-2.0-SNAPSHOT.jar
/target/distribution/pi4j-demo-telegraph-1.0-SNAPSHOT.jar
/target/distribution/pi4j-library-pigpio-2.0-SNAPSHOT.jar
/target/distribution/pi4j-plugin-pigpio-2.0-SNAPSHOT.jar
/target/distribution/pi4j-plugin-raspberrypi-2.0-SNAPSHOT.jar
/target/distribution/run.sh
/target/distribution/slf4j-api-2.0.0-alpha0.jar
/target/distribution/slf4j-simple-2.0.0-alpha0.jar
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id="running-on-the-raspberry-pi"&gt;Running on the Raspberry Pi&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;After copying all files from target/distribution to a Raspberry Pi, start &lt;code&gt;./run.sh&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Info about V1</title><link>https://pi4j.com/about/info-v1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/about/info-v1/</guid><description>&lt;p&gt;The original library which started in 2012 and got a last release in 2021. Up till &lt;strong&gt;version 1.3.0 the library targets Java 8&lt;/strong&gt;, while &lt;strong&gt;version 1.4.0 relies on Java 11&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id="archived-sources"&gt;Archived Sources&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/Pi4J/pi4j-v1" target="_blank" rel="noopener"&gt;The sources of V1 can be found in the read-only GitHub repository &lt;code&gt;pi4j/pi4j-v1&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="release-notes-v1x"&gt;Release Notes V1.X&lt;/h2&gt;
&lt;h3 id="pi4j-version-14---2021-03-03"&gt;Pi4J Version 1.4 - 2021-03-03&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Support for JDK/JRE 11 and 64-bit ARM platforms&lt;/li&gt;
&lt;li&gt;This release is the final release for the Pi4J Version 1.x codebase&lt;/li&gt;
&lt;li&gt;The Pi4J project is now prioritizing focus on providing Java programs access, control and communication with the core I/O capabilities of the Raspberry Pi platform&lt;/li&gt;
&lt;li&gt;Changed project to Apache License, Version 2.0&lt;/li&gt;
&lt;li&gt;Removed pi4j-device and pi4j-gpio-extension library&lt;/li&gt;
&lt;li&gt;Removed platform support for Odroid, BananaPi, BPi, NanoPi, OrangePi&lt;/li&gt;
&lt;li&gt;Various improvements and bug fixes listed here: &lt;a href="https://github.com/Pi4J/pi4j-v1/milestone/9?closed=1" target="_blank" rel="noopener"&gt;GitHub Issues (v1.4)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Not using Java-modules yet, this will be part of the V2&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pi4j.com/1.4/index.html"&gt;Documentation website V1.4&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="pi4j-version-13---2021-01-29"&gt;Pi4J Version 1.3 - 2021-01-29&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Added support for Raspberry Pi 4B, 400, and Compute Module 4&lt;/li&gt;
&lt;li&gt;Various improvements and bug fixes listed here: &lt;a href="https://github.com/Pi4J/pi4j-v1/milestone/10?closed=1" target="_blank" rel="noopener"&gt;GitHub Issues (v1.3)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Based on JDK8&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pi4j.com/1.3/index.html"&gt;Documentation website V1.3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="pi4j-version-12---2019-02-26"&gt;Pi4J Version 1.2 - 2019-02-26&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Based on Java 8&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pi4j.com/1.2/index.html"&gt;Documentation website V1.2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="pi4j-version-11---2016-07-26"&gt;Pi4J Version 1.1 - 2016-07-26&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pi4j.com/1.1/index.html"&gt;Documentation webiste V1.1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="pi4j-version-10---2015-04-18"&gt;Pi4J Version 1.0 - 2015-04-18&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pi4j.com/1.0/index.html"&gt;Documentation website V1.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>What's New in V2</title><link>https://pi4j.com/about/info-v2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/about/info-v2/</guid><description>&lt;p&gt;As of versions 2.X.X, Pi4J &lt;strong&gt;no longer includes support for peripheral devices and add-on chipsets/boards&lt;/strong&gt; as part of the core project. A new plugin model has been introduced in version 2.0 that helps to enable third-party development and support third-party add-ons which can be developed and maintained independently of the core Pi4J project.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;V2-versions of Pi4J require Java 11&lt;/strong&gt; or higher.&lt;/p&gt;
&lt;h2 id="whats-new-in-v2"&gt;What&amp;rsquo;s New in V2?&lt;/h2&gt;
&lt;p&gt;Pi4J V2 brings with it many new features, and an entirely new architecture that focuses on
extensibility, simplified integration and a modern Java API including the following:&lt;/p&gt;</description></item><item><title>What's New in V3</title><link>https://pi4j.com/about/info-v3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/about/info-v3/</guid><description>&lt;p&gt;Versions 3.0.1 is based on 2.8.0 (released in January 2025), but bumps the &lt;strong&gt;Java version to 21&lt;/strong&gt;!&lt;/p&gt;
&lt;p&gt;We &lt;a href="https://github.com/Pi4J/pi4j/discussions/409" target="_blank" rel="noopener"&gt;asked our users&lt;/a&gt; which minimal Java version we should use, but there was no one clear answer, as expected ;-)&lt;/p&gt;
&lt;p&gt;The current/latest Long Term Support (LTS) version of Java is version 21. So it makes sense to jump forward from 11 to 21. This will also prepare us for the next LTS, which will be Java 25 in September 2025. Bumping to the latest LTS makes it possible to make use of many newer Java language and runtime improvements, simplify parts of the code, etc.&lt;/p&gt;</description></item><item><title>Build Instructions</title><link>https://pi4j.com/architecture/about-the-code/build-instructions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/architecture/about-the-code/build-instructions/</guid><description>&lt;p&gt;Building the Pi4J Project is simple and requires minimal effort. Pi4J is primarily built using Apache Maven and Java 21.
Pi4J can be built directly on your host computer or inside a Docker container where all toolchains and dependencies are
already installed, configured and cached.&lt;/p&gt;

&lt;div class="notices note" &gt;&lt;p&gt;If you wish to build using a Docker container, please skip ahead to the
&lt;a href="#building-with-docker"&gt;&lt;em&gt;Building with Docker&lt;/em&gt;&lt;/a&gt; topic.&lt;/p&gt;
&lt;/div&gt;

&lt;hr&gt;
&lt;h3 id="prerequisites"&gt;Prerequisites&lt;/h3&gt;
&lt;p&gt;In order to build Pi4J, the host system must have the following toolchains pre-installed.&lt;/p&gt;</description></item><item><title>CrowPi examples</title><link>https://pi4j.com/examples/crowpi/crowpi-examples/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/examples/crowpi/crowpi-examples/</guid><description>&lt;div class="notices tip" &gt;&lt;p&gt;GITHUB PROJECT: &lt;a href="https://github.com/Pi4J/pi4j-example-crowpi" target="_blank" rel="noopener"&gt;https://github.com/Pi4J/pi4j-example-crowpi&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;The CrowPi example code contains examples for the following components. The links in this table will bring you to the German documentation written by the students who created these examples.&lt;/p&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th style="text-align: left"&gt;Component&lt;/th&gt;
 &lt;th style="text-align: left"&gt;Link&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td style="text-align: left"&gt;7-Segment Display&lt;/td&gt;
 &lt;td style="text-align: left"&gt;&lt;a href="https://fhnw-ip5-ip6.github.io/CrowPiGoesJavaTutorial/de/components/seven-segment/" target="_blank" rel="noopener"&gt;seven-segment&lt;/a&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td style="text-align: left"&gt;Button&lt;/td&gt;
 &lt;td style="text-align: left"&gt;&lt;a href="https://fhnw-ip5-ip6.github.io/CrowPiGoesJavaTutorial/de/components/button/" target="_blank" rel="noopener"&gt;button&lt;/a&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td style="text-align: left"&gt;Button Matrix&lt;/td&gt;
 &lt;td style="text-align: left"&gt;&lt;a href="https://fhnw-ip5-ip6.github.io/CrowPiGoesJavaTutorial/de/components/button-matrix/" target="_blank" rel="noopener"&gt;button-matrix&lt;/a&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td style="text-align: left"&gt;Buzzer&lt;/td&gt;
 &lt;td style="text-align: left"&gt;&lt;a href="https://fhnw-ip5-ip6.github.io/CrowPiGoesJavaTutorial/de/components/buzzer/" target="_blank" rel="noopener"&gt;buzzer&lt;/a&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td style="text-align: left"&gt;Infrared Receiver&lt;/td&gt;
 &lt;td style="text-align: left"&gt;&lt;a href="https://fhnw-ip5-ip6.github.io/CrowPiGoesJavaTutorial/de/components/ir-receiver/" target="_blank" rel="noopener"&gt;ir-receiver&lt;/a&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td style="text-align: left"&gt;LCD Display&lt;/td&gt;
 &lt;td style="text-align: left"&gt;&lt;a href="https://fhnw-ip5-ip6.github.io/CrowPiGoesJavaTutorial/de/components/lcd-display/" target="_blank" rel="noopener"&gt;lcd-display&lt;/a&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td style="text-align: left"&gt;LED Matrix&lt;/td&gt;
 &lt;td style="text-align: left"&gt;&lt;a href="https://fhnw-ip5-ip6.github.io/CrowPiGoesJavaTutorial/de/components/led-matrix/" target="_blank" rel="noopener"&gt;led-matrix&lt;/a&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td style="text-align: left"&gt;Light sensor&lt;/td&gt;
 &lt;td style="text-align: left"&gt;&lt;a href="https://fhnw-ip5-ip6.github.io/CrowPiGoesJavaTutorial/de/components/light-sensor/" target="_blank" rel="noopener"&gt;light-sensor&lt;/a&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td style="text-align: left"&gt;PIR Motion Sensor&lt;/td&gt;
 &lt;td style="text-align: left"&gt;&lt;a href="https://fhnw-ip5-ip6.github.io/CrowPiGoesJavaTutorial/de/components/pir-motion-sensor/" target="_blank" rel="noopener"&gt;pir-motion-sensor&lt;/a&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td style="text-align: left"&gt;Relais&lt;/td&gt;
 &lt;td style="text-align: left"&gt;&lt;a href="https://fhnw-ip5-ip6.github.io/CrowPiGoesJavaTutorial/de/components/relay/" target="_blank" rel="noopener"&gt;relay&lt;/a&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td style="text-align: left"&gt;RFID&lt;/td&gt;
 &lt;td style="text-align: left"&gt;&lt;a href="https://fhnw-ip5-ip6.github.io/CrowPiGoesJavaTutorial/de/components/rfid/" target="_blank" rel="noopener"&gt;rfid&lt;/a&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td style="text-align: left"&gt;Step motor&lt;/td&gt;
 &lt;td style="text-align: left"&gt;&lt;a href="https://fhnw-ip5-ip6.github.io/CrowPiGoesJavaTutorial/de/components/step-motor/" target="_blank" rel="noopener"&gt;step-motor&lt;/a&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td style="text-align: left"&gt;Servomotor&lt;/td&gt;
 &lt;td style="text-align: left"&gt;&lt;a href="https://fhnw-ip5-ip6.github.io/CrowPiGoesJavaTutorial/de/components/servo-motor/" target="_blank" rel="noopener"&gt;servo-motor&lt;/a&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td style="text-align: left"&gt;Sound Sensor&lt;/td&gt;
 &lt;td style="text-align: left"&gt;&lt;a href="https://fhnw-ip5-ip6.github.io/CrowPiGoesJavaTutorial/de/components/sound-sensor/" target="_blank" rel="noopener"&gt;sound-sensor&lt;/a&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td style="text-align: left"&gt;Temperature and humidity sensor&lt;/td&gt;
 &lt;td style="text-align: left"&gt;&lt;a href="https://fhnw-ip5-ip6.github.io/CrowPiGoesJavaTutorial/de/components/humi-temp-sens/" target="_blank" rel="noopener"&gt;humi-temp-sens&lt;/a&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td style="text-align: left"&gt;Tilt Sensor&lt;/td&gt;
 &lt;td style="text-align: left"&gt;&lt;a href="https://fhnw-ip5-ip6.github.io/CrowPiGoesJavaTutorial/de/components/tilt-sensor/" target="_blank" rel="noopener"&gt;tilt-sensor&lt;/a&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td style="text-align: left"&gt;Touch Sensor&lt;/td&gt;
 &lt;td style="text-align: left"&gt;&lt;a href="https://fhnw-ip5-ip6.github.io/CrowPiGoesJavaTutorial/de/components/touch-sensor/" target="_blank" rel="noopener"&gt;touch-sensor&lt;/a&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td style="text-align: left"&gt;Ultrasonic distance sensor&lt;/td&gt;
 &lt;td style="text-align: left"&gt;&lt;a href="https://fhnw-ip5-ip6.github.io/CrowPiGoesJavaTutorial/de/components/ultrasonic-sensor/" target="_blank" rel="noopener"&gt;ultrasonic-sensor&lt;/a&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td style="text-align: left"&gt;Vibration motor&lt;/td&gt;
 &lt;td style="text-align: left"&gt;&lt;a href="https://fhnw-ip5-ip6.github.io/CrowPiGoesJavaTutorial/de/components/vibration-motor/" target="_blank" rel="noopener"&gt;vibration-motor&lt;/a&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;</description></item><item><title>Pi4J API JavaDoc</title><link>https://pi4j.com/documentation/javadoc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/documentation/javadoc/</guid><description>&lt;p&gt;The source code of the Pi4J library is documented with JavaDoc. If you use the library in your IDE, you can download the library sources to have more code hints while coding.&lt;/p&gt;
&lt;p&gt;Thanks to APIdia, this documentation is also available online on &lt;a href="https://apidia.net/mvn/com.pi4j/pi4j" target="_blank" rel="noopener"&gt;apidia.net/mvn/com.pi4j/pi4j&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://pi4j.com/assets/documentation/apidia.png" alt="APIdia website"&gt;&lt;/p&gt;</description></item><item><title>Understanding the GPIO pins</title><link>https://pi4j.com/getting-started/understanding-the-pins/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/getting-started/understanding-the-pins/</guid><description>&lt;p&gt;Connecting electronic components to the Pi is done via one or more of the pins in the so-called header. The number of
pins has &amp;ldquo;grown&amp;rdquo; between the different Raspberry Pi board versions, but all recent ones have a 40-pin header. It&amp;rsquo;s of
course important to be aware of the correct numbering to not connect components the wrong way.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://pi4j.com/assets/getting-started/pins/headernumber-on-board.jpg" alt="Numbering of the pins"&gt;&lt;/p&gt;
&lt;h2 id="type-of-pins"&gt;Type of Pins&lt;/h2&gt;
&lt;p&gt;The pins have different uses&lt;/p&gt;</description></item><item><title>Electrical Engineering</title><link>https://pi4j.com/getting-started/electrical-engineering/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/getting-started/electrical-engineering/</guid><description>&lt;p&gt;The goal of the Pi4J project is to combine sofware (Java) with hardware (electronic components). On this page we give you some tips and tricks for the electronics part.&lt;/p&gt;
&lt;h2 id="breadboard"&gt;Breadboard&lt;/h2&gt;
&lt;p&gt;A breadboard is the basic for each experiment. It allows you to easily connect several components to each other and the Raspberry Pi. Here is a video that explains the basics of breadboards:&lt;/p&gt;
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;"&gt;
 &lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share; fullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/6WReFkfrUIk?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"&gt;&lt;/iframe&gt;
 &lt;/div&gt;

&lt;p&gt;


&lt;div class="gallery caption-position-bottom caption-effect-slide hover-effect-zoom hover-transition" itemscope itemtype="http://schema.org/ImageGallery"&gt;
	 

&lt;link rel="stylesheet" href="https://pi4j.com/css/hugo-easy-gallery.css" /&gt;
&lt;div class="box fancy-figure caption-position-center caption-effect-fade" &gt;
 &lt;figure itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject"&gt;
 &lt;div class="img" style="background-image: url('/assets/getting-started/electricalEngineering/breadboard.jpeg');"&gt;
 &lt;img itemprop="thumbnail" src="https://pi4j.com/assets/getting-started/electricalEngineering/breadboard.jpeg" alt="Breadboard"/&gt;
 &lt;/div&gt;
 &lt;a href="https://pi4j.com/assets/getting-started/electricalEngineering/breadboard.jpeg" itemprop="contentUrl"&gt;&lt;/a&gt;
 &lt;figcaption&gt;
 &lt;p&gt;Breadboard&lt;/p&gt;</description></item><item><title>Java development with VSC</title><link>https://pi4j.com/getting-started/java-development-on-the-raspberry-pi-with-vsc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/getting-started/java-development-on-the-raspberry-pi-with-vsc/</guid><description>&lt;h2 id="java-on-the-raspberry-pi"&gt;Java on the Raspberry Pi&lt;/h2&gt;
&lt;p&gt;You need Java 21 or newer to use Pi4J V3+. Please check the &lt;a href="https://pi4j.com/prepare/install-java/"&gt;Prepare a Raspberry Pi&lt;/a&gt; and &lt;a href="https://pi4j.com/prepare/install-java/"&gt;Install Java and Tools&lt;/a&gt; instructions. On a board with ARMv7 or ARMv8 you will get this result:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ java -version
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openjdk version &lt;span style="color:#e6db74"&gt;&amp;#34;21.0.5&amp;#34;&lt;/span&gt; 2024-10-15 LTS
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;OpenJDK Runtime Environment Zulu21.38+21-CA &lt;span style="color:#f92672"&gt;(&lt;/span&gt;build 21.0.5+11-LTS&lt;span style="color:#f92672"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;OpenJDK 64-Bit Server VM Zulu21.38+21-CA &lt;span style="color:#f92672"&gt;(&lt;/span&gt;build 21.0.5+11-LTS, mixed mode, sharing&lt;span style="color:#f92672"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Keep in mind this version is &lt;strong&gt;only compatible with ARMv7 or higher&lt;/strong&gt; and doesn&amp;rsquo;t support all
Raspberry Pi board versions. If you have a Raspberry Pi A (version 3), B (version 2 or higher),
or Compute (version 3 or higher), you are good to go! For all other boards, or if you get the error below, you will need some additional steps
that are described on &lt;a href="https://pi4j.com/documentation/java-installation/"&gt;Java for ARMv6/7/8&lt;/a&gt;.&lt;/p&gt;</description></item><item><title>Maven settings</title><link>https://pi4j.com/architecture/about-the-code/maven-settings/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/architecture/about-the-code/maven-settings/</guid><description>&lt;p&gt;To simplify development but not commit sensitive information, you can add personal or PC-specific settings in the Maven settings.xml file. This file is stored or needs to be created in the &amp;ldquo;.m2&amp;rdquo; directory in your home directory:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Windows: C:\Users\YOUR_NAME.m2&lt;/li&gt;
&lt;li&gt;Linux: /home/YOUR_NAME/.m2&lt;/li&gt;
&lt;li&gt;Mac: /Users/YOUR_NAME/.m2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For more info see &lt;a href="https://www.baeldung.com/maven-local-repository" target="_blank" rel="noopener"&gt;this article on Baeldung&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This is an example settings file, including settings for compiling of Pi4J and credentials to upload the generated code to a Raspberry Pi.&lt;/p&gt;</description></item><item><title>Pin numbering</title><link>https://pi4j.com/documentation/pin-numbering/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/documentation/pin-numbering/</guid><description>&lt;p&gt;Pi4J V1 took a pretty opinionated approach to pin numbering as the scheme was based on the underlying WiringPi.
This scheme was incompatibility with other pin diagrams and pin numbering used by other development platforms and libraries.&lt;/p&gt;
&lt;p&gt;As Pi4J V2+ is build as a &amp;ldquo;pass thru library&amp;rdquo;, and uses &lt;a href="http://abyz.me.uk/rpi/pigpio/index.html" target="_blank" rel="noopener"&gt;PiGpio&lt;/a&gt; and other tools as the underlying framework. The more well-known BCM numbering is being used now.&lt;/p&gt;
&lt;p&gt;This drawing shows the different numbers for WiringPi and BCM in a 40-pins Raspberry Pi header:&lt;/p&gt;</description></item><item><title>Release Notes</title><link>https://pi4j.com/about/release-notes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/about/release-notes/</guid><description>&lt;p&gt;All releases of Pi4J V2+ are listed on &lt;a href="https://github.com/Pi4J/pi4j/releases" target="_blank" rel="noopener"&gt;github.com/Pi4J/pi4j/releases&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="v3"&gt;V3&lt;/h2&gt;
&lt;p&gt;Requires Java 21, see &lt;a href="https://pi4j.com/about/info-v3/"&gt;What&amp;rsquo;s New in V3&lt;/a&gt; for more info.&lt;/p&gt;
&lt;h3 id="2025-09-23---v303"&gt;2025-09-23 - V3.0.3&lt;/h3&gt;
&lt;p&gt;Work is ongoing to extend Pi4J with a plugin based on the FFM API (Foreign Function &amp;amp; Memory API). To make this possible, some changes have been made to the core code in preparation for this new plugin. And of course more improvements and bug fixes&amp;hellip;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Board models: Added CM5 Lite board codes.&lt;/li&gt;
&lt;li&gt;Replace Nexus Staging plugin with Central Publishing plugin.&lt;/li&gt;
&lt;li&gt;Refactored &lt;code&gt;Registry&lt;/code&gt; to use &lt;code&gt;IOType&lt;/code&gt; for managing addresses, ensuring better segregation of address spaces between IO types. Updated related methods and internal data structures accordingly.&lt;/li&gt;
&lt;li&gt;Introduced the ability to shutdown and unregister IO instances using the instance itself, complementing the existing ID-based method. Updated related methods, tests, and documentation to reflect the new functionality.&lt;/li&gt;
&lt;li&gt;Ensure proper removal of IO instance during shutdown in DefaultRuntimeRegistry.&lt;/li&gt;
&lt;li&gt;PWM IO Change Float to Integer and remove float related conversions.&lt;/li&gt;
&lt;li&gt;Gate digital output event creation on listener / binding presence.&lt;/li&gt;
&lt;li&gt;Move PWM chip detection to BoardInfo to make it usable for all plugins.&lt;/li&gt;
&lt;li&gt;Unit test improvements.&lt;/li&gt;
&lt;li&gt;LinuxFS plugin:
&lt;ul&gt;
&lt;li&gt;I2C: Improvements in &lt;code&gt;registerRead&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;SPI: SPI write now supports larger buffers by creating multi ioctl spi writes.&lt;/li&gt;
&lt;li&gt;PWM: When the RP1 chip is found, PWM provider will use the RP1 architected address of PWM0 to determine the correct pwmChipx to use. This change will effect Raspberry Pi 5 and Compute Module 5 using updated kernel.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GpioD plugin:
&lt;ul&gt;
&lt;li&gt;Introduced a volatile &lt;code&gt;running&lt;/code&gt; flag to properly manage the lifecycle of the input listener thread. Enhanced shutdown logic to ensure threads are safely and consistently terminated. Fix for &lt;a href="https://github.com/Pi4J/pi4j/issues/478" target="_blank" rel="noopener"&gt;Issue #478&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Make GpioLine Closeable.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thanks to contributions by &lt;a href="https://github.com/IAmNickNack" target="_blank" rel="noopener"&gt;@IAmNickNack&lt;/a&gt;, &lt;a href="https://github.com/stefanhaustein" target="_blank" rel="noopener"&gt;@stefanhaustein&lt;/a&gt;, &lt;a href="https://github.com/taartspi" target="_blank" rel="noopener"&gt;@taartspi&lt;/a&gt;, &lt;a href="https://github.com/eitch" target="_blank" rel="noopener"&gt;@eitch&lt;/a&gt;, &lt;a href="https://github.com/fdelporte" target="_blank" rel="noopener"&gt;@fdelporte&lt;/a&gt;.&lt;/p&gt;</description></item><item><title>Developing on a remote PC</title><link>https://pi4j.com/getting-started/developing-on-a-remote-pc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/getting-started/developing-on-a-remote-pc/</guid><description>&lt;div class="notices tip" &gt;&lt;p&gt;GITHUB PROJECT: &lt;a href="https://github.com/Pi4J/pi4j-maven-archetype" target="_blank" rel="noopener"&gt;https://github.com/Pi4J/pi4j-maven-archetype&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id="developing-java-programs-using-a-remote-pc-workstation"&gt;Developing Java Programs Using a Remote PC Workstation&lt;/h2&gt;
&lt;p&gt;Writing your Java program, compiling and running it directly on the Raspberry Pi board
as shown in the previous chapter is perfectly fine, of course,
but there is an alternative way to arrange your developing laboratory, using a normal
desktop computer as Remote Developing Workstation (RDW).&lt;/p&gt;
&lt;p&gt;This &lt;a href="https://github.com/Pi4J/pi4j-maven-archetype" title="raspimaven-archetype" target="_blank" rel="noopener"&gt;Maven Archetype&lt;/a&gt; will give you
a tool to generate Pi4J V2+ skeleton Java projects. You can use it for your next Pi4j project and you will be able
to develop your program on the remote workstation (RDW), compile them, transmit the executable
code on the target Pi board and run it. You can also start a remote debugging session.&lt;/p&gt;</description></item><item><title>Pi4J Downloads</title><link>https://pi4j.com/about/download/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/about/download/</guid><description>&lt;p&gt;All downloads provided by the project can be found on &lt;a href="https://pi4j.com/download/" target="_blank" rel="noopener"&gt;pi4j.com/download&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The compiled artifacts (releases and snapshots) are available in the
&lt;a href="https://oss.sonatype.org/index.html#nexus-search;gav~com.pi4j~~~~" target="_blank" rel="noopener"&gt;Sonatype Maven repository&lt;/a&gt;.&lt;/p&gt;
&lt;iframe src="https://pi4j.com/download" style="width: 100%; height: 100vh;"&gt;&lt;/iframe&gt;</description></item><item><title>Minimal Kotlin Pi4J example</title><link>https://pi4j.com/kotlin/kotlin-dsl/minimal-kotlin-example/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/kotlin/kotlin-dsl/minimal-kotlin-example/</guid><description>&lt;div class="notices tip" &gt;&lt;p&gt;Full Example on GitHub: &lt;a href="https://github.com/Pi4J/pi4j-kotlin/blob/master/example/src/main/kotlin/MinimalExample.kt" target="_blank" rel="noopener"&gt;https://github.com/Pi4J/pi4j-kotlin/blob/master/example/src/main/kotlin/MinimalExample.kt&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;


&lt;div class="notices tip" &gt;&lt;p&gt;For full documentation, visit the &lt;a href="https://pi4j.com/kotlin/kotlin-api-docs/" target="_blank" rel="noopener"&gt;Kotlin Docs&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;This is a minimal working example, make sure to check it out from the link above for the full introduction and comments.&lt;/p&gt;
&lt;p&gt;It does exactly the same functionality of the Minimal Example &lt;a href="https://pi4j.com/getting-started/minimal-example-application/"&gt;using the Java API&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The application will toggle an LED on/off and each time you press the button, the toggling speed increases. When you have pushed the button 5 times, the application stops.&lt;/p&gt;</description></item><item><title>Kotlin API &amp; DSL Documentation</title><link>https://pi4j.com/kotlin/kotlin-dsl/kotlin-api-docs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/kotlin/kotlin-dsl/kotlin-api-docs/</guid><description>&lt;div class="notices info" &gt;&lt;p&gt;Here you can find the provided APIs and the dead-simple DSLs of the Kotlin package.&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id="components"&gt;Components&lt;/h2&gt;
&lt;h3 id="context"&gt;Context&lt;/h3&gt;
&lt;p&gt;To create a new Pi4J context, use the &lt;code&gt;pi4j&lt;/code&gt; function. It creates a new &lt;em&gt;auto&lt;/em&gt; &lt;code&gt;Context&lt;/code&gt; object and uses it as a
receiver
for your lambda:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-kotlin" data-lang="kotlin"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;pi4j {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// You have access to a newly created auto context 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; describe()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You don&amp;rsquo;t need to call &lt;code&gt;shutdown()&lt;/code&gt;, it&amp;rsquo;s called automatically at the end of the block.&lt;br&gt;
You can think of the &lt;code&gt;pi4j&lt;/code&gt; block as your entire routine/ program.&lt;/p&gt;</description></item><item><title>Coroutines Support</title><link>https://pi4j.com/kotlin/kotlin-dsl/coroutines/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/kotlin/kotlin-dsl/coroutines/</guid><description>&lt;h2 id="pi4jasync"&gt;pi4jAsync&lt;/h2&gt;
&lt;p&gt;Same with the &lt;code&gt;pi4j&lt;/code&gt; DSL, you can create a pi4j block to execute within a &lt;code&gt;CoroutineScope&lt;/code&gt; using the &lt;code&gt;pi4jAsync&lt;/code&gt; DSL.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-kotlin" data-lang="kotlin"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;pi4jAsync {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; delay(&lt;span style="color:#ae81ff"&gt;100&lt;/span&gt;) &lt;span style="color:#75715e"&gt;// suspended call
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; describe()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Inside &lt;code&gt;pi4jAsync&lt;/code&gt; you have access to a newly created auto context and you can run your code in the provided &lt;code&gt;CoroutineScope&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="custom-coroutinescope"&gt;Custom CoroutineScope&lt;/h2&gt;
&lt;p&gt;You can also use a custom &lt;code&gt;CoroutineScope&lt;/code&gt; instance.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-kotlin" data-lang="kotlin"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;pi4jAsync(CoroutineScope(&lt;span style="color:#a6e22e"&gt;Dispatchers&lt;/span&gt;.Default)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; delay(&lt;span style="color:#ae81ff"&gt;100&lt;/span&gt;) &lt;span style="color:#75715e"&gt;// suspended call
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; describe()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="minimal-example-with-coroutines"&gt;Minimal Example with Coroutines&lt;/h2&gt;

&lt;div class="notices info" &gt;&lt;p&gt;This is a the same as the &lt;a href="https://pi4j.com/kotlin/minimal-kotlin-example/"&gt;minimal example&lt;/a&gt;, but leveraging Kotlin&amp;rsquo;s Coroutines&lt;/p&gt;</description></item><item><title>I²C Kotlin DSL</title><link>https://pi4j.com/kotlin/kotlin-dsl/i2c/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/kotlin/kotlin-dsl/i2c/</guid><description>&lt;div class="notices info" &gt;&lt;p&gt;Feel free to checkout the &lt;a href="https://pi4j.com/documentation/io-examples/i2c/"&gt;Pi4J docs on I²C&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id="installation"&gt;Installation&lt;/h2&gt;
&lt;p&gt;Add LinuxFs dependency&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-kotlin" data-lang="kotlin"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;dependencies {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; implementation(&lt;span style="color:#e6db74"&gt;&amp;#34;com.pi4j:pi4j-plugin-linuxfs:2.3.0&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="ic-dsl"&gt;I²C DSL&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-kotlin" data-lang="kotlin"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;i2c(&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;0x3f&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; id(&lt;span style="color:#e6db74"&gt;&amp;#34;TCA9534&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; linuxFsI2CProvider()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}.use { tca9534Dev &lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// use here. Will auto close
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="writing"&gt;Writing&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-kotlin" data-lang="kotlin"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;i2c(&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;0x3f&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; id(&lt;span style="color:#e6db74"&gt;&amp;#34;TCA9534&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; linuxFsI2CProvider()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}.use { tca9534Dev &lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;val&lt;/span&gt; newState = tca9534Dev.setPin(currentState, pin = &lt;span style="color:#ae81ff"&gt;8&lt;/span&gt;, TCA9534_REG_ADDR_OUT_PORT)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="minimal-ic-example"&gt;Minimal I²C Example&lt;/h2&gt;

&lt;div class="notices info" &gt;&lt;p&gt;This is the Kotlin DSL version of the same &lt;a href="https://pi4j.com/documentation/io-examples/i2c#code-example"&gt;I²C example here&lt;/a&gt;, but leveraging the Kotlin DSL&lt;/p&gt;</description></item><item><title>Code styling</title><link>https://pi4j.com/architecture/about-the-code/code-styling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/architecture/about-the-code/code-styling/</guid><description>&lt;p&gt;To prevent unnecessary code (tabs versus spaces, number of characters per line&amp;hellip;) we have defined an &lt;a href="https://github.com/Pi4J/pi4j/blob/master/.editorconfig" target="_blank" rel="noopener"&gt;editorconfig&lt;/a&gt; for IntelliJ IDEA. You can find &lt;a href="https://www.jetbrains.com/help/idea/configuring-code-style.html" target="_blank" rel="noopener"&gt;more info here&lt;/a&gt; about its use.&lt;/p&gt;
&lt;p&gt;Some tips to keep the code clean and readable:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Short methods with a clear name&lt;/li&gt;
&lt;li&gt;Use SonarLint to get improvement tips while code&lt;/li&gt;
&lt;li&gt;Use shortcuts
&lt;ul&gt;
&lt;li&gt;CTRL+ALT+L: Reformat code&lt;/li&gt;
&lt;li&gt;CTRL+ALT+O: Optimize imports&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Hardware testing</title><link>https://pi4j.com/architecture/about-the-code/hardware-testing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/architecture/about-the-code/hardware-testing/</guid><description>&lt;div class="notices warning" &gt;&lt;p&gt;This is an experimental project which will need a lot of love&amp;hellip; The new Raspberry
Pi Pico with a lot of GPIOs for a very low price, seems even to be a better fit for this project compared to the
Arduino Due&amp;hellip; To be further investigated!&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;To minimize the required time and efforts to test a new release, V2+ aims to include an automated test which performs
I/O testing on each I/O interface on each model of RPi. Ideally this would happen as part of the unit testing sequence
for each code commit or at least as part of the release cycle.&lt;/p&gt;</description></item><item><title>Java for ARMv6/7/8</title><link>https://pi4j.com/documentation/java-for-arm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/documentation/java-for-arm/</guid><description>&lt;p&gt;You can choose from a long list of Java versions and distributions if you use the 64-bit version of the Raspberry Pi Operating System. But this 64-bit OS is only available for Raspberry Pi board versions with an &lt;strong&gt;ARMv7 or ARMv8&lt;/strong&gt; processor.&lt;/p&gt;
&lt;h2 id="board-versions"&gt;Board versions&lt;/h2&gt;
&lt;h3 id="with-armv6-processor"&gt;With ARMv6 processor&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Raspberry Pi 1 A and A+&lt;/li&gt;
&lt;li&gt;Raspberry Pi 1 B and B+&lt;/li&gt;
&lt;li&gt;Zero 1.2, 1.3 and W&lt;/li&gt;
&lt;li&gt;Compute Module 1&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="with-armv7-or-armv8-processor"&gt;With ARMv7 or ARMv8 processor&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Model A+, version 3&lt;/li&gt;
&lt;li&gt;Model B, version 2, 3, 4 and 5&lt;/li&gt;
&lt;li&gt;Zero 2 and 2W&lt;/li&gt;
&lt;li&gt;Compute Module, version 3, 4, and 5&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="how-to-check-and-install-java"&gt;How to Check and Install Java&lt;/h2&gt;
&lt;h3 id="check-the-current-version"&gt;Check the Current Version&lt;/h3&gt;
&lt;p&gt;You can check the installed Java version in the terminal. On a board with ARMv7 or ARMv8, with a correctly installed JDK, you will get this result:&lt;/p&gt;</description></item><item><title>License (Open Source)</title><link>https://pi4j.com/about/license/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/about/license/</guid><description>&lt;p&gt;The Pi4J Version 2.0 project is distributed and licensed under the &lt;strong&gt;Apache License, Version 2.0&lt;/strong&gt; license
(&lt;em&gt;A business-friendly OSS license&lt;/em&gt;).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="noopener"&gt;apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Pi4J/pi4j/blob/master/LICENSE.txt" target="_blank" rel="noopener"&gt;github.com/Pi4J/pi4j/blob/master/LICENSE.txt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div style="max-width: 650px; margin-left: auto; margin-right: auto;" &gt;
&lt;pre&gt;
 Apache License
 Version 2.0, January 2004
 http://www.apache.org/licenses/
&lt;p&gt;TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Definitions.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;License&amp;rdquo; shall mean the terms and conditions for use, reproduction,
and distribution as defined by Sections 1 through 9 of this document.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Licensor&amp;rdquo; shall mean the copyright owner or entity authorized by
the copyright owner that is granting the License.&lt;/p&gt;</description></item><item><title>Minimal example application</title><link>https://pi4j.com/getting-started/minimal-example-application/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/getting-started/minimal-example-application/</guid><description>&lt;div class="notices tip" &gt;&lt;p&gt;GITHUB PROJECT: &lt;a href="https://github.com/Pi4J/pi4j-example-minimal" target="_blank" rel="noopener"&gt;https://github.com/Pi4J/pi4j-example-minimal&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;In the &lt;a href="https://github.com/Pi4J/pi4j-example-minimal" target="_blank" rel="noopener"&gt;&amp;ldquo;pi4j-example-minimal&amp;rdquo; GitHub project&lt;/a&gt; you can
find a project which contains the minimal code to control a digital input and output with Pi4J. The project is further
described on this page. The application will toggle an LED on/off and each time you press the button, the toggling
speed increases. When you have pushed the button 5 times, the application stops.&lt;/p&gt;

 &lt;div
 style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;"&gt;
 &lt;iframe
 src="https://player.vimeo.com/video/525570174?dnt=0"
 style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allow="fullscreen"&gt;
 &lt;/iframe&gt;
 &lt;/div&gt;

&lt;h2 id="wiring"&gt;Wiring&lt;/h2&gt;
&lt;p&gt;This minimal example application uses this wiring:&lt;/p&gt;</description></item><item><title>Minimal example as FAT JAR</title><link>https://pi4j.com/getting-started/minimal-example-application-fatjar/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/getting-started/minimal-example-application-fatjar/</guid><description>&lt;div class="notices tip" &gt;&lt;p&gt;GITHUB PROJECT: &lt;a href="https://github.com/Pi4J/pi4j-example-fatjar" target="_blank" rel="noopener"&gt;https://github.com/Pi4J/pi4j-example-fatjar&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;a href="https://pi4j.com/getting-started/minimal-example-application/"&gt;&amp;ldquo;Minimal example application&amp;rdquo;&lt;/a&gt; uses one LED and button to demonstrate
the basic use of Pi4J. When building that project with Maven, all the required Java modules are copied to the
&lt;code&gt;target/distribution&lt;/code&gt; directory. But a lot of developers like to produce a single, executable JAR that contains
all dependencies, also known as a &amp;ldquo;FAT JAR&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;The repository &lt;a href="https://github.com/Pi4J/pi4j-example-fatjar" target="_blank" rel="noopener"&gt;&amp;ldquo;pi4j-example-fatjar&amp;rdquo; GitHub project&lt;/a&gt; contains a Maven project
with identical wiring, dependencies and build command to the &amp;ldquo;Minimal example application&amp;rdquo;, but results in such a FAT JAR
instead of separate Java modules.&lt;/p&gt;</description></item><item><title>Serial Kotlin DSL</title><link>https://pi4j.com/kotlin/kotlin-dsl/serial/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/kotlin/kotlin-dsl/serial/</guid><description>&lt;div class="notices tip" &gt;&lt;p&gt;Feel free to checkout the &lt;a href="https://pi4j.com/documentation/io-examples/serial/"&gt;Pi4J docs on Serial&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id="installation"&gt;Installation&lt;/h2&gt;
&lt;p&gt;Add PiGPIO dependency&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-kotlin" data-lang="kotlin"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;dependencies {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; implementation(&lt;span style="color:#e6db74"&gt;&amp;#34;com.pi4j:pi4j-plugin-pigpio:2.3.0&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="serial-dsl"&gt;Serial DSL&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-kotlin" data-lang="kotlin"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;serial(&lt;span style="color:#e6db74"&gt;&amp;#34;/dev/ttyS0&amp;#34;&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; use_9600_N81()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; dataBits_8()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; parity(&lt;span style="color:#a6e22e"&gt;Parity&lt;/span&gt;.NONE)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; stopBits(&lt;span style="color:#a6e22e"&gt;StopBits&lt;/span&gt;._1)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; flowControl(&lt;span style="color:#a6e22e"&gt;FlowControl&lt;/span&gt;.NONE)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; piGpioSerialProvider()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}.&lt;span style="color:#66d9ef"&gt;open&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// use here. 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="minimal-serial-example"&gt;Minimal Serial Example&lt;/h2&gt;

&lt;div class="notices info" &gt;&lt;p&gt;This is the Kotlin DSL version of the same &lt;a href="https://pi4j.com/documentation/io-examples/serial#code-example"&gt;Serial example here&lt;/a&gt;, but leveraging the Kotlin DSL&lt;/p&gt;
&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-kotlin" data-lang="kotlin"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;serial(&lt;span style="color:#e6db74"&gt;&amp;#34;/dev/ttyS0&amp;#34;&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// ..
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;}.&lt;span style="color:#66d9ef"&gt;open&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; console {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; +&lt;span style="color:#e6db74"&gt;&amp;#34;Waiting till serial port is open&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; (&lt;span style="color:#f92672"&gt;!is&lt;/span&gt;Open) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(&lt;span style="color:#e6db74"&gt;&amp;#34;.&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; sleep(&lt;span style="color:#ae81ff"&gt;250&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; println()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; +&lt;span style="color:#e6db74"&gt;&amp;#34;Serial port is open&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; startDaemon {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; inputStream.bufferedReader().use {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (available() &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;) sleep(&lt;span style="color:#ae81ff"&gt;10&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt; buildString {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt; until available()).forEach { _ &lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; readByte().let { b &lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// All non-string bytes are handled as line breaks
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (b &amp;lt; &lt;span style="color:#ae81ff"&gt;32&lt;/span&gt;) &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;@forEach&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt; append(b.toInt().toChar())
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }.also { +&lt;span style="color:#e6db74"&gt;&amp;#34;Data: &amp;#39;&lt;/span&gt;&lt;span style="color:#e6db74"&gt;$it&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&amp;#34;&lt;/span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; (isOpen) sleep(&lt;span style="color:#ae81ff"&gt;500&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And &lt;code&gt;startDaemon&lt;/code&gt; is defined as:&lt;/p&gt;</description></item><item><title>Spring Boot Alarm System</title><link>https://pi4j.com/featured-projects/spring-boot-alarm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/featured-projects/spring-boot-alarm/</guid><description>&lt;div class="notices tip" &gt;&lt;p&gt;GITHUB PROJECT: &lt;a href="https://github.com/bmike2047/springboot-rpi-alarm-system" target="_blank" rel="noopener"&gt;github.com/bmike2047/springboot-rpi-alarm-system&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;This project by &lt;strong&gt;Mihai Buleandra&lt;/strong&gt;, uses Spring Boot to create a simple wired alarm system. Most examples on this website use Maven, but this project is a nice example of how to configure a Gradle project to use Pi4J. Mihai also uses Thymeleaf and Bootstrap for the web user interface, that has live updates showing the state of the alarm system.&lt;/p&gt;
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;"&gt;
 &lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share; fullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/xRUWgISEngM?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"&gt;&lt;/iframe&gt;
 &lt;/div&gt;

&lt;p&gt;The alarm system makes use of Java&amp;rsquo;s multithreading capabilities, as it&amp;rsquo;s based on a non-blocking Finite State Machine. This means each state runs in its own thread allowing the web interface to not block while waiting for different operations. Multi-threaded reusable Java drivers for the Raspberry Pi are implemented using the Pi4J library for the keypad, Passive Infrared sensor (PIR), LED and Buzzer.
Keypad driver includes debounce implementation also.&lt;/p&gt;</description></item><item><title>SmartCoop</title><link>https://pi4j.com/featured-projects/smartcoop/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/featured-projects/smartcoop/</guid><description>&lt;div class="notices tip" &gt;&lt;p&gt;PROJECT WEBSITE: &lt;a href="https://www.smartcoop.tech" target="_blank" rel="noopener"&gt;smartcoop.tech&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Dave Duncanson&lt;/strong&gt;, an ex Royal Australian Airforce (RAAF) electronics technician and embedded software developer, created the &lt;strong&gt;SmartCoop&lt;/strong&gt;. It&amp;rsquo;s a fully automated Chicken Coop Controller solution which uses a Raspberry Pi and a ESP32-S3 Processor located on a custom designed Surface Mount Designed (SMD) PCB. The goal of this project was to significantly reduce the amount of regular and routine tasks required to keep a small flock (~30) of chickens on a hobby farm located in NSW just outside of Canberra Australia.&lt;/p&gt;</description></item><item><title>Binary Clock</title><link>https://pi4j.com/featured-projects/binary-clock/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/featured-projects/binary-clock/</guid><description>&lt;div class="notices tip" &gt;&lt;p&gt;GITHUB PROJECT: &lt;a href="https://github.com/taartspi/pi4j-binary-clock" target="_blank" rel="noopener"&gt;github.com/taartspi/pi4j-binary-clock&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;This project by &lt;strong&gt;Tom Aarts&lt;/strong&gt; (published on May 15, 2024), is a binary clock created with LEDs on a breadboard. In the video below you see it incrementing to the next minute and hour. What you see is the Hour Minute and Second displayed in BCD (Binary Coded Decimal):&lt;/p&gt;
&lt;video controls width="800"&gt;
 &lt;source src="https://pi4j.com/assets/featured-projects/binaryclock/binaryclock.mp4" /&gt;
&lt;/video&gt;
&lt;p&gt;Design document describing the LED PCF8575 connections, and the Java implementation that drives the clock LEDs.
Note: there are two PCF8575 IC used in this design. This IC is used as it can provide the current flow to
directly control the LED. Alternative IC like the MCP23017 with less current capability would require a NPN
transistor in the circuit.&lt;/p&gt;</description></item><item><title>Soft real time PLC</title><link>https://pi4j.com/featured-projects/soft-real-time-plc-written-in-strolch/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/featured-projects/soft-real-time-plc-written-in-strolch/</guid><description>&lt;p&gt;Strolch is a framework for developing Software which has a different approach compared to Spring and other similar types of
Java frameworks, as the model is defined as an abstract model, where you always have the same three types of objects:
Resources, Orders and Activities. The fields are mapped as Parameter objects, of which the important primitives are available.&lt;/p&gt;
&lt;p&gt;


&lt;div class="gallery caption-position-bottom caption-effect-slide hover-effect-zoom hover-transition" itemscope itemtype="http://schema.org/ImageGallery"&gt;
	 

&lt;link rel="stylesheet" href="https://pi4j.com/css/hugo-easy-gallery.css" /&gt;
&lt;div class="box fancy-figure caption-position-center caption-effect-fade" &gt;
 &lt;figure itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject"&gt;
 &lt;div class="img" style="background-image: url('/assets/featured-projects/strolch/IMG_20200430_153450.jpg');"&gt;
 &lt;img itemprop="thumbnail" src="https://pi4j.com/assets/featured-projects/strolch/IMG_20200430_153450.jpg" alt="Conveyors for containers filled by a dispensing robot"/&gt;
 &lt;/div&gt;
 &lt;a href="https://pi4j.com/assets/featured-projects/strolch/IMG_20200430_153450.jpg" itemprop="contentUrl"&gt;&lt;/a&gt;
 &lt;figcaption&gt;
 &lt;p&gt;Conveyors for containers filled by a dispensing robot&lt;/p&gt;</description></item><item><title>Logging with SLF4J</title><link>https://pi4j.com/documentation/logging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/documentation/logging/</guid><description>&lt;p&gt;Pi4J uses SLF4J for logging. To include it in your project, add this Maven dependency:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-xml" data-lang="xml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.slf4j&lt;span style="color:#f92672"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;slf4j-simple&lt;span style="color:#f92672"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;2.0.0-alpha0&lt;span style="color:#f92672"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There are different ways to configure the logging output, as described on &lt;a href="http://www.slf4j.org/manual.html" target="_blank" rel="noopener"&gt;the SLF4J website&lt;/a&gt;, but the shortest is probably with this property in your main-method:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;static&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;(String&lt;span style="color:#f92672"&gt;[]&lt;/span&gt; args) &lt;span style="color:#66d9ef"&gt;throws&lt;/span&gt; Exception {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Configure default logging level, accept a log level as the first program argument&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; System.&lt;span style="color:#a6e22e"&gt;setProperty&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;org.slf4j.simpleLogger.defaultLogLevel&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;INFO&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Your code comes here&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>PiJukeBox</title><link>https://pi4j.com/featured-projects/pijukebox-by-daniel-martensson/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/featured-projects/pijukebox-by-daniel-martensson/</guid><description>&lt;p&gt;&lt;img src="https://pi4j.com/assets/featured-projects/pijukebox/Radio.jpg?width=250px" alt=""&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Daniel Mårtensson&lt;/strong&gt; used Java and Pi4J to turn an old Centrum U68 from 1940 into a MP3 player. The reason is because short wave,
middle wave and long wave is today obsolete and not being used or sended today in Sweden. Also the electronics
inside was a mess and very dangerous because it runs on both AC/DC current and all the wires began to lose their isolators.&lt;/p&gt;
&lt;p&gt;Features: autoplaying next song, 60 songs included, volume tuning, song select, low power consumption, works with
old Raspberry Pi&amp;rsquo;s, terminal based.&lt;/p&gt;</description></item><item><title>The Team</title><link>https://pi4j.com/about/team/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/about/team/</guid><description>&lt;p&gt;Pi4J is a real community project! On this page you find the main contributors, in the order they joined the project. But there are many more, as you can see &lt;a href="https://github.com/Pi4J/pi4j/graphs/contributors" target="_blank" rel="noopener"&gt;in the list with Pi4J library contributors&lt;/a&gt;, and in the many other &lt;a href="https://github.com/orgs/Pi4J/repositories" target="_blank" rel="noopener"&gt;Pi4J repositories with example implementations&lt;/a&gt;.&lt;/p&gt;
&lt;h3 style="clear: both;"&gt;&lt;a href="https://twitter.com/savageautomate" target="_blank"&gt;Robert Savage&lt;/a&gt;&lt;/h3&gt;
&lt;img src="https://pi4j.com/assets/about/team/robert-savage.png" style="float: left; margin: 0 15px 10px 0; max-width: 125px; max-height: 150px;"&gt;
&lt;p&gt;&lt;strong&gt;Project Founder, Architect, (&amp;ldquo;Retired&amp;rdquo;) Lead Developer&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Principal Software Architect/Engineer. Consultant, technology enthusiast, entrepreneur, open source contributor, technology &lt;a href="http://www.savagehomeautomation.com/" target="_blank" rel="noopener"&gt;blogger&lt;/a&gt;. Founder at shadeBlue, LLC and SavageSoftware, LLC. Robert has a more than 20 year career working in the professional audio visual and home/commercial automation industry and an extensive background in developing technology solutions with a special focus on home automation and hardware/firmware/software integration. In 2012, Robert created the Pi4J project which provides Java developers an easy to use Java library enabling access to low-level I/O functionality (GPIO, I2C, SPI, Serial, etc.) of embedded systems like the Raspberry Pi. I created Pi4J to empower Java programmers to get involved with embedded platforms such as the Raspberry Pi and provide an easy to use and accessible Java-centric object-oriented library enabling control of real world (physical) &amp;ldquo;things&amp;rdquo;. Pi4J V2 brings an entirely new and modern approach to Java I/O programming for embedded systems. I&amp;rsquo;m excited to get V2 released and see what additional creative projects emerge.&lt;/p&gt;</description></item><item><title>CocktailPi</title><link>https://pi4j.com/featured-projects/cocktail-maker-by-alex9849/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/featured-projects/cocktail-maker-by-alex9849/</guid><description>&lt;p&gt;The CocktailPi is a cocktail mixing machine by &lt;strong&gt;Alexander Liggesmeyer&lt;/strong&gt;. It can
control as many pumps as the RaspberryPi provides GPIO pins. For every pump that gets added to the system, the user has
to provide the amount of time that that pump needs to pump one centiliter in milliseconds. The machine uses peristaltic
pumps. So that number is perfectly accurate. The flow rate won&amp;rsquo;t vary over time. It uses a relay board for closing the
electronic circuit for all pumps. This allows to power the pumps with more than 5V. The relay board is connected to the
Pi which controls the board with Pi4J V1. The backend-application is written in Java (Spring boot). The frontend is
written with VueJS.&lt;/p&gt;</description></item><item><title>Creating a Pi4J Context</title><link>https://pi4j.com/documentation/create-context/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/documentation/create-context/</guid><description>&lt;p&gt;The context is an immutable runtime object that holds the configured state and manages the lifecycle of a Pi4J instance.
It includes all loaded plugins, providers, platforms, I/O instance registry, environmental configuration and runtime
objects including executor thread pools, I/O event listeners, etc.&lt;/p&gt;
&lt;p&gt;Terminating/destroying the context stops and releases all resources, threads, listeners, and provisioned I/O instances
held by the context.&lt;/p&gt;
&lt;p&gt;Version 1 was implemented using a static singleton, while &lt;strong&gt;version 2 uses a &amp;ldquo;Context&amp;rdquo; to avoid static singletons&lt;/strong&gt;.&lt;/p&gt;</description></item><item><title>Didier the street artist robot</title><link>https://pi4j.com/featured-projects/street-artist-robot/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/featured-projects/street-artist-robot/</guid><description>&lt;p&gt;Meet &lt;a href="https://duvam.net/didier/" target="_blank" rel="noopener"&gt;&amp;ldquo;Didier&amp;rdquo;&lt;/a&gt; the street artist robot, a project by &lt;a href="https://duvam.net/contact/" target="_blank" rel="noopener"&gt;&lt;strong&gt;Duvam&lt;/strong&gt;&lt;/a&gt;.
The sources are shared on &lt;a href="https://github.com/duvamduvam/didier-java" target="_blank" rel="noopener"&gt;github.com/duvamduvam/didier-java&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;


&lt;div class="gallery caption-position-bottom caption-effect-slide hover-effect-zoom hover-transition" itemscope itemtype="http://schema.org/ImageGallery"&gt;
	 

&lt;link rel="stylesheet" href="https://pi4j.com/css/hugo-easy-gallery.css" /&gt;
&lt;div class="box fancy-figure caption-position-center caption-effect-fade" &gt;
 &lt;figure itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject"&gt;
 &lt;div class="img" style="background-image: url('/assets/featured-projects/didier/IMG_20210831_125559-small.jpg');"&gt;
 &lt;img itemprop="thumbnail" src="https://pi4j.com/assets/featured-projects/didier/IMG_20210831_125559-small.jpg" /&gt;
 &lt;/div&gt;
 &lt;a href="https://pi4j.com/assets/featured-projects/didier/IMG_20210831_125559-small.jpg" itemprop="contentUrl"&gt;&lt;/a&gt;
 &lt;/figure&gt;
&lt;/div&gt;



&lt;div class="box fancy-figure caption-position-center caption-effect-fade" &gt;
 &lt;figure itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject"&gt;
 &lt;div class="img" style="background-image: url('/assets/featured-projects/didier/IMG_20210831_125615-small.jpg');"&gt;
 &lt;img itemprop="thumbnail" src="https://pi4j.com/assets/featured-projects/didier/IMG_20210831_125615-small.jpg" /&gt;
 &lt;/div&gt;
 &lt;a href="https://pi4j.com/assets/featured-projects/didier/IMG_20210831_125615-small.jpg" itemprop="contentUrl"&gt;&lt;/a&gt;
 &lt;/figure&gt;
&lt;/div&gt;



&lt;div class="box fancy-figure caption-position-center caption-effect-fade" &gt;
 &lt;figure itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject"&gt;
 &lt;div class="img" style="background-image: url('/assets/featured-projects/didier/IMG_20210920_083431-small.jpg');"&gt;
 &lt;img itemprop="thumbnail" src="https://pi4j.com/assets/featured-projects/didier/IMG_20210920_083431-small.jpg" /&gt;
 &lt;/div&gt;
 &lt;a href="https://pi4j.com/assets/featured-projects/didier/IMG_20210920_083431-small.jpg" itemprop="contentUrl"&gt;&lt;/a&gt;
 &lt;/figure&gt;
&lt;/div&gt;


&lt;/div&gt;





 


&lt;script src="https://pi4j.com/js/load-photoswipe.js"&gt;&lt;/script&gt;


&lt;link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.1/photoswipe.min.css" integrity="sha256-sCl5PUOGMLfFYctzDW3MtRib0ctyUvI9Qsmq2wXOeBY=" crossorigin="anonymous" /&gt;
&lt;link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.1/default-skin/default-skin.min.css" integrity="sha256-BFeI1V+Vh1Rk37wswuOYn5lsTcaU96hGaI7OUVCLjPc=" crossorigin="anonymous" /&gt;
&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.1/photoswipe.min.js" integrity="sha256-UplRCs9v4KXVJvVY+p+RSo5Q4ilAUXh7kpjyIP5odyc=" crossorigin="anonymous"&gt;&lt;/script&gt;
&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.1/photoswipe-ui-default.min.js" integrity="sha256-PWHOlUzc96pMc8ThwRIXPn8yH4NOLu42RQ0b9SpnpFk=" crossorigin="anonymous"&gt;&lt;/script&gt;


&lt;div class="pswp" tabindex="-1" role="dialog" aria-hidden="true"&gt;

&lt;div class="pswp__bg"&gt;&lt;/div&gt;

&lt;div class="pswp__scroll-wrap"&gt;
 
 &lt;div class="pswp__container"&gt;
 &lt;div class="pswp__item"&gt;&lt;/div&gt;
 &lt;div class="pswp__item"&gt;&lt;/div&gt;
 &lt;div class="pswp__item"&gt;&lt;/div&gt;
 &lt;/div&gt;
 
 &lt;div class="pswp__ui pswp__ui--hidden"&gt;
 &lt;div class="pswp__top-bar"&gt;
 
 &lt;div class="pswp__counter"&gt;&lt;/div&gt;
 &lt;button class="pswp__button pswp__button--close" title="Close (Esc)"&gt;&lt;/button&gt;
 &lt;button class="pswp__button pswp__button--share" title="Share"&gt;&lt;/button&gt;
 &lt;button class="pswp__button pswp__button--fs" title="Toggle fullscreen"&gt;&lt;/button&gt;
 &lt;button class="pswp__button pswp__button--zoom" title="Zoom in/out"&gt;&lt;/button&gt;
 
 
 &lt;div class="pswp__preloader"&gt;
 &lt;div class="pswp__preloader__icn"&gt;
 &lt;div class="pswp__preloader__cut"&gt;
 &lt;div class="pswp__preloader__donut"&gt;&lt;/div&gt;
 &lt;/div&gt;
 &lt;/div&gt;
 &lt;/div&gt;
 &lt;/div&gt;
 &lt;div class="pswp__share-modal pswp__share-modal--hidden pswp__single-tap"&gt;
 &lt;div class="pswp__share-tooltip"&gt;&lt;/div&gt;
 &lt;/div&gt;
 &lt;button class="pswp__button pswp__button--arrow--left" title="Previous (arrow left)"&gt;
 &lt;/button&gt;
 &lt;button class="pswp__button pswp__button--arrow--right" title="Next (arrow right)"&gt;
 &lt;/button&gt;
 &lt;div class="pswp__caption"&gt;
 &lt;div class="pswp__caption__center"&gt;&lt;/div&gt;
 &lt;/div&gt;
 &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;</description></item><item><title>User interface with JavaFX</title><link>https://pi4j.com/getting-started/user-interface-with-javafx/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/getting-started/user-interface-with-javafx/</guid><description>&lt;div class="notices tip" &gt;&lt;p&gt;GITHUB PROJECT: &lt;a href="https://github.com/Pi4J/pi4j-example-javafx" target="_blank" rel="noopener"&gt;https://github.com/Pi4J/pi4j-example-javafx&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;JavaFX is a framework to create user interfaces for desktop (Windows, Mac, Linux) and mobile phones. JavaFX is
an opensource project which is documented on &lt;a href="https://openjfx.io/" target="_blank" rel="noopener"&gt;openjfx.io&lt;/a&gt; and the sources are available
in &lt;a href="https://github.com/openjdk/jfx" target="_blank" rel="noopener"&gt;this GitHub project&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The main goal of Java has always been to be able to create applications which are &lt;strong&gt;&amp;ldquo;write once, run everywhere&amp;rdquo;&lt;/strong&gt;.
JavaFX promises the same for Graphical User Interface applications.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://gluonhq.com/" target="_blank" rel="noopener"&gt;Gluon&lt;/a&gt; is the main maintainer of the OpenJFX project and offers commercial support to
companies who want to use JavaFX in critical applications. They also provide &lt;a href="https://gluonhq.com/products/" target="_blank" rel="noopener"&gt;tools to build and compile Java
code to native applications for all platforms&lt;/a&gt;.&lt;/p&gt;</description></item><item><title>JMonkeyEngine with Joystick</title><link>https://pi4j.com/featured-projects/joystick-game/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/featured-projects/joystick-game/</guid><description>&lt;p&gt;&lt;a href="https://github.com/pavly-gerges" target="_blank" rel="noopener"&gt;&lt;strong&gt;Pavl G.&lt;/strong&gt;&lt;/a&gt; created a Java Gradle library to control a car in a &lt;a href="https://jmonkeyengine.org/" target="_blank" rel="noopener"&gt;JMonkeyEngine&lt;/a&gt; game with an arduino joystick module connected to a Raspberry Pi4 model B, using GPIO digital pins and SPI interfacing through MCP3008 ADC (Analog~Digital Converter).&lt;/p&gt;
&lt;h2 id="requirements"&gt;Requirements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Raspberry Pi with arm processor (pi3, pi4, piZero) with a working java8 (preferred).&lt;/li&gt;
&lt;li&gt;Female-to-male jumper wires.&lt;/li&gt;
&lt;li&gt;Breadboard.&lt;/li&gt;
&lt;li&gt;Arduino Joystick module.&lt;/li&gt;
&lt;li&gt;MCP3008 IC (ADC &amp;ndash; other adcs may work too, but we are covering only MCP3008 here).&lt;/li&gt;
&lt;li&gt;Some patience and time.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="difference-between-analog-and-digital-signals"&gt;Difference between Analog and Digital signals?&lt;/h2&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/60224159/157847529-3b46c3e9-8d39-428c-91a1-f3018cb9f9e3.png" alt="image"&gt;&lt;/p&gt;</description></item><item><title>Sensor drivers</title><link>https://pi4j.com/featured-projects/sensor-drivers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/featured-projects/sensor-drivers/</guid><description>&lt;p&gt;In case you want to read the data from various I2C sensors connected to Raspberry Pi
the difficult part is usually writing a piece of code which talks to the I2C sensor.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/jveverka/rpi-projects/tree/pi4j-v2/rpi-drivers" target="_blank" rel="noopener"&gt;rpi-drivers&lt;/a&gt;
is a Java library by &lt;strong&gt;Juraj Veverka&lt;/strong&gt; implementing simple APIs and communication code for some
widely used I2C sensors. You can easily measure temperature, pressure and humidity,
get ambient light intensity or measure voltage in your java Raspberry Pi projects.&lt;/p&gt;</description></item><item><title>FXGl to Picade</title><link>https://pi4j.com/getting-started/fxgl/fxgl-to-picade/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/getting-started/fxgl/fxgl-to-picade/</guid><description>&lt;div class="notices tip" &gt;&lt;p&gt;GITHUB PROJECT: &lt;a href="https://github.com/Pi4J/pi4j-example-fxgl" target="_blank" rel="noopener"&gt;https://github.com/Pi4J/pi4j-example-fxgl&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;In this section we demonstrate how to convert existing FXGL projects to work on a RaspberryPi&lt;/p&gt;
&lt;p&gt;If you don&amp;rsquo;t have an existing FXGL project, go grab one from &lt;a href="https://github.com/AlmasB/FXGLGames" target="_blank" rel="noopener"&gt;FXGLGames&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="steps-to-get-your-app-running-on-a-raspberrypi"&gt;Steps to get your app running on a RaspberryPi&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Add Maven support to your project
In our project we use &lt;a href="https://maven.apache.org/what-is-maven.html" target="_blank" rel="noopener"&gt;Maven&lt;/a&gt; to manage dependencies and build the application, other build tools such as gradle
are also viable but not covered in this tutorial.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the Project tool window, right-click your project and select Add Framework Support
&lt;img src="https://pi4j.com/assets/getting-started/fxgl/project_tool_window_maven.png?height=300px" alt="project-tool-window"&gt;&lt;/p&gt;</description></item><item><title>JavaFX kiosk mode</title><link>https://pi4j.com/getting-started/fxgl/kiosk-mode/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/getting-started/fxgl/kiosk-mode/</guid><description>&lt;div class="notices tip" &gt;&lt;p&gt;Visit &lt;a href="https://webtechie.be/post/2021-04-23-javafx-kiosk-raspberry-pi/" target="_blank" rel="noopener"&gt;webtechie.be&lt;/a&gt; for the full blogpost&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id="kiosk-mode"&gt;Kiosk Mode&lt;/h2&gt;
&lt;p&gt;With Gluon&amp;rsquo;s JavaFX 17-ea, we are able to run applications in different modes: Desktop and Kiosk mode.
In this post we focus on the Kiosk mode only.&lt;/p&gt;
&lt;p&gt;With this approach, the application is the only thing you see on the screen. This prevents the user to open any other applications, or mess up your system.
In this case, there is no need for a window manager, and the application directly uses the underlying (hardware) framebuffer.
To achieve this, we use &lt;strong&gt;Monocle with EGL and DRM&lt;/strong&gt;, as that is the Linux approach to directly address the hardware acceleration, without a window manager.
The JavaFX application is using Direct Rendering Mode (DRM) to be visualized. An extra benefit is the performance boost, as your program is the only thing that needs to be handled towards the screen.&lt;/p&gt;</description></item><item><title>JavaFX GUI and MVC template</title><link>https://pi4j.com/getting-started/javafx-mvc-template/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/getting-started/javafx-mvc-template/</guid><description>&lt;div class="notices tip" &gt;&lt;p&gt;GITHUB PROJECT: &lt;a href="https://github.com/Pi4J/pi4j-template-javafx" target="_blank" rel="noopener"&gt;https://github.com/Pi4J/pi4j-template-javafx&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;a href="https://www.fhnw.ch" target="_blank" rel="noopener"&gt;FHNW University&lt;/a&gt; created a template project which is now part of the Pi4J example repositories.&lt;/p&gt;
&lt;p&gt;The goal of this project is to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Provide a clear step-by-step how to prepare your Raspberry Pi&lt;/li&gt;
&lt;li&gt;Provide multiple test and start applications&lt;/li&gt;
&lt;li&gt;Explain the use of a MVC-model (Model-View-Controller) to clearly split data, actions and user interface&lt;/li&gt;
&lt;li&gt;Explain the use of JUnit test&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="sources-and-info"&gt;Sources and Info&lt;/h2&gt;
&lt;p&gt;Please check the README of the sources of the project for a full description of the setup process of the Raspberry Pi
and to fully understand the example applications and the MVC-model. This page is only intended to give you a quick overview.&lt;/p&gt;</description></item><item><title>GpioD Provider</title><link>https://pi4j.com/documentation/providers/gpiod/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/documentation/providers/gpiod/</guid><description>&lt;p&gt;The GpioD plugin provider was added in Pi4J 2.5.0 to be able to support the Raspberry Pi 5 with the new &lt;a href="https://www.raspberrypi.com/documentation/microcontrollers/rp1.html" target="_blank" rel="noopener"&gt;GPIO chip RP1&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Providers in the GpioD plugin:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;gpiod-digital-input&lt;/li&gt;
&lt;li&gt;gpiod-digital-output&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="supported-operating-system-versions"&gt;Supported Operating System Versions&lt;/h2&gt;

&lt;div class="notices warning" &gt;&lt;p&gt;The GpioD provider requires minimum kernel Bullseye 6.1.21 and Bookworm 6.6.22 !&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;If you get an error at startup with the following content, your OS is outdated for the GpioD implementation used in Pi4J:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;UNDERLYING EXCEPTION: &lt;span style="color:#f92672"&gt;[&lt;/span&gt;java.lang.UnsatisfiedLinkError&lt;span style="color:#f92672"&gt;]=&lt;/span&gt;/tmp/libgpiod368899536808039438.so: /lib/aarch64-linux-gnu/libc.so.6: version &lt;span style="color:#e6db74"&gt;`&lt;/span&gt;GLIBC_2.33&lt;span style="color:#960050;background-color:#1e0010"&gt;&amp;#39;&lt;/span&gt; not found &lt;span style="color:#f92672"&gt;(&lt;/span&gt;required by /tmp/libgpiod368899536808039438.so&lt;span style="color:#f92672"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="dependencies"&gt;Dependencies&lt;/h2&gt;
&lt;p&gt;To use the GpioD provider include the following dependencies:&lt;/p&gt;</description></item><item><title>LinuxFS Provider</title><link>https://pi4j.com/documentation/providers/linuxfs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/documentation/providers/linuxfs/</guid><description>&lt;p&gt;The current implementation of the LinuxFS plugin implements a file based I2C, SPI, and PWM provider. The file based I2C provider opens
&lt;code&gt;/dev/i2c-1&lt;/code&gt; using a &lt;code&gt;RandomAccessFile&lt;/code&gt; to perform I2C reads and writes. The file based PWM provider opens
&lt;code&gt;/sys/class/pwm/pwmchip?&lt;/code&gt; using a &lt;code&gt;RandomAccessFile&lt;/code&gt; to perform PWM operations.&lt;/p&gt;

&lt;div class="notices warning" &gt;&lt;p&gt;The Linuxfs provider linuxfs-pwm requires minimum kernel Bullseye 6.1.21 and Bookworm 6.6.22 !&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Providers in the LinuxFS plugin:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;linuxfs-i2c&lt;/li&gt;
&lt;li&gt;linuxfx-spi&lt;/li&gt;
&lt;li&gt;linuxfs-pwm &amp;ndash;&amp;gt; check below for important info about the channel configuration!&lt;/li&gt;
&lt;li&gt;Under construction
&lt;ul&gt;
&lt;li&gt;linuxfs-digital-input&lt;/li&gt;
&lt;li&gt;linuxfs-digital-output&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To use the LinuxFS provider include the following dependencies:&lt;/p&gt;</description></item><item><title>PiGpio Provider</title><link>https://pi4j.com/documentation/providers/pigpio/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/documentation/providers/pigpio/</guid><description>&lt;p&gt;The current implementation of the PiGpio exposes the GPIO functions available on the Raspberry Pi (see Note Pi5 below).
This implementation is developed/supported by a team separate of Pi4j. Pi4j is a consumer of that PiGpio work.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Pi5 At the present time the PiGpio implementation does not support the new Pi5 board. 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;- This new Pi5 RP1 chip will require a large development effort. There is no known plan &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; this develoment. 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Providers in the PiGpio plugin:&lt;/p&gt;</description></item><item><title>Using Board Info</title><link>https://pi4j.com/documentation/board-info/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/documentation/board-info/</guid><description>&lt;div class="notices tip" &gt;&lt;p&gt;GITHUB Sources of BoardInfoHelper.java and the data model: &lt;a href="https://github.com/Pi4J/pi4j/blob/develop/pi4j-core/src/main/java/com/pi4j/boardinfo/util/BoardInfoHelper.java" target="_blank" rel="noopener"&gt;pi4j/pi4j-core/src/main/java/com/pi4j/boardinfo/util/BoardInfoHelper.java&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Since V2.6.0, the new class &lt;code&gt;BoardInfoHelper&lt;/code&gt; provides the following info:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Type of Raspberry Pi board as a &lt;code&gt;BoardInfo&lt;/code&gt; object.&lt;/li&gt;
&lt;li&gt;If the system uses a RP1 chip with &lt;code&gt;usesRP1()&lt;/code&gt; (Raspberry Pi 5 only at this moment).&lt;/li&gt;
&lt;li&gt;If the system is 32-bit or 64-bit with &lt;code&gt;is32bit()&lt;/code&gt; and &lt;code&gt;is64bit()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The amount of memory available and used by the JVM as a &lt;code&gt;JvmMemory&lt;/code&gt; object.&lt;/li&gt;
&lt;li&gt;Info about volt, temperature, etc. as a &lt;code&gt;BoardReading&lt;/code&gt; object.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The board info is used in some of the plugins to set the correct priority, based on the use of a Raspberry Pi 5 (&lt;a href="https://www.raspberrypi.com/documentation/microcontrollers/rp1.html" target="_blank" rel="noopener"&gt;with RP1&lt;/a&gt;) versus earlier board (without RP1).&lt;/p&gt;</description></item><item><title>Building an I/O Instance</title><link>https://pi4j.com/documentation/build-io/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/documentation/build-io/</guid><description>&lt;p&gt;A GPIO can be configured with Pi4J in different ways, either short for default behavior, a bit longer with additional settings, or with a full custom configuration using a building pattern.&lt;/p&gt;
&lt;h2 id="io-initialization-examples"&gt;I/O Initialization Examples&lt;/h2&gt;
&lt;p&gt;Before we can initialize an I/0, the Pi4J context must be initialized. The &lt;code&gt;Pi4J&lt;/code&gt; static class includes a few helper context creators for the most common use cases. The &lt;code&gt;newAutoContext()&lt;/code&gt; method will automatically load all available Pi4J extensions found in the application&amp;rsquo;s classpath which may include &lt;code&gt;Platforms&lt;/code&gt; and &lt;code&gt;I/O Providers&lt;/code&gt;.&lt;/p&gt;</description></item><item><title>Learn more...</title><link>https://pi4j.com/getting-started/learn-more/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/getting-started/learn-more/</guid><description>&lt;p&gt;Pi4J is used in a lot of projects, and you can find a lot of examples online. On this page we want to keep an
up-to-date list. Do you want to add something? Please hit &amp;ldquo;Edit this page&amp;rdquo; on the top and
create a pull request!&lt;/p&gt;
&lt;h2 id="twitter"&gt;Twitter&lt;/h2&gt;
&lt;p&gt;Please share your personal or professional projects where you combine Java and the Raspberry Pi
&lt;a href="https://twitter.com/search?q=javaonraspberrypi&amp;amp;src=typed_query&amp;amp;f=live" target="_blank" rel="noopener"&gt;on Twitter with the hashtag #JavaOnRaspberryPi&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="online-articles"&gt;Online Articles&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Foojay.io is a place for friends of OpenJDK, providing articles, updated analyses, selected highlights, and
categorized lists on all things Java.
&lt;a href="https://foojay.io/today/category/java/embedded/raspberry-pi/" target="_blank" rel="noopener"&gt;There is also a category of posts dedicated to Java on the Raspberry Pi.&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="books"&gt;Books&lt;/h2&gt;
&lt;h3 id="getting-started-with-java-on-the-raspberry-pi"&gt;Getting Started with Java on the Raspberry Pi&lt;/h3&gt;
&lt;p&gt;This book by &lt;a href="https://twitter.com/frankdelporte" target="_blank" rel="noopener"&gt;Frank Delporte&lt;/a&gt; includes a lot of info and history about Java itself
and how to install it on the Raspberry Pi. Also, a lot of tips and tricks to become or be a better developer.
And above all many simple examples on these and even more other topics:&lt;/p&gt;</description></item><item><title>Prototype Board</title><link>https://pi4j.com/examples/communityimplementation/prototype-board/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/examples/communityimplementation/prototype-board/</guid><description>&lt;h2 id="a-versatile-prototype-board"&gt;A Versatile Prototype Board&lt;/h2&gt;
&lt;p&gt;Experimenting with various ICs &amp;lsquo;chips&amp;rsquo; may require different methods to connect
the chip to the Pi. As shown in the &lt;a href="https://pi4j.com/examples/communityimplementation/bmp280/"&gt;BMP280 usage&lt;/a&gt;
a chip maybe available mounted on a small circuit board where connection to the Pi
requires only jumpers. But even this simple means has limits as connecting several
chips when using a Pi case and maybe a cooling fan creates problems. In addition
some chips are only available as a socket device where a 4-28 pin socket is
required. This next section demonstrates &amp;lsquo;a&amp;rsquo; way these limits can be overcome.&lt;/p&gt;</description></item><item><title>BMP280 Sensor</title><link>https://pi4j.com/examples/communityimplementation/bmp280/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/examples/communityimplementation/bmp280/</guid><description>&lt;h3 id="description"&gt;Description&lt;/h3&gt;
&lt;p&gt;The BMP280 is a Pressure and temperature sensor accessed via I2C or SPI. The BMP280
is a simple device that requires the connection of few wires to operate.
Because of this simplicity the device can serve as a very easy project for initial Pi and
Pi4j usage. This document will explain the more simple means to connect the sensor and
access the device with existing software requiring no coding. The document will
also explain minimal coding required to allow greater flexibility.&lt;/p&gt;</description></item><item><title>I/O Registry</title><link>https://pi4j.com/documentation/registry/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/documentation/registry/</guid><description>&lt;p&gt;An additional V2+ feature is an I/O registry where all I/O instances that have been created can be maintained, managed, re-accessed, etc. As the library keeps track of all the created I/O instances, they become publicly accessible through a registry where users can interrogate, iterate, identify and access all created I/O instances that Pi4J is managing.&lt;/p&gt;
&lt;p&gt;This is very useful for add-ons/plugins that want to provide runtime information about the state of all I/O, for example a web app illustrating the current state of I/O.&lt;/p&gt;</description></item><item><title>Shutdown (cleanup)</title><link>https://pi4j.com/documentation/shutdown/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/documentation/shutdown/</guid><description>&lt;p&gt;Pi4J has a &lt;code&gt;shutdown&lt;/code&gt; method that can be used for two different purposes.&lt;/p&gt;
&lt;h2 id="end-of-application"&gt;End Of Application&lt;/h2&gt;
&lt;p&gt;At the end of our application, the context needs to be shutdown to release the I/O and clean up the used resources.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;#&lt;/span&gt; Start of program
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; pi4j &lt;span style="color:#f92672"&gt;=&lt;/span&gt; Pi4J.&lt;span style="color:#a6e22e"&gt;newAutoContext&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;#&lt;/span&gt; YOUR CODE GOES HERE
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;#&lt;/span&gt; End of program
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;pi4j.&lt;span style="color:#a6e22e"&gt;shutdown&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="reuse-of-a-gpio"&gt;Reuse of a GPIO&lt;/h2&gt;
&lt;p&gt;When you want to reuse a GPIO, it must be shutdown to clean it up. This can be done by shutting down the GPIO itself and providing the &lt;code&gt;ID&lt;/code&gt; to the &lt;code&gt;shutdown&lt;/code&gt; method. As an example, check &lt;a href="https://github.com/Pi4J/pi4j/blob/develop/pi4j-test/src/test/java/com/pi4j/test/registry/RegistryTest.java#L77" target="_blank" rel="noopener"&gt;this unit test&lt;/a&gt;:&lt;/p&gt;</description></item><item><title>Minimal Example</title><link>https://pi4j.com/examples/jbang/jbang_minimal_example/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/examples/jbang/jbang_minimal_example/</guid><description>&lt;h2 id="minimal-pi4j-with-jbang-example"&gt;Minimal Pi4J with JBang example&lt;/h2&gt;

&lt;div class="notices tip" &gt;&lt;p&gt;GITHUB PROJECT: &lt;a href="https://github.com/Pi4J/pi4j-jbang/blob/main/Pi4JMinimalExample.java" target="_blank" rel="noopener"&gt;github.com/Pi4J/pi4j-jbang &amp;gt; Pi4JMinimalExample.java&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id="intro"&gt;Intro&lt;/h2&gt;

&lt;div class="notices warning" &gt;&lt;p&gt;Before proceeding with this example, make sure that you have a Raspberry Pi prepared to execute Java code with JBang as &lt;a href="https://pi4j.com/examples/jbang/" target="_blank" rel="noopener"&gt;explained here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;The following example is based on the &lt;a href="http://localhost:49905/getting-started/minimal-example-application/" target="_blank" rel="noopener"&gt;&amp;ldquo;Minimal example application&amp;rdquo;&lt;/a&gt;, and uses the same wiring with a button and LED. By using JBang we can run this project with a single file without the need of a full Maven or Gradle project, or compiling the Java code.&lt;/p&gt;</description></item><item><title>8x8 LED Matrix</title><link>https://pi4j.com/examples/jbang/jbang_pi4j_spi_led_matrix/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/examples/jbang/jbang_pi4j_spi_led_matrix/</guid><description>&lt;h2 id="controlling-a-8x8-led-matrix-with-max7219-via-spi"&gt;Controlling a 8x8 LED Matrix with MAX7219 via SPI&lt;/h2&gt;

&lt;div class="notices tip" &gt;&lt;p&gt;GITHUB PROJECT: &lt;a href="https://github.com/Pi4J/pi4j-jbang/blob/main/Pi4JLedMatrixSpi.java" target="_blank" rel="noopener"&gt;github.com/Pi4J/pi4j-jbang &amp;gt; Pi4JLedMatrixSpi.java&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;This example is explained in the following video:&lt;/p&gt;
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;"&gt;
 &lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share; fullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/BXOqXuh50KI?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"&gt;&lt;/iframe&gt;
 &lt;/div&gt;

&lt;h2 id="intro"&gt;Intro&lt;/h2&gt;

&lt;div class="notices warning" &gt;&lt;p&gt;Before proceeding with this example, make sure that you have a Raspberry Pi prepared to execute Java code with JBang as &lt;a href="https://pi4j.com/examples/jbang/" target="_blank" rel="noopener"&gt;explained here&lt;/a&gt;.&lt;/p&gt;</description></item><item><title>BME280 Sensor</title><link>https://pi4j.com/examples/jbang/bme280_temperature_humidity_pressure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/examples/jbang/bme280_temperature_humidity_pressure/</guid><description>&lt;h2 id="bme280-sensor-temp-humidity-pressure-via-pi4j-i2c-and-jbang"&gt;BME280 Sensor (temp, humidity, pressure) via Pi4J, I2C, and JBang&lt;/h2&gt;

&lt;div class="notices tip" &gt;&lt;p&gt;GITHUB PROJECT: &lt;a href="https://github.com/Pi4J/pi4j-jbang/blob/main/Pi4JTempHumPressI2C.java" target="_blank" rel="noopener"&gt;github.com/Pi4J/pi4j-jbang &amp;gt; Pi4JTempHumPressI2C.java&lt;/a&gt; and &lt;a href="https://github.com/Pi4J/pi4j-jbang/blob/main/Pi4JTempHumPressSpi.java" target="_blank" rel="noopener"&gt;github.com/Pi4J/pi4j-jbang &amp;gt; Pi4JTempHumPressSpi.java&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id="intro"&gt;Intro&lt;/h2&gt;
&lt;p&gt;This is an example project to demonstrate how to read the temperature, humidity and pressure from a &lt;a href="https://www.adafruit.com/product/2652" target="_blank" rel="noopener"&gt;BME280 sensor, installed on an Adafruit board&lt;/a&gt; that can be controlled via I2C and SPI. Such a sensor itself is a very tiny component that can be integrated in phones and many other types of devices.&lt;/p&gt;</description></item><item><title>Building with javac</title><link>https://pi4j.com/documentation/building/javac/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/documentation/building/javac/</guid><description>&lt;p&gt;You can build a Pi4J project using only java and javac.&lt;/p&gt;
&lt;h2 id="wiring"&gt;Wiring&lt;/h2&gt;
&lt;p&gt;No wiring is needed for this minimal example as it only demonstrates how to create a minimal application which initializes
Pi4J.&lt;/p&gt;
&lt;h2 id="java-release"&gt;Java release&lt;/h2&gt;
&lt;p&gt;Any Java release over 21 is enough, check it with this command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ java -version
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openjdk version &lt;span style="color:#e6db74"&gt;&amp;#34;21.0.1&amp;#34;&lt;/span&gt; 2023-10-17 LTS
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;OpenJDK Runtime Environment Zulu21.30+15-CA &lt;span style="color:#f92672"&gt;(&lt;/span&gt;build 21.0.1+12-LTS&lt;span style="color:#f92672"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;OpenJDK 64-Bit Server VM Zulu21.30+15-CA &lt;span style="color:#f92672"&gt;(&lt;/span&gt;build 21.0.1+12-LTS, mixed mode, sharing&lt;span style="color:#f92672"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="pi4j-jar-files"&gt;PI4J jar files&lt;/h2&gt;
&lt;p&gt;You will need to download the Pi4J distribution from the Maven repository:&lt;/p&gt;</description></item><item><title>Build as a FAT JAR with Maven</title><link>https://pi4j.com/documentation/building/fat-jar/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/documentation/building/fat-jar/</guid><description>&lt;div class="notices tip" &gt;&lt;p&gt;EXAMPLE PROJECT: &lt;a href="https://github.com/Pi4J/pi4j-example-fatjar" target="_blank" rel="noopener"&gt;https://github.com/Pi4J/pi4j-example-fatjar&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id="about-fat-jars"&gt;About FAT JARs&lt;/h2&gt;
&lt;p&gt;With Pi4J V1 you can create a so-called FAT JAR, which packages all the dependencies into one jar-file. That way it is
very easy to build your project on one computer and distribute your application as a single file to one or more clients.&lt;/p&gt;
&lt;p&gt;Because of the modular approach and how Pi4J V2+ loads it dependencies at runtime, this approach can be achieved by using
the maven-shade-plugin.&lt;/p&gt;</description></item><item><title>Build Java modules with Maven</title><link>https://pi4j.com/documentation/building/modules-maven/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/documentation/building/modules-maven/</guid><description>&lt;div class="notices tip" &gt;&lt;p&gt;GITHUB PROJECT: &lt;a href="https://github.com/Pi4J/pi4j-example-minimal" target="_blank" rel="noopener"&gt;https://github.com/Pi4J/pi4j-example-minimal&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Because the Pi4J V2+ project follows the modular approach of Java, the functionality of the framework has been split into
different modules, each with their own responsibility.&lt;/p&gt;
&lt;p&gt;The easiest way to start a new project, is to copy one of the example projects which include a full Maven pom.xml-file
with all the required steps and configurations to build the project with all its modules into the &lt;code&gt;target/distribution&lt;/code&gt;
directory.&lt;/p&gt;</description></item><item><title>Build Java modules with Gradle</title><link>https://pi4j.com/documentation/building/modules-gradle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/documentation/building/modules-gradle/</guid><description>&lt;div class="notices tip" &gt;&lt;p&gt;GITHUB PROJECT: &lt;a href="https://github.com/Pi4J/pi4j-example-minimal" target="_blank" rel="noopener"&gt;https://github.com/Pi4J/pi4j-example-minimal&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;The Pi4J project itself uses Maven and most example projects also use this build tool. But if you prefer to use Gradle,
you can start with a copy of the &lt;a href="https://pi4j.com/getting-started/minimal-example-application/"&gt;&amp;ldquo;Minimal example application&amp;rdquo;&lt;/a&gt; which includes
all the required files to build with Gradle.&lt;/p&gt;
&lt;p&gt;Use Gradle version 6.6 (or later) and Java 21 OpenJDK (or later). The Gradle wrapper is used as described on
&lt;a href="https://docs.gradle.org/current/userguide/gradle_wrapper.html" target="_blank" rel="noopener"&gt;docs.gradle.org&lt;/a&gt;. The Gradle configuration file
&lt;a href="https://github.com/Pi4J/pi4j-example-minimal/blob/master/build.gradle" target="_blank" rel="noopener"&gt;build.gradle-file&lt;/a&gt; is included in the sources.&lt;/p&gt;</description></item><item><title>Running Pi4J with JBang</title><link>https://pi4j.com/documentation/building/jbang/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/documentation/building/jbang/</guid><description>&lt;p&gt;JBang allows you to execute Java code with dependencies as a single file without the need for a full Maven or Gradle project. You also don&amp;rsquo;t need to compile your code. So it&amp;rsquo;s a very easy way to get started with Java and Pi4J.&lt;/p&gt;
&lt;p&gt;Multiple examples and more information is available in the section &lt;a href="https://pi4j.com/examples/jbang/"&gt;&amp;ldquo;Example Implementations &amp;gt; JBang Examples&amp;rdquo;&lt;/a&gt;.&lt;/p&gt;</description></item><item><title>Pixelblaze Output Expander</title><link>https://pi4j.com/examples/jbang/pixelblaze_output_expander/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/examples/jbang/pixelblaze_output_expander/</guid><description>&lt;div class="notices tip" &gt;&lt;p&gt;GITHUB PROJECT: &lt;a href="https://github.com/Pi4J/pi4j-jbang/blob/main/PixelblazeOutputExpander.java" target="_blank" rel="noopener"&gt;github.com/Pi4J/pi4j-jbang &amp;gt; PixelblazeOutputExpander.java&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;One of the most &amp;ldquo;fancy&amp;rdquo; electronic components is definitely a LED strip. It&amp;rsquo;s really cool to control a long strip of lights with only a few lines of code&amp;hellip; But, there is a problem. The timing of the signals is crucial to reliably control these strips. Both Python and Java on a Raspberry Pi can struggle with these timings as they are running on Linux, a non-real-time operating system. So pauses in the garbage collection of the Java virtual machine, or any glitch in the operating system can cause unexpected effects on the LED strips. That&amp;rsquo;s why in most projects, a microcontroller (Arduino, Raspberry Pi Pico, ESP32,&amp;hellip;) is used to drive the LED strip.&lt;/p&gt;</description></item><item><title>Controlling a LED Matrix</title><link>https://pi4j.com/examples/jbang/pixelblaze_output_expander_image/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/examples/jbang/pixelblaze_output_expander_image/</guid><description>&lt;div class="notices tip" &gt;&lt;p&gt;GITHUB PROJECT: &lt;a href="https://github.com/Pi4J/pi4j-jbang/blob/main/PixelblazeOutputExpanderImageMatrix8x32.java" target="_blank" rel="noopener"&gt;github.com/Pi4J/pi4j-jbang &amp;gt; PixelblazeOutputExpanderImageMatrix8x32.java&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;A LED strip doesn&amp;rsquo;t only exist as a single strip, the same system is also used in a LED matrix. In this example, we will control such a &lt;a href="https://www.amazon.nl/dp/B0B81R484Z" target="_blank" rel="noopener"&gt;8*32 LED matrix&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Full LED strip code walkthrough, and additional info in this live session with Robert (aka Eitch) and Frank:&lt;/p&gt;
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;"&gt;
 &lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share; fullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/eToIXACqSuY?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"&gt;&lt;/iframe&gt;
 &lt;/div&gt;

&lt;h2 id="intro"&gt;Intro&lt;/h2&gt;
&lt;p&gt;This example is based on the &lt;a href="https://pi4j.com/examples/jbang/pixelblaze_output_expander/"&gt;Pixelblaze Output Expander (PBOE) JBang example&lt;/a&gt;. Make sure to check out the PBOE example, so you fully understand how to set up and use JBang, and connect and control a LED strip via a PBOE.&lt;/p&gt;</description></item><item><title>LED strip with a JavaFX UI</title><link>https://pi4j.com/examples/jbang/pixelblaze_output_expander_javafx/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/examples/jbang/pixelblaze_output_expander_javafx/</guid><description>&lt;div class="notices tip" &gt;&lt;p&gt;GITHUB PROJECT: &lt;a href="https://github.com/Pi4J/pi4j-jbang/blob/main/PixelblazeOutputExpanderJavaFX.java" target="_blank" rel="noopener"&gt;github.com/Pi4J/pi4j-jbang &amp;gt; PixelblazeOutputExpanderJavaFX.java&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;We already know how to control a LED strip, so let&amp;rsquo;s add a JavaFX User Interface to control the colors on each of the LEDs on the strip.&lt;/p&gt;
&lt;p&gt;


&lt;div class="gallery caption-position-bottom caption-effect-slide hover-effect-zoom hover-transition" itemscope itemtype="http://schema.org/ImageGallery"&gt;
	 

&lt;link rel="stylesheet" href="https://pi4j.com/css/hugo-easy-gallery.css" /&gt;
&lt;div class="box fancy-figure caption-position-center caption-effect-fade" &gt;
 &lt;figure itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject"&gt;
 &lt;div class="img" style="background-image: url('/assets/examples/jbang/pixelblaze/javafx-ui.png');"&gt;
 &lt;img itemprop="thumbnail" src="https://pi4j.com/assets/examples/jbang/pixelblaze/javafx-ui.png" alt="Demo of the JavaFX UI"/&gt;
 &lt;/div&gt;
 &lt;a href="https://pi4j.com/assets/examples/jbang/pixelblaze/javafx-ui.png" itemprop="contentUrl"&gt;&lt;/a&gt;
 &lt;figcaption&gt;
 &lt;p&gt;Demo of the JavaFX UI&lt;/p&gt;
 &lt;/figcaption&gt;
 &lt;/figure&gt;
&lt;/div&gt;


&lt;/div&gt;





 


&lt;script src="https://pi4j.com/js/load-photoswipe.js"&gt;&lt;/script&gt;


&lt;link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.1/photoswipe.min.css" integrity="sha256-sCl5PUOGMLfFYctzDW3MtRib0ctyUvI9Qsmq2wXOeBY=" crossorigin="anonymous" /&gt;
&lt;link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.1/default-skin/default-skin.min.css" integrity="sha256-BFeI1V+Vh1Rk37wswuOYn5lsTcaU96hGaI7OUVCLjPc=" crossorigin="anonymous" /&gt;
&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.1/photoswipe.min.js" integrity="sha256-UplRCs9v4KXVJvVY+p+RSo5Q4ilAUXh7kpjyIP5odyc=" crossorigin="anonymous"&gt;&lt;/script&gt;
&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.1/photoswipe-ui-default.min.js" integrity="sha256-PWHOlUzc96pMc8ThwRIXPn8yH4NOLu42RQ0b9SpnpFk=" crossorigin="anonymous"&gt;&lt;/script&gt;


&lt;div class="pswp" tabindex="-1" role="dialog" aria-hidden="true"&gt;

&lt;div class="pswp__bg"&gt;&lt;/div&gt;

&lt;div class="pswp__scroll-wrap"&gt;
 
 &lt;div class="pswp__container"&gt;
 &lt;div class="pswp__item"&gt;&lt;/div&gt;
 &lt;div class="pswp__item"&gt;&lt;/div&gt;
 &lt;div class="pswp__item"&gt;&lt;/div&gt;
 &lt;/div&gt;
 
 &lt;div class="pswp__ui pswp__ui--hidden"&gt;
 &lt;div class="pswp__top-bar"&gt;
 
 &lt;div class="pswp__counter"&gt;&lt;/div&gt;
 &lt;button class="pswp__button pswp__button--close" title="Close (Esc)"&gt;&lt;/button&gt;
 &lt;button class="pswp__button pswp__button--share" title="Share"&gt;&lt;/button&gt;
 &lt;button class="pswp__button pswp__button--fs" title="Toggle fullscreen"&gt;&lt;/button&gt;
 &lt;button class="pswp__button pswp__button--zoom" title="Zoom in/out"&gt;&lt;/button&gt;
 
 
 &lt;div class="pswp__preloader"&gt;
 &lt;div class="pswp__preloader__icn"&gt;
 &lt;div class="pswp__preloader__cut"&gt;
 &lt;div class="pswp__preloader__donut"&gt;&lt;/div&gt;
 &lt;/div&gt;
 &lt;/div&gt;
 &lt;/div&gt;
 &lt;/div&gt;
 &lt;div class="pswp__share-modal pswp__share-modal--hidden pswp__single-tap"&gt;
 &lt;div class="pswp__share-tooltip"&gt;&lt;/div&gt;
 &lt;/div&gt;
 &lt;button class="pswp__button pswp__button--arrow--left" title="Previous (arrow left)"&gt;
 &lt;/button&gt;
 &lt;button class="pswp__button pswp__button--arrow--right" title="Next (arrow right)"&gt;
 &lt;/button&gt;
 &lt;div class="pswp__caption"&gt;
 &lt;div class="pswp__caption__center"&gt;&lt;/div&gt;
 &lt;/div&gt;
 &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;</description></item><item><title>Digital Output (GPIO)</title><link>https://pi4j.com/documentation/io-examples/digital-output/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/documentation/io-examples/digital-output/</guid><description>&lt;p&gt;A digital output translates a false/true (or 0/1) to an output value of 0V or 3.3V. This
means you can control any type of device which works with max 3.3V to off or on. The most
basic example is a LED. Always check which is the correct input voltage for your device!
For a LED you will need to put a resistor with the correct value between the GPIO and the LED,
you can find a lot of examples and calculators online, for example on
&lt;a href="https://circuitdigest.com/calculators/led-resistor-calculator" target="_blank" rel="noopener"&gt;circuitdigest.com/calculators/led-resistor-calculator&lt;/a&gt;.&lt;/p&gt;</description></item><item><title>Simple Button</title><link>https://pi4j.com/examples/components/simplebutton/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/examples/components/simplebutton/</guid><description>&lt;h3 id="description"&gt;Description&lt;/h3&gt;
&lt;p&gt;The &lt;a href="https://github.com/Pi4J/pi4j-example-components/tree/main/src/main/java/com/pi4j/catalog/components/SimpleButton.java" target="_blank" rel="noopener"&gt;SimpleButton&lt;/a&gt; is a template class, that you can use in your own Java-project.&lt;/p&gt;
&lt;p&gt;The Template Class gives you the option to check the state of the button, and to create simple events if the button is pressed, depressed or while it is being pressed.&lt;/p&gt;
&lt;h3 id="layout"&gt;Layout&lt;/h3&gt;
&lt;p&gt;&lt;img src="https://pi4j.com/assets/examples/components/components/Layout-SimpleButton.png" alt="Simple Button Layout"&gt;&lt;/p&gt;
&lt;p&gt;


&lt;div class="gallery caption-position-bottom caption-effect-slide hover-effect-zoom hover-transition" itemscope itemtype="http://schema.org/ImageGallery"&gt;
	 

&lt;link rel="stylesheet" href="https://pi4j.com/css/hugo-easy-gallery.css" /&gt;
&lt;div class="box fancy-figure caption-position-center caption-effect-fade" &gt;
 &lt;figure itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject"&gt;
 &lt;div class="img" style="background-image: url('/assets/examples/components/components/pictures/SimpleButtonBreadboard.png');"&gt;
 &lt;img itemprop="thumbnail" src="https://pi4j.com/assets/examples/components/components/pictures/SimpleButtonBreadboard.png" alt="Simple Button Breadboard"/&gt;
 &lt;/div&gt;
 &lt;a href="https://pi4j.com/assets/examples/components/components/pictures/SimpleButtonBreadboard.png" itemprop="contentUrl"&gt;&lt;/a&gt;
 &lt;figcaption&gt;
 &lt;p&gt;Simple Button Breadboard&lt;/p&gt;
 &lt;/figcaption&gt;
 &lt;/figure&gt;
&lt;/div&gt;



&lt;div class="box fancy-figure caption-position-center caption-effect-fade" &gt;
 &lt;figure itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject"&gt;
 &lt;div class="img" style="background-image: url('/assets/examples/components/components/pictures/BigButton.png');"&gt;
 &lt;img itemprop="thumbnail" src="https://pi4j.com/assets/examples/components/components/pictures/BigButton.png" alt="Big Button"/&gt;
 &lt;/div&gt;
 &lt;a href="https://pi4j.com/assets/examples/components/components/pictures/BigButton.png" itemprop="contentUrl"&gt;&lt;/a&gt;
 &lt;figcaption&gt;
 &lt;p&gt;Big Button&lt;/p&gt;</description></item><item><title>Simple LED</title><link>https://pi4j.com/examples/components/simpleled/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/examples/components/simpleled/</guid><description>&lt;h3 id="description"&gt;Description&lt;/h3&gt;
&lt;p&gt;The &lt;a href="https://github.com/Pi4J/pi4j-example-components/tree/main/src/main/java/com/pi4j/catalog/components/SimpleLed.java" target="_blank" rel="noopener"&gt;SimpleLed&lt;/a&gt; is a template class, that you can use in your own Java-project.&lt;/p&gt;
&lt;p&gt;The template Class gives you the option to switch off, switch on or toggle the state of the LED.&lt;/p&gt;
&lt;h3 id="layout"&gt;Layout&lt;/h3&gt;
&lt;p&gt;&lt;img src="https://pi4j.com/assets/examples/components/components/Layout-SimpleLED.png" alt="Simple LED Layout"&gt;&lt;/p&gt;
&lt;p&gt;


&lt;div class="gallery caption-position-bottom caption-effect-slide hover-effect-zoom hover-transition" itemscope itemtype="http://schema.org/ImageGallery"&gt;
	 

&lt;link rel="stylesheet" href="https://pi4j.com/css/hugo-easy-gallery.css" /&gt;
&lt;div class="box fancy-figure caption-position-center caption-effect-fade" &gt;
 &lt;figure itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject"&gt;
 &lt;div class="img" style="background-image: url('/assets/examples/components/components/pictures/SimpleLedBreadboard.png');"&gt;
 &lt;img itemprop="thumbnail" src="https://pi4j.com/assets/examples/components/components/pictures/SimpleLedBreadboard.png" alt="Simple Led Breadboard"/&gt;
 &lt;/div&gt;
 &lt;a href="https://pi4j.com/assets/examples/components/components/pictures/SimpleLedBreadboard.png" itemprop="contentUrl"&gt;&lt;/a&gt;
 &lt;figcaption&gt;
 &lt;p&gt;Simple Led Breadboard&lt;/p&gt;
 &lt;/figcaption&gt;
 &lt;/figure&gt;
&lt;/div&gt;


&lt;/div&gt;





 


&lt;script src="https://pi4j.com/js/load-photoswipe.js"&gt;&lt;/script&gt;


&lt;link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.1/photoswipe.min.css" integrity="sha256-sCl5PUOGMLfFYctzDW3MtRib0ctyUvI9Qsmq2wXOeBY=" crossorigin="anonymous" /&gt;
&lt;link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.1/default-skin/default-skin.min.css" integrity="sha256-BFeI1V+Vh1Rk37wswuOYn5lsTcaU96hGaI7OUVCLjPc=" crossorigin="anonymous" /&gt;
&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.1/photoswipe.min.js" integrity="sha256-UplRCs9v4KXVJvVY+p+RSo5Q4ilAUXh7kpjyIP5odyc=" crossorigin="anonymous"&gt;&lt;/script&gt;
&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.1/photoswipe-ui-default.min.js" integrity="sha256-PWHOlUzc96pMc8ThwRIXPn8yH4NOLu42RQ0b9SpnpFk=" crossorigin="anonymous"&gt;&lt;/script&gt;


&lt;div class="pswp" tabindex="-1" role="dialog" aria-hidden="true"&gt;

&lt;div class="pswp__bg"&gt;&lt;/div&gt;

&lt;div class="pswp__scroll-wrap"&gt;
 
 &lt;div class="pswp__container"&gt;
 &lt;div class="pswp__item"&gt;&lt;/div&gt;
 &lt;div class="pswp__item"&gt;&lt;/div&gt;
 &lt;div class="pswp__item"&gt;&lt;/div&gt;
 &lt;/div&gt;
 
 &lt;div class="pswp__ui pswp__ui--hidden"&gt;
 &lt;div class="pswp__top-bar"&gt;
 
 &lt;div class="pswp__counter"&gt;&lt;/div&gt;
 &lt;button class="pswp__button pswp__button--close" title="Close (Esc)"&gt;&lt;/button&gt;
 &lt;button class="pswp__button pswp__button--share" title="Share"&gt;&lt;/button&gt;
 &lt;button class="pswp__button pswp__button--fs" title="Toggle fullscreen"&gt;&lt;/button&gt;
 &lt;button class="pswp__button pswp__button--zoom" title="Zoom in/out"&gt;&lt;/button&gt;
 
 
 &lt;div class="pswp__preloader"&gt;
 &lt;div class="pswp__preloader__icn"&gt;
 &lt;div class="pswp__preloader__cut"&gt;
 &lt;div class="pswp__preloader__donut"&gt;&lt;/div&gt;
 &lt;/div&gt;
 &lt;/div&gt;
 &lt;/div&gt;
 &lt;/div&gt;
 &lt;div class="pswp__share-modal pswp__share-modal--hidden pswp__single-tap"&gt;
 &lt;div class="pswp__share-tooltip"&gt;&lt;/div&gt;
 &lt;/div&gt;
 &lt;button class="pswp__button pswp__button--arrow--left" title="Previous (arrow left)"&gt;
 &lt;/button&gt;
 &lt;button class="pswp__button pswp__button--arrow--right" title="Next (arrow right)"&gt;
 &lt;/button&gt;
 &lt;div class="pswp__caption"&gt;
 &lt;div class="pswp__caption__center"&gt;&lt;/div&gt;
 &lt;/div&gt;
 &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;</description></item><item><title>AD Converter ADS1115</title><link>https://pi4j.com/examples/components/ads1115/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/examples/components/ads1115/</guid><description>&lt;h3 id="description"&gt;Description&lt;/h3&gt;
&lt;p&gt;The Analog Digital Converter &lt;a href="https://github.com/Pi4J/pi4j-example-components/tree/main/src/main/java/com/pi4j/catalog/components/Ads1115.java" target="_blank" rel="noopener"&gt;Ads1115&lt;/a&gt; is a template class, that you can use in your own Java-project.
The ADS1115 device is a precision, low-power, 16-bit, I2C-compatible, analog-to-digital converter (ADCs). The ADS1115 device incorporates a low-drift voltage reference and an oscillator as well as a programmable gain amplifier (PGA) and
a digital comparator. These features, along with a wide operating supply range, makes the ADS1115 well suited for power- and space-constrained, sensor measurement applications.&lt;/p&gt;</description></item><item><title>Buzzer</title><link>https://pi4j.com/examples/components/buzzer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/examples/components/buzzer/</guid><description>&lt;h3 id="description"&gt;Description&lt;/h3&gt;
&lt;p&gt;The &lt;a href="https://github.com/Pi4J/pi4j-example-components/tree/main/src/main/java/com/pi4j/catalog/components/Buzzer.java" target="_blank" rel="noopener"&gt;Buzzer&lt;/a&gt; is a template class, that you can use in your own Java-project.&lt;/p&gt;
&lt;p&gt;The Template Class gives you the option to play a note, and to create your own little melodies to play. The buzzer is controlled via a PWM output. The dutycycle is fixed at 50% and with the frequency the desired sound can be reproduced.&lt;/p&gt;
&lt;h3 id="layout"&gt;Layout&lt;/h3&gt;
&lt;p&gt;&lt;img src="https://pi4j.com/assets/examples/components/components/Layout-Buzzer.png" alt="Buzzer Layout"&gt;&lt;/p&gt;
&lt;p&gt;


&lt;div class="gallery caption-position-bottom caption-effect-slide hover-effect-zoom hover-transition" itemscope itemtype="http://schema.org/ImageGallery"&gt;
	 

&lt;link rel="stylesheet" href="https://pi4j.com/css/hugo-easy-gallery.css" /&gt;
&lt;div class="box fancy-figure caption-position-center caption-effect-fade" &gt;
 &lt;figure itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject"&gt;
 &lt;div class="img" style="background-image: url('/assets/examples/components/components/pictures/BuzzerActiveBreadboard.png');"&gt;
 &lt;img itemprop="thumbnail" src="https://pi4j.com/assets/examples/components/components/pictures/BuzzerActiveBreadboard.png" alt="Buzzer Acitve Breadboard"/&gt;
 &lt;/div&gt;
 &lt;a href="https://pi4j.com/assets/examples/components/components/pictures/BuzzerActiveBreadboard.png" itemprop="contentUrl"&gt;&lt;/a&gt;
 &lt;figcaption&gt;
 &lt;p&gt;Buzzer Acitve Breadboard&lt;/p&gt;</description></item><item><title>Camera</title><link>https://pi4j.com/examples/components/camera/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/examples/components/camera/</guid><description>&lt;h3 id="description"&gt;Description&lt;/h3&gt;
&lt;p&gt;The &lt;a href="https://github.com/Pi4J/pi4j-example-components/tree/main/src/main/java/com/pi4j/catalog/components/Camera.java" target="_blank" rel="noopener"&gt;Camera&lt;/a&gt; is a template class, that you can use in your own Java-project.
Currently, the code is only tested with a &lt;a href="https://www.raspberrypi.com/documentation/accessories/camera.html#introducing-the-raspberry-pi-cameras" target="_blank" rel="noopener"&gt;Raspberry-Camera&lt;/a&gt; and the &lt;a href="https://pi4j.com/getting-started/crowpi/crowpi-os/"&gt;crowpi-image&lt;/a&gt;.
You can take pictures or videos, with or without a preview.&lt;/p&gt;

&lt;div class="notices note" &gt;&lt;p&gt;To connect the camera, use this &lt;a href="https://youtu.be/GImeVqHQzsE" target="_blank" rel="noopener"&gt;video&lt;/a&gt;. The video is mentioned on the official &lt;a href="https://www.raspberrypi.com/documentation/accessories/camera.html" target="_blank" rel="noopener"&gt;website&lt;/a&gt;.
The camera class is using the bash-commands &amp;ldquo;libcamera-hello&amp;rdquo;, &amp;ldquo;libcamera-still&amp;rdquo; and &amp;ldquo;libcamera-vid&amp;rdquo;. To use them, set up the raspberry with the following &lt;a href="https://www.raspberrypi.com/documentation/accessories/camera.html#getting-started" target="_blank" rel="noopener"&gt;Introduction&lt;/a&gt;&lt;/p&gt;</description></item><item><title>Digital Input (GPIO)</title><link>https://pi4j.com/documentation/io-examples/digital-input/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/documentation/io-examples/digital-input/</guid><description>&lt;p&gt;Similar to a digital output pin, a digital input translates an input value of 0V or 3.3V to the value false/true. This
means any type of device which can toggle between 3.3V and 0V, can generate an input value to the Raspberry Pi. Here the
most basic example is a toggle button. If you use other components, always check which is the voltage provided by the device.
Or if you use a power pin from the Raspberry Pi itself, to use a 3.3V pin and not a 5V pin.&lt;/p&gt;</description></item><item><title>Joystick</title><link>https://pi4j.com/examples/components/joystick/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/examples/components/joystick/</guid><description>&lt;h3 id="description"&gt;Description&lt;/h3&gt;
&lt;p&gt;The &lt;a href="https://github.com/Pi4J/pi4j-example-components/tree/main/src/main/java/com/pi4j/catalog/components/Joystick.java" target="_blank" rel="noopener"&gt;Joystick&lt;/a&gt; is a template class, that you can use in your own Java-project.
The template is created for a digital joystick with 4 directions (up, right, down, left) and as an option additionally with a push button in direction down.
A suitable hardware component is the arcade joystick in the picture bellow. But any joystick with switching contacts will meet the requirements.&lt;/p&gt;
&lt;p&gt;The template class allows to query the individual joystick positions and can trigger a simple event when the joystick swings out in a direction or when it returns to the center position.&lt;/p&gt;</description></item><item><title>Joystick Analog</title><link>https://pi4j.com/examples/components/joystickanalog/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/examples/components/joystickanalog/</guid><description>&lt;h3 id="description"&gt;Description&lt;/h3&gt;
&lt;p&gt;The &lt;a href="https://github.com/Pi4J/pi4j-example-components/tree/main/src/main/java/com/pi4j/catalog/components/JoystickAnalog.java" target="_blank" rel="noopener"&gt;JoystickAnalog&lt;/a&gt; is a template class, that you can use in your own Java-project.
The template class is created for an analog joystick, for example the KY-023, which consists of two potentiometers, one for the X-axis and one for the Y-axis. But any joystick with two potentiometers will meet the requirements.&lt;/p&gt;
&lt;p&gt;The basic functions of the template class are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;return of a normalized value, optionally between 0 and 1 or between -1 and 1, of the X-axis and the Y-axis&lt;/li&gt;
&lt;li&gt;creation of simple events at a value change of the X-axis or the Y-axis, simple event handlers for button pressed, button depressed, while button is pressed&lt;/li&gt;
&lt;li&gt;calibration of the center position of the joystick (center position 0.5 at a normalized value between 0 and 1, center position 0 at a normalized value between -1 and 1)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="layout"&gt;Layout&lt;/h3&gt;
&lt;p&gt;&lt;img src="https://pi4j.com/assets/examples/components/components/Layout-JoystickAnalog.png" alt="Joystick Layout"&gt;&lt;/p&gt;</description></item><item><title>LCD Display</title><link>https://pi4j.com/examples/components/lcddisplay/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/examples/components/lcddisplay/</guid><description>&lt;h3 id="description"&gt;Description&lt;/h3&gt;
&lt;p&gt;The &lt;a href="https://github.com/Pi4J/pi4j-example-components/tree/main/src/main/java/com/pi4j/catalog/components/LcdDisplay.java" target="_blank" rel="noopener"&gt;LcdDisplay&lt;/a&gt;
is a template class, that you can use in your own Java-project. It is used to show Numbers, Text and Symbols on a small Display.
The Class supports only LCD Displays with the PCF8574T I2C Backpack. Supported display-dimensions are 40x2, 20x4, 20x2, 16x2, 16x1.&lt;/p&gt;

&lt;div class="notices note" &gt;&lt;p&gt;IF YOU CAN&amp;rsquo;T SEE ANYTHING WRITTEN ON THE DISPLAY, TRY TO SET THE CONTRAST BY TURNING THE CONTRAST-SCREW AT THE BACK WITH A SCREWDRIVER.
Also, check if I2C is enabled in your raspberry-config.&lt;/p&gt;</description></item><item><title>LED Button</title><link>https://pi4j.com/examples/components/ledbutton/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/examples/components/ledbutton/</guid><description>&lt;h3 id="description"&gt;Description&lt;/h3&gt;
&lt;p&gt;The &lt;a href="https://github.com/Pi4J/pi4j-example-components/tree/main/src/main/java/com/pi4j/catalog/components/LedButton.java" target="_blank" rel="noopener"&gt;LedButton&lt;/a&gt; is a template class, that you can use in your own Java-project.
You can take any Button with a LED you want to. Like for example the big button bellow in the picture gallery.&lt;/p&gt;
&lt;p&gt;The Template Class gives you the option to check the state of the button, and to create simple events if the button is pressed or depressed, or the whole time is is being pressed. Also it lets you control the LED.&lt;/p&gt;</description></item><item><title>LED Matrix</title><link>https://pi4j.com/examples/components/ledmatrix/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/examples/components/ledmatrix/</guid><description>&lt;div class="notices note" &gt;&lt;p&gt;Although this example is still valid, an easier approach for the control of an array of LEDs can be achieved with the PixelBlaze Output Expander as described &lt;a href="https://pi4j.com/examples/jbang/pixelblaze_output_expander/" target="_blank" rel="noopener"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;

&lt;h3 id="description"&gt;Description&lt;/h3&gt;
&lt;p&gt;The &lt;a href="https://github.com/Pi4J/pi4j-example-components/tree/main/src/main/java/com/pi4j//catalog/components/LedMatrix.java" target="_blank" rel="noopener"&gt;LedMatrix&lt;/a&gt; is a template class, that you can use in your own Java-project.
It is an extension of the class &lt;a href="https://pi4j.com/examples/components/ledstrip/" target="_blank" rel="noopener"&gt;LEDStrip&lt;/a&gt;. An LED matrix can be built from one LED strip. To do this, separate the LED strip at the desired point and place the individual strips under each other or next to each other. The individual ends can then be connected to each other with a wire.
The constructor can be passed either as a rectangular matrix or a user-defined matrix with different numbers of LEDs in the individual strips. A software compatible LED strip is for example the WS28xx-chip set LED Strip.&lt;/p&gt;</description></item><item><title>LED Strip</title><link>https://pi4j.com/examples/components/ledstrip/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/examples/components/ledstrip/</guid><description>&lt;div class="notices note" &gt;&lt;p&gt;Although this example is still valid, an easier approach for the control of an array of LEDs can be achieved with the PixelBlaze Output Expander as described &lt;a href="https://pi4j.com/examples/jbang/pixelblaze_output_expander/" target="_blank" rel="noopener"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;

&lt;h3 id="description"&gt;Description&lt;/h3&gt;
&lt;p&gt;The &lt;a href="https://github.com/Pi4J/pi4j-example-components/tree/main/src/main/java/com/pi4j/catalog/components/LedStrip.java" target="_blank" rel="noopener"&gt;LedStrip&lt;/a&gt; is a template class, that you can use in your own Java-project.
You can take a LED Strip with the WS28xx-chip set.&lt;/p&gt;
&lt;p&gt;The Template Class gives you the option to set the LED&amp;rsquo;s of the strip to a desired RGB-Color.
If you have many strips, you can use the &lt;a href="https://pi4j.com/examples/components/ledmatrix/" target="_blank" rel="noopener"&gt;LEDMatrix&lt;/a&gt;&lt;/p&gt;</description></item><item><title>Potentiometer</title><link>https://pi4j.com/examples/components/potentiometer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/examples/components/potentiometer/</guid><description>&lt;h3 id="description"&gt;Description&lt;/h3&gt;
&lt;p&gt;The &lt;a href="https://github.com/Pi4J/pi4j-example-components/tree/main/src/main/java/com/pi4j/catalog/components/Potentiometer.java" target="_blank" rel="noopener"&gt;Potentiometer&lt;/a&gt; is a template class, that you can use in your own Java-project.
The constructor of the class requires an ADS1115 object. In addition, the channel, with which the AD converter evaluates the current position of the sliding contact must be defined. For normalization, the maximum voltage that can drop across the sliding contact must also be specified. Any commercially available potentiometer with three connections (fixed resistor and the slider) can be evaluated with this class.&lt;/p&gt;</description></item><item><title>ServoMotor</title><link>https://pi4j.com/examples/components/servo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/examples/components/servo/</guid><description>&lt;h3 id="description"&gt;Description&lt;/h3&gt;
&lt;p&gt;The &lt;a href="https://github.com/Pi4J/pi4j-example-components/tree/main/src/main/java/com/pi4j/catalog/components/ServoMotor.java" target="_blank" rel="noopener"&gt;ServoMotor&lt;/a&gt; is a template class, that you can use in your own Java-project.
You can set the servo to a specific location, likewise to 110 degrees of it&amp;rsquo;s range.&lt;/p&gt;
&lt;p&gt;You can use a wide variety of analog servo motors such as the SG92R or the SG-5010 (for a little more torque).&lt;/p&gt;
&lt;h3 id="layout"&gt;Layout&lt;/h3&gt;
&lt;p&gt;&lt;img src="https://pi4j.com/assets/examples/components/components/Layout-Servo.png" alt="Servo Layout"&gt;&lt;/p&gt;
&lt;p&gt;


&lt;div class="gallery caption-position-bottom caption-effect-slide hover-effect-zoom hover-transition" itemscope itemtype="http://schema.org/ImageGallery"&gt;
	 

&lt;link rel="stylesheet" href="https://pi4j.com/css/hugo-easy-gallery.css" /&gt;
&lt;div class="box fancy-figure caption-position-center caption-effect-fade" &gt;
 &lt;figure itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject"&gt;
 &lt;div class="img" style="background-image: url('/assets/examples/components/components/pictures/ServoBreadboard.png');"&gt;
 &lt;img itemprop="thumbnail" src="https://pi4j.com/assets/examples/components/components/pictures/ServoBreadboard.png" alt="Servo Breadboard"/&gt;
 &lt;/div&gt;
 &lt;a href="https://pi4j.com/assets/examples/components/components/pictures/ServoBreadboard.png" itemprop="contentUrl"&gt;&lt;/a&gt;
 &lt;figcaption&gt;
 &lt;p&gt;Servo Breadboard&lt;/p&gt;
 &lt;/figcaption&gt;
 &lt;/figure&gt;
&lt;/div&gt;



&lt;div class="box fancy-figure caption-position-center caption-effect-fade" &gt;
 &lt;figure itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject"&gt;
 &lt;div class="img" style="background-image: url('/assets/examples/components/components/pictures/ServoSG-5010-TopView.png');"&gt;
 &lt;img itemprop="thumbnail" src="https://pi4j.com/assets/examples/components/components/pictures/ServoSG-5010-TopView.png" alt="Servo SG-5010 Top View"/&gt;
 &lt;/div&gt;
 &lt;a href="https://pi4j.com/assets/examples/components/components/pictures/ServoSG-5010-TopView.png" itemprop="contentUrl"&gt;&lt;/a&gt;
 &lt;figcaption&gt;
 &lt;p&gt;Servo SG-5010 Top View&lt;/p&gt;</description></item><item><title>Pulse Width Modulation (PWM)</title><link>https://pi4j.com/documentation/io-examples/pwm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/documentation/io-examples/pwm/</guid><description>&lt;h2 id="what-is-it"&gt;What is it?&lt;/h2&gt;
&lt;p&gt;The abbreviation PWM stands for &amp;ldquo;Pulse Width Modulation&amp;rdquo; and is also often referred
to in German as pulse width modulation or pulse duration modulation. This technology
is used, among other things, to control servomotors and is also used, for example,
for the fans of a regular computer.&lt;/p&gt;
&lt;p&gt;With PWM, it is possible to control a component such as a motor no longer purely
binary, i.e. off (0% power) or on (100% power), but to control them almost at will.
The functionality of PWM works in such a way that the component is switched off and
on again and again within a certain period of time.&lt;/p&gt;</description></item><item><title>I²C Clock Stretching</title><link>https://pi4j.com/documentation/io-examples/i2c/clock-stretching/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/documentation/io-examples/i2c/clock-stretching/</guid><description>&lt;h2 id="clock-stretching"&gt;Clock Stretching&lt;/h2&gt;

&lt;div class="notices warning" &gt;&lt;p&gt;Please be aware there are some hardware issues when using
the Raspberry Pi with devices that expect to be able to use clock stretching,
for more info see
&lt;a href="https://www.recantha.co.uk/blog/?p=19880" target="_blank" rel="noopener"&gt;&amp;ldquo;Adventures in I2C: clock stretching on the Raspberry Pi&amp;rdquo;&lt;/a&gt;
and &lt;a href="https://www.raspberrypi.org/forums/viewtopic.php?t=220428" target="_blank" rel="noopener"&gt;&amp;ldquo;I2C stretch bug. Been fixed or not?&amp;rdquo;&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/I%C2%B2C#Clock_stretching_using_SCL" target="_blank" rel="noopener"&gt;Clock stretching&lt;/a&gt;
in I2C allows a slave device to halt the master before a more data is sent. This
is often the case when the slave device writes to an EEPROM etc. which takes
longer than a usual read or write to a register.&lt;/p&gt;</description></item><item><title>Serial Peripheral Interface (SPI)</title><link>https://pi4j.com/documentation/io-examples/spi/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/documentation/io-examples/spi/</guid><description>&lt;h2 id="what-is-it"&gt;What is it?&lt;/h2&gt;
&lt;p&gt;The Serial Peripheral Interface, abbreviated to SPI, is a bus system which enables
communication between a main device (called “master”) and one or more secondary devices
(called “slave”). A direct communication between all participants is not possible here,
much more the master can choose at any time with which slave he would like to exchange data.&lt;/p&gt;
&lt;p&gt;In order to address only one slave, a total of 3 signal lines are required, two of which
are used for bidirectional data transmission and one as a clock generator for serial
transmission. If further slaves are to be addressed, additional signal lines are required
depending on the desired topology.&lt;/p&gt;</description></item><item><title>Serial (UART/RS232)</title><link>https://pi4j.com/documentation/io-examples/serial/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/documentation/io-examples/serial/</guid><description>&lt;div class="notices warning" &gt;&lt;p&gt;As of version 3 of the Pi4J library, the serial methods have been marked as deprecated, and we advise to use the &lt;a href="https://fazecast.github.io/jSerialComm/" target="_blank" rel="noopener"&gt;jSerialComm library&lt;/a&gt;, as discussed in &lt;a href="https://github.com/Pi4J/pi4j/discussions/308" target="_blank" rel="noopener"&gt;#308: Remove serial support from Pi4J?&lt;/a&gt;. The example code below is still applicable, but serial support will be fully removed in later versions of Pi4J.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;
&lt;div class="notices tip" &gt;&lt;p&gt;GITHUB PROJECT: &lt;a href="https://github.com/Pi4J/pi4j-example-components/blob/main/src/main/java/com/pi4j/catalog/applications/SerialGps_App.java" target="_blank" rel="noopener"&gt;https://github.com/Pi4J/pi4j-example-components/blob/main/src/main/java/com/pi4j/catalog/applications/SerialGps_App.java&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id="what-is-it"&gt;What is it?&lt;/h2&gt;
&lt;p&gt;Serial communication can be used to transfer data between different boards, devices, etc. Data is transfered bit-by-bit
in a sequence, through a single wire from a transmitter (= TX) to a receiver (= RX). On the receiver side the bits are
combined to bytes.&lt;/p&gt;</description></item><item><title>1-Wire</title><link>https://pi4j.com/documentation/io-examples/1-wire/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/documentation/io-examples/1-wire/</guid><description>&lt;h2 id="what-is-it"&gt;What is it?&lt;/h2&gt;
&lt;p&gt;Based on &lt;a href="https://en.wikipedia.org/wiki/1-Wire" target="_blank" rel="noopener"&gt;Wikipedia&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;1-Wire is a wired half-duplex serial bus that provides low-speed (16.3 kbit/s) data communication and supply voltage over a single conductor. It&amp;rsquo;s similar in concept to I2C, but with lower data rates and longer range. It is typically used to communicate with small inexpensive devices such as digital thermometers and weather instruments.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="receive-data"&gt;Receive Data&lt;/h2&gt;
&lt;p&gt;At this moment, 1-Wire is not supported by Pi4J, but there is work-in-progress, see &lt;a href="https://github.com/Pi4J/pi4j/pull/435/files" target="_blank" rel="noopener"&gt;draft pull request #435&lt;/a&gt;.&lt;/p&gt;</description></item><item><title>The Pi4J Logo</title><link>https://pi4j.com/architecture/pi4j-logo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/architecture/pi4j-logo/</guid><description>&lt;div class="notices tip" &gt;&lt;p&gt;GITHUB PROJECT: &lt;a href="https://github.com/Pi4J/pi4j-logo" target="_blank" rel="noopener"&gt;https://github.com/Pi4J/pi4j-logo&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;The Pi4J logo has been designed by &lt;a href="https://twitter.com/hansolo_" target="_blank" rel="noopener"&gt;Gerrit Grunwald&lt;/a&gt; and is nicely combines a raspberry pie
with &lt;a href="https://www.oracle.com/java/duke.html" target="_blank" rel="noopener"&gt;Duke, the Java Masqot&lt;/a&gt;.&lt;/p&gt;
&lt;img src="https://pi4j.com/assets/pi4j-logo.png" style="width: 400px; height: 400px;" /&gt;</description></item><item><title>2025 Devoxx Talk FFM API</title><link>https://pi4j.com/video/20251009-devoxx-ffmapi/</link><pubDate>Thu, 09 Oct 2025 00:00:00 +0000</pubDate><guid>https://pi4j.com/video/20251009-devoxx-ffmapi/</guid><description>&lt;h2 id="the-wait-is-over-foreign-function--memory-ffm-api-brings-modern-java-to-the-raspberry-pi"&gt;The Wait is Over: Foreign Function &amp;amp; Memory FFM API brings modern Java to the Raspberry Pi&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;20251009 - Recording of the talk at Devoxx Belgium by Frank Delporte&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;All the links of the presentation are available &lt;a href="https://webtechie.be/post/2025-10-08-devoxx-talk-ffmapi-on-raspberrypi/" target="_blank" rel="noopener"&gt;on this blog post&lt;/a&gt;.&lt;/p&gt;
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;"&gt;
 &lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share; fullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/2BcWWWkb8ac?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"&gt;&lt;/iframe&gt;
 &lt;/div&gt;

&lt;p&gt;Since 2012, Pi4J has enabled Java to control electronic components connected to the Raspberry Pi&amp;rsquo;s GPIO pins. However, both Java and the Raspberry Pi have evolved significantly since then. Supporting new hardware has been a challenge, requiring multiple implementations in the Pi4J library with complex code based on the Java Native Interface (JNI) and Java Native Access (JNA).&lt;/p&gt;</description></item><item><title>2025 Live Coding: Vaadin</title><link>https://pi4j.com/video/20250924-live-coding-vaadin/</link><pubDate>Wed, 24 Sep 2025 00:00:00 +0000</pubDate><guid>https://pi4j.com/video/20250924-live-coding-vaadin/</guid><description>&lt;h2 id="live-stream-coding"&gt;Live Stream Coding&lt;/h2&gt;
&lt;h3 id="improving-the-vaadinspringpi4j-demo-application-with-matti-tahvonen"&gt;Improving the Vaadin+Spring+Pi4J demo application with Matti Tahvonen&lt;/h3&gt;
&lt;p&gt;2025-09-24, by Frank Delporte&lt;/p&gt;
&lt;p&gt;During a live stream coding session, &lt;a href="https://www.linkedin.com/in/mattitahvonen/" target="_blank" rel="noopener"&gt;Matti Tahvonen&lt;/a&gt; and &lt;a href="https://www.linkedin.com/in/frankdelporte/" target="_blank" rel="noopener"&gt;Frank Delporte&lt;/a&gt; updated an existing Vaadin+Spring+Pi4J demo application to use the latest version of the libraries and Java 25. It&amp;rsquo;s a demo application created a few years ago to be used during presentations at conferences. Of course, everything evolves, so a big update and refactoring was needed.&lt;/p&gt;
&lt;p&gt;(Sorry for the hiccups in the first minutes, the network connection dropped a few times&amp;hellip;)&lt;/p&gt;</description></item><item><title>2025 Live Stream CyberJAR</title><link>https://pi4j.com/video/20250828-live-stream-cyberjar/</link><pubDate>Thu, 28 Aug 2025 00:00:00 +0000</pubDate><guid>https://pi4j.com/video/20250828-live-stream-cyberjar/</guid><description>&lt;h2 id="chatting-about-java-javafx-and-experiments-on-the-raspberry-pi"&gt;Chatting about Java, JavaFX, and Experiments on the Raspberry Pi&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;20250828 - Live Stream with Catherine Edelveis (CyberJAR) and Frank Delporte&lt;/strong&gt;&lt;/p&gt;
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;"&gt;
 &lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share; fullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/Rmmwm6GZ98I?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"&gt;&lt;/iframe&gt;
 &lt;/div&gt;

&lt;p&gt;Java on a tiny board? JavaFX on touchscreens? In this session, Catherine is joined by Frank Delporte, Java Champion and author of &amp;lsquo;Getting started with Java on Raspberry Pi,&amp;rsquo; to explore how JavaFX fits into modern IoT/embedded workflows on Raspberry Pi.&lt;/p&gt;</description></item><item><title>RPi5 PWM NoSuchFileException</title><link>https://pi4j.com/blog/2025/20250811-rpi5-pwm-not-working/</link><pubDate>Mon, 11 Aug 2025 00:00:00 +0000</pubDate><guid>https://pi4j.com/blog/2025/20250811-rpi5-pwm-not-working/</guid><description>&lt;p&gt;2025-08-11, by Tom Aarts&lt;/p&gt;
&lt;p&gt;On the Pi5, Pi kernel updates may result in failing PWM. The
exception details will state &lt;code&gt;/sys/class/pwm/pwmchip2/npwm was not found&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A kernel code update (6.12) resulted in the objects within &lt;code&gt;/sys/class/pwm&lt;/code&gt; being numbered differently. It is most likely the PWM is using &lt;code&gt;/sys/class/pwm/pwmchip0&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Until a proper fix is available, the following change to your application should resolve this error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// Add imports&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; com.pi4j.plugin.linuxfs.provider.pwm.LinuxFsPwmProvider;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; com.pi4j.plugin.linuxfs.provider.pwm.LinuxFsPwmProviderImpl;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// Replace newAutoContext&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// Instead of:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// Context pi4j = Pi4J.newAutoContext();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// Use:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Context pi4j &lt;span style="color:#f92672"&gt;=&lt;/span&gt; Pi4J.&lt;span style="color:#a6e22e"&gt;newContextBuilder&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; .&lt;span style="color:#a6e22e"&gt;add&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; LinuxFsPwmProviderImpl(&lt;span style="color:#e6db74"&gt;&amp;#34;/sys/class/pwm/&amp;#34;&lt;/span&gt;, 0) )
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; .&lt;span style="color:#a6e22e"&gt;build&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>Java 21+ Not Working on Zero 2</title><link>https://pi4j.com/blog/2025/20250625-java-21-not-working-on-zero-2/</link><pubDate>Wed, 25 Jun 2025 00:00:00 +0000</pubDate><guid>https://pi4j.com/blog/2025/20250625-java-21-not-working-on-zero-2/</guid><description>&lt;p&gt;2025-06-25 by Frank Delporte&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Dieter Holz&lt;/strong&gt; was experimenting with Pi4J V3 on a Raspberry Pi Zero 2. Because this version requires Java 21 or newer, he upgraded his OS to a newer Java version and found out that no Java code could be executed. He tried with Java 21 and 24, and neither worked correctly, although Java 17 runs without problems.&lt;/p&gt;
&lt;p&gt;The same SD card with Java 24 that didn&amp;rsquo;t work on the Zero 2 worked perfectly on a Raspberry Pi 4. So, what is happening under the hood? What is the difference between these two boards causing this problem? Let&amp;rsquo;s dive in.&lt;/p&gt;</description></item><item><title>Starting with a Desktop Icon</title><link>https://pi4j.com/blog/2025/20250507-start-program-with-desktop-icon/</link><pubDate>Wed, 07 May 2025 00:00:00 +0000</pubDate><guid>https://pi4j.com/blog/2025/20250507-start-program-with-desktop-icon/</guid><description>&lt;p&gt;2025-05-07 by Frank Delporte&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Richard Norrie&lt;/strong&gt; created an oscilloscope with Pi4J and was looking for a way to start his application with a desktop icon. Unfortunately, he ran into a few issues as the icon led to &amp;ldquo;Java not found&amp;rdquo; error. This was likely due to environment variables not being properly set in the desktop launcher context.&lt;/p&gt;
&lt;p&gt;Here are the steps how this got fixed as you can see in this screenshot:&lt;/p&gt;</description></item><item><title>Pi4J welcomes Java 21</title><link>https://pi4j.com/blog/2025/20250211-welcome-java-21/</link><pubDate>Wed, 05 Feb 2025 00:00:00 +0000</pubDate><guid>https://pi4j.com/blog/2025/20250211-welcome-java-21/</guid><description>&lt;p&gt;2025-02-11 by Frank Delporte&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The development of the Pi4J library faced a decision point&amp;hellip;: &amp;ldquo;&lt;em&gt;Should we stick to Java 11 for existing projects and old Raspberry Pi&amp;rsquo;s (&lt;a href="https://pi4j.com/documentation/java-for-arm/"&gt;with ARMv6&lt;/a&gt;), versus moving on and making use of better and more performant Java code with the latest Long Term Support (LTS) version?&lt;/em&gt;&amp;rdquo;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We actually wanted to move on to Java 22, as it brings a new way of interacting with C-code, thanks to &lt;a href="https://openjdk.org/jeps/454" target="_blank" rel="noopener"&gt;JEP 454: Foreign Function &amp;amp; Memory API&lt;/a&gt;. As this is the core behavior of Pi4J to interact with the GPIOs, it would make it much easier to implement new ways to control electronics, as confirmed &lt;a href="https://github.com/eitch/pi4j-test/blob/develop/src/main/java/ch/eitchnet/pi4j/test/LibGPIODController.java" target="_blank" rel="noopener"&gt;with a first test by Robert &amp;ldquo;Eitch&amp;rdquo;&lt;/a&gt;. But as Java 22 is not an LTS release, we won&amp;rsquo;t make this move yet.&lt;/p&gt;</description></item><item><title>Pi4J presentation for Miami JUG</title><link>https://pi4j.com/blog/2025/20250115-miami-jug/</link><pubDate>Wed, 15 Jan 2025 00:00:00 +0000</pubDate><guid>https://pi4j.com/blog/2025/20250115-miami-jug/</guid><description>&lt;p&gt;2025-01-15 by Frank Delporte&lt;/p&gt;
&lt;p&gt;Frank Delporte was invited by the Miami JVM Group to present his journey into Java development on the Raspberry Pi. This video contains the part of the presentation that introduces Pi4J, some of its history, and its current state. We also look at a basic and more extended example, with a demo of a Vaadin and Spring Boot application controlling several electronic components.&lt;/p&gt;
&lt;p&gt;This is the 30&amp;rsquo; version about Pi4J:&lt;/p&gt;</description></item><item><title>Pi4J in Floss Weekly</title><link>https://pi4j.com/blog/2024/20241114-floss-weekly-podcast/</link><pubDate>Thu, 14 Nov 2024 00:00:00 +0000</pubDate><guid>https://pi4j.com/blog/2024/20241114-floss-weekly-podcast/</guid><description>&lt;p&gt;2024-11-14 by Frank Delporte&lt;/p&gt;
&lt;p&gt;Frank Delporte was a guest on the Floss Weekly podcast. He talked with Jonathan Bennett and David Ruggles about the Pi4J Project, the friendly Java libraries for the Raspberry Pi that expose GPIO, SPI, I2C, and other IO interfaces. Why would anyone want to use Java for the Pi? And what’s changed since the project started? You can find it in your favorite podcast app or watch the video below.&lt;/p&gt;</description></item><item><title>Maven Downloads</title><link>https://pi4j.com/blog/2024/20241104-download-stats/</link><pubDate>Mon, 04 Nov 2024 00:00:00 +0000</pubDate><guid>https://pi4j.com/blog/2024/20241104-download-stats/</guid><description>&lt;p&gt;2024-11-04 by Frank Delporte&lt;/p&gt;
&lt;p&gt;As an open-source project it&amp;rsquo;s very difficult to understand how much it&amp;rsquo;s used &amp;ldquo;in the wild&amp;rdquo;. The only stats we have, are the number of downloads from the Maven repository. So end of October I made a few screenshots to share here with the statistics including September 2024.&lt;/p&gt;
&lt;p&gt;These are the numbers for all Pi4J libraries combined. Is this much? I have no clue as I can&amp;rsquo;t compare it with a similar project. ;-)&lt;/p&gt;</description></item><item><title>Signed versus unsigned values</title><link>https://pi4j.com/blog/2024/20240927-bits-bytes-signed-unsigned/</link><pubDate>Fri, 27 Sep 2024 00:00:00 +0000</pubDate><guid>https://pi4j.com/blog/2024/20240927-bits-bytes-signed-unsigned/</guid><description>&lt;p&gt;2024-09-27, by Frank Delporte&lt;/p&gt;
&lt;p&gt;When using bits and bytes to control electronic components, the conversion from a byte to, e.g., logging output can be a bit confusing as Java uses signed values. This means a byte value has a range of -128 till 127, while you would expect 0 (0x00) till 255 (0xFF).&lt;/p&gt;
&lt;p&gt;For example, the hex value &lt;code&gt;0x8F&lt;/code&gt; (&lt;code&gt;10001111&lt;/code&gt;) is handled like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; b &lt;span style="color:#f92672"&gt;=&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;byte&lt;/span&gt;) Integer.&lt;span style="color:#a6e22e"&gt;parseInt&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;10001111&amp;#34;&lt;/span&gt;, 2);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;System.&lt;span style="color:#a6e22e"&gt;out&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;println&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Byte value 10001111: &amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt; b);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// Output&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Byte value 10001111: &lt;span style="color:#f92672"&gt;-&lt;/span&gt;113
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can use &lt;code&gt;Byte.toUnsignedInt(b)&lt;/code&gt; to get the expected, unsigned value:&lt;/p&gt;</description></item><item><title>2024 Spring Boot Starter</title><link>https://pi4j.com/video/20240611-spring-boot-starter/</link><pubDate>Tue, 11 Jun 2024 00:00:00 +0000</pubDate><guid>https://pi4j.com/video/20240611-spring-boot-starter/</guid><description>&lt;h2 id="pi4j-spring-boot-starter"&gt;Pi4J Spring Boot Starter&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;20240611 - Live Stream with DaShaun Carter and Frank Delporte&lt;/strong&gt;&lt;/p&gt;
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;"&gt;
 &lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share; fullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/I62IviQLNts?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"&gt;&lt;/iframe&gt;
 &lt;/div&gt;

&lt;p&gt;Creating a Spring Boot Starter to use Pi4J in a Spring Boot application.&lt;/p&gt;</description></item><item><title>Bosch sensor gas measurement</title><link>https://pi4j.com/blog/2024/20240517_bosch_sensor_gas_measurement/</link><pubDate>Fri, 17 May 2024 00:00:00 +0000</pubDate><guid>https://pi4j.com/blog/2024/20240517_bosch_sensor_gas_measurement/</guid><description>&lt;p&gt;2024-05-17, by Frank Delporte&lt;/p&gt;
&lt;p&gt;Bosch has several sensors which are extremely small to measure temperature, humidity, pressure, and gas. We also have several example implementations documented on the Pi4J website:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pi4j.com/examples/jbang/bme280_temperature_humidity_pressure/"&gt;BME280 Sensor (temp, humidity, pressure) via Pi4J, I2C, and JBang&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pi4j.com/examples/communityimplementation/bmp280/"&gt;BMP280 Sensor&lt;/a&gt;, example implementation by Thomas Aarts.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pi4j.com/blog/2024/20240417_led_matrix_max7219_spi_web/"&gt;LED Matrix with SPI MAX7219&lt;/a&gt;, work-in-progress for a weather station.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pi4j.com/featured-projects/sensor-drivers/"&gt;Sensor drivers&lt;/a&gt;, project by Juraj Veverka.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can find easy-to-use boards with such a sensor, for instance, on:&lt;/p&gt;</description></item><item><title>Interview Tom Aarts</title><link>https://pi4j.com/blog/2024/20240425_interview_tom_aarts/</link><pubDate>Thu, 25 Apr 2024 00:00:00 +0000</pubDate><guid>https://pi4j.com/blog/2024/20240425_interview_tom_aarts/</guid><description>&lt;p&gt;2024-04-25, by Frank Delporte&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tom Aarts&lt;/strong&gt; started contributing to the Pi4J project when he did his first commit in the &lt;a href="https://github.com/Pi4J/pi4j-example-devices/" target="_blank" rel="noopener"&gt;pi4j-example-devices repository&lt;/a&gt;. At this moment, you can find example implementations for a long list of devices (see screenshot below), using V2 of Pi4J. While creating these implementations he found and fixed some missing pieces and bugs in the core library. See, for instance, this &lt;a href="https://pi4j.com/blog/2024/20240423_pwm_rpi5/" target="_blank" rel="noopener"&gt;blog post about the ongoing PWM improvements for the Raspberry Pi 5&lt;/a&gt;. Furthermore, you can find Tom often in assisting users who &lt;a href="https://github.com/Pi4J/pi4j/issues" target="_blank" rel="noopener"&gt;filed a Pi4J V2 issue&lt;/a&gt; or &lt;a href="https://github.com/Pi4J/pi4j/discussions" target="_blank" rel="noopener"&gt;started a discussion&lt;/a&gt;.&lt;/p&gt;</description></item><item><title>PWM Hardware Support on RPi5</title><link>https://pi4j.com/blog/2024/20240423_pwm_rpi5/</link><pubDate>Tue, 23 Apr 2024 00:00:00 +0000</pubDate><guid>https://pi4j.com/blog/2024/20240423_pwm_rpi5/</guid><description>&lt;p&gt;2024-04-23, by Tom Aarts&lt;/p&gt;
&lt;p&gt;The next version of Pi4J (are now already in 2.5.2-SNAPSHOT) will add PWM support via a new provider &lt;code&gt;linuxfs-pwm&lt;/code&gt;. The previous PWM PiGpio provider does not support the Raspberry Pi 5 RP1 chip. To use this new provider, changes are required in your &lt;code&gt;pom.xml&lt;/code&gt; dependencies and Java code. The details of using this new provider are explained in the Pi4J documentation in &lt;a href="https://pi4j.com/documentation/io-examples/pwm/"&gt;Pulse Width Modulation&lt;/a&gt;. In this blog post, I want to provide extra details and an example implementation. This post reference changes when using the Bookworm OS on a Raspberry Pi 5. If you are using the &lt;code&gt;linuxfs-pwm&lt;/code&gt; provider on a Raspberry Pi 4, consult the &lt;a href="https://pi4j.com/documentation/io-examples/pwm/"&gt;Pulse Width Modulation&lt;/a&gt; for &lt;code&gt;config.sys&lt;/code&gt; and channel differences.&lt;/p&gt;</description></item><item><title>Interview Robert von Burg</title><link>https://pi4j.com/blog/2024/20240419_interview_robert_von_burg/</link><pubDate>Fri, 19 Apr 2024 00:00:00 +0000</pubDate><guid>https://pi4j.com/blog/2024/20240419_interview_robert_von_burg/</guid><description>&lt;p&gt;2024-04-19, by Frank Delporte&lt;/p&gt;
&lt;p&gt;The Pi4J project has two important Roberts. The first one is &lt;strong&gt;Robert Savage&lt;/strong&gt; (living in the US), who started the Pi4J development. You can read more about him and the reason Pi4J was created in &lt;a href="https://foojay.io/today/interviews-with-robert-savage-and-johan-vos-on-the-state-of-java-on-raspberry-pi/" target="_blank" rel="noopener"&gt;this interview on Foojay&lt;/a&gt;. He also created V2 of Pi4J, but hasn&amp;rsquo;t been involved a lot in the project since its release. Luckily, we have another Robert in &lt;a href="https://pi4j.com/about/team/" target="_blank" rel="noopener"&gt;the Pi4J team&lt;/a&gt;! &lt;strong&gt;Robert von Burg&lt;/strong&gt; (living in Switzerland), also known as &lt;strong&gt;Eitch&lt;/strong&gt;, is the &lt;a href="https://github.com/Pi4J/pi4j" target="_blank" rel="noopener"&gt;main maintainer now of the Pi4J V2 sources&lt;/a&gt; and takes care of the releases.&lt;/p&gt;</description></item><item><title>Ongoing I2C Improvements</title><link>https://pi4j.com/blog/2024/20240418_i2c_improvements/</link><pubDate>Thu, 18 Apr 2024 00:00:00 +0000</pubDate><guid>https://pi4j.com/blog/2024/20240418_i2c_improvements/</guid><description>&lt;p&gt;2024-04-17, by Frank Delporte&lt;/p&gt;
&lt;p&gt;Robert von Burg is working on improvements of the I2C implementation in Pi4J in preparation for the next release. The changes are in &lt;a href="https://github.com/Pi4J/pi4j/pull/351/files" target="_blank" rel="noopener"&gt;pull request #351&lt;/a&gt;. It&amp;rsquo;s still work-in-progress but will bring these improvements:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;New &lt;code&gt;I2C.execute(Callable)&lt;/code&gt; method to allow to atomically execute multiple I2C calls in a thread in a safe way.&lt;/li&gt;
&lt;li&gt;New &lt;code&gt;I2C.writeRead(byte[], byte[])&lt;/code&gt; method to atomically perform a &lt;code&gt;write&lt;/code&gt;, immediately followed by a &lt;code&gt;read&lt;/code&gt; on the I2C bus.&lt;/li&gt;
&lt;li&gt;Fix an issue where the &lt;code&gt;LinuxFsI2CBus&lt;/code&gt; was closed when closing an I2C device. This can lead to errors as another device might still be open on the same bus, and an operation on the underlying &lt;code&gt;RandomAccessFile&lt;/code&gt; would lead to exceptions.&lt;/li&gt;
&lt;li&gt;Fix a workaround that required an &lt;code&gt;I2C.read()&lt;/code&gt; on a newly created &lt;code&gt;LinuxFsI2C&lt;/code&gt; device, if the first call was an &lt;code&gt;ioctl&lt;/code&gt;. The device was not selected prior to the &lt;code&gt;ioctl&lt;/code&gt; call.&lt;/li&gt;
&lt;li&gt;Additional code cleanup and more to come&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This kind of methods is hard to test in unit tests as they interact with real components and need to handle the data and I2C devices depending on the interaction. As a solution, Robert is using a &lt;a href="https://github.com/eitch/pi4j-test/tree/feature/eitch-leds" target="_blank" rel="noopener"&gt;test project&lt;/a&gt; that has an implementation for an OLED display over I2C, using these commands.&lt;/p&gt;</description></item><item><title>LED Matrix with SPI MAX7219</title><link>https://pi4j.com/blog/2024/20240417_led_matrix_max7219_spi_web/</link><pubDate>Wed, 17 Apr 2024 00:00:00 +0000</pubDate><guid>https://pi4j.com/blog/2024/20240417_led_matrix_max7219_spi_web/</guid><description>&lt;p&gt;2024-04-18, by Frank Delporte&lt;/p&gt;
&lt;p&gt;Roberto Marquez shared a project with us that uses Java to interface with a MAX7219 SPI device to control an LED matrix. It&amp;rsquo;s inspired by the blog &lt;a href="https://www.hackerspacetech.com/raspberry-pi-and-spi-8x8-led-matrix-example-with-java-and-pi4j/" target="_blank" rel="noopener"&gt;Raspberry Pi and SPI 8×8 LED matrix example with Java and Pi4j&lt;/a&gt;, but differs in that it is Web-enabled via Spring Boot. This project is the starting point to create a weather station in combination with the BMP280, see &lt;a href="https://pi4j.com/examples/jbang/bme280_temperature_humidity_pressure/" target="_blank" rel="noopener"&gt;BME280 Sensor (temp, humidity, pressure) via Pi4J, I2C, and JBang&lt;/a&gt;.&lt;/p&gt;</description></item><item><title>Alexander Liggesmeyer and RPi5</title><link>https://pi4j.com/blog/2024/20240318_interview_alexander_liggesmeyer/</link><pubDate>Mon, 18 Mar 2024 00:00:00 +0000</pubDate><guid>https://pi4j.com/blog/2024/20240318_interview_alexander_liggesmeyer/</guid><description>&lt;p&gt;2024-03-18, by Frank Delporte&lt;/p&gt;
&lt;h2 id="interview-with-alexander-liggesmeyer-about-pi4j-for-raspberry-pi-5"&gt;Interview with Alexander Liggesmeyer about Pi4J for Raspberry Pi 5&lt;/h2&gt;
&lt;p&gt;Today, &lt;a href="https://pi4j.com/about/release-notes/"&gt;version 2.5.0 of Pi4J got released with many changes, fixes and improvements&lt;/a&gt;. The most important one being support for the &lt;a href="https://www.raspberrypi.com/products/raspberry-pi-5/" target="_blank" rel="noopener"&gt;Raspberry Pi 5&lt;/a&gt;. Short after the release of this new board, &lt;a href="https://github.com/Pi4J/pi4j/issues/321" target="_blank" rel="noopener"&gt;several issues were raised on GitHub&lt;/a&gt; as Pi4J was not compatible. The Raspberry Pi 5 uses a completely new way to interact with the GPIOs: the &lt;a href="https://www.raspberrypi.com/documentation/microcontrollers/rp1.html" target="_blank" rel="noopener"&gt;RP1 chip&lt;/a&gt;. Thanks to this chip, GPIO, SPI, I2C, USB, ethernet,&amp;hellip; are seperated from the SoC to make it easier to develop newer boards. But this new approach wasn&amp;rsquo;t supported by the PiGpio library used in Pi4J V2&amp;hellip; Until Alexander Liggesmeyer took up the challenge to find a solution!&lt;/p&gt;</description></item><item><title>2023 LED strips with JBang</title><link>https://pi4j.com/video/20231012-led-strips/</link><pubDate>Thu, 12 Oct 2023 00:00:00 +0000</pubDate><guid>https://pi4j.com/video/20231012-led-strips/</guid><description>&lt;h2 id="having-fun-with-led-strips-with-java-on-the-raspberry-pi"&gt;Having fun with LED strips with Java on the Raspberry Pi&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;20231012 - Live Stream&lt;/strong&gt;&lt;/p&gt;
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;"&gt;
 &lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share; fullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/eToIXACqSuY?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"&gt;&lt;/iframe&gt;
 &lt;/div&gt;

&lt;p&gt;Frank Delporte and Robert von Burg (aka Eitch) take a look at examples using JBang and Pixelblaze, which are described on the Pi4J website at &lt;a href="https://www.pi4j.com/examples/jbang/pixelblaze_output_expander/" target="_blank" rel="noopener"&gt;https://www.pi4j.com/examples/jbang/pixelblaze_output_expander/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This was our first live stream using restream.io to see if we could create tutorials like this. This went smoothly for the first 44 minutes, and then I lost connection with Robert. But luckily, at that time, we had already explained almost everything we wanted to tell ;-)&lt;/p&gt;</description></item><item><title>2023 Vaadin WebUI</title><link>https://pi4j.com/video/20230822-vaadin-webui/</link><pubDate>Tue, 22 Aug 2023 00:00:00 +0000</pubDate><guid>https://pi4j.com/video/20230822-vaadin-webui/</guid><description>&lt;h2 id="controlling-electronics-with-java-and-pi4j-through-a-web-interface"&gt;Controlling Electronics with Java and Pi4J through a web interface&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;20230822 - J-Spring, The Netherlands&lt;/strong&gt;&lt;/p&gt;
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;"&gt;
 &lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share; fullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/FXKsBKKB_Xg?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"&gt;&lt;/iframe&gt;
 &lt;/div&gt;

&lt;p&gt;Java is not only the server language running on heavy machines! You can do amazing stuff with it on a small single-board computer and gain new knowledge simultaneously, like controlling electronic components and different communication protocols.&lt;/p&gt;</description></item><item><title>LED strip with Pi4J and JBang</title><link>https://pi4j.com/blog/2022/20221128_led_strip_with_jbang/</link><pubDate>Mon, 28 Nov 2022 00:00:00 +0000</pubDate><guid>https://pi4j.com/blog/2022/20221128_led_strip_with_jbang/</guid><description>&lt;p&gt;2022-11-28, by Robert von Burg&lt;/p&gt;
&lt;h2 id="intro"&gt;Intro&lt;/h2&gt;
&lt;p&gt;In an earlier post, JBang and Pi4J were used to control a LED and button connected to a Raspberry Pi.&lt;/p&gt;
&lt;p&gt;This week Robert von Burg, one of the main contributors of the Pi4J project, &lt;a href="https://mstdn.gsi.li/@eitch/109324090007015888" target="_blank" rel="noopener"&gt;shared on Mastodon&lt;/a&gt; another project where a LED strip is controlled via I2C.&lt;/p&gt;
&lt;p&gt;This is the result, notice the Foojay.io startup artwork 😉&lt;/p&gt;

 &lt;div
 style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;"&gt;
 &lt;iframe
 src="https://player.vimeo.com/video/771087170?dnt=0"
 style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allow="fullscreen"&gt;
 &lt;/iframe&gt;
 &lt;/div&gt;

&lt;h2 id="wiring"&gt;Wiring&lt;/h2&gt;
&lt;p&gt;The Raspberry Pi in the video is attached to a custom PCB used by Robert in &lt;a href="https://pi4j.com/featured-projects/soft-real-time-plc-written-in-strolch/" target="_blank" rel="noopener"&gt;medical cabinets&lt;/a&gt;.&lt;/p&gt;</description></item><item><title>Kotlin on the Raspberry Pi</title><link>https://pi4j.com/blog/2022/20221117_kotlin_on_raspberrypi/</link><pubDate>Thu, 17 Nov 2022 00:00:00 +0000</pubDate><guid>https://pi4j.com/blog/2022/20221117_kotlin_on_raspberrypi/</guid><description>&lt;p&gt;2022-11-17, by Muhammad Hashim&lt;/p&gt;
&lt;h2 id="intro"&gt;Intro&lt;/h2&gt;
&lt;p&gt;Pi4J is considered the project that brought the JVM to the RaspberryPi.&lt;/p&gt;
&lt;p&gt;It has been up for more than a decade allowing developers to write sophisticated, high-level, yet simple software on the RaspberryPi.&lt;/p&gt;
&lt;p&gt;And we’re glad to make it even more simpler and powerful!&lt;/p&gt;
&lt;p&gt;For quite some years now Kotlin has been a most welcome language in the JVM ecosystem and the modern development toolchain.&lt;/p&gt;</description></item><item><title>Getting Started Template</title><link>https://pi4j.com/blog/2022/20220113_javafx_pi4j_template/</link><pubDate>Thu, 13 Jan 2022 00:00:00 +0000</pubDate><guid>https://pi4j.com/blog/2022/20220113_javafx_pi4j_template/</guid><description>&lt;p&gt;2022-01-13, by Frank Delporte&lt;/p&gt;
&lt;h2 id="intro"&gt;Intro&lt;/h2&gt;
&lt;p&gt;The Pi4J project wants to be the starting point for everyone who wants to use Java on the Raspberry Pi, being it a headless, JavaFX-user interface and/or GPIO-controller project.&lt;/p&gt;
&lt;p&gt;Pi4J is intended to provide a friendly object-oriented I/O API and implementation libraries for Java Programmers to access the full I/O capabilities of the Raspberry Pi platform. This project abstracts the low-level native integration and interrupt monitoring to enable Java programmers to focus on implementing their application business logic.&lt;/p&gt;</description></item><item><title>2022 Building Smart Devices</title><link>https://pi4j.com/video/20221014-building-smart-devices/</link><pubDate>Thu, 14 Oct 2021 00:00:00 +0000</pubDate><guid>https://pi4j.com/video/20221014-building-smart-devices/</guid><description>&lt;h2 id="building-smart-devices-using-java-on-the-raspberry-pi"&gt;Building Smart Devices using Java on the Raspberry Pi&lt;/h2&gt;
&lt;h3 id="an-intro-to-pi4j-by-frank-delporte"&gt;An intro to Pi4J by Frank Delporte&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;20121014 - Devoxx Belgium&lt;/strong&gt;&lt;/p&gt;
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;"&gt;
 &lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share; fullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/lnV0Hn2tias?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"&gt;&lt;/iframe&gt;
 &lt;/div&gt;

&lt;p&gt;A Raspberry Pi is a full Linux PC with a small form factor and a low price of between 6 and 95€. And of course, you can run Java on it. The same kind of JVM applications you know, love, and use on heavy machines can also be used on the Raspberry Pi. &amp;ldquo;Write once, run everywhere&amp;rdquo;? Ah yes, that&amp;rsquo;s the promise of Java! But this small board has some additional possibilities you will not find on that fancy server you are running somewhere in the cloud.&lt;/p&gt;</description></item><item><title>2021 Electronics on RPi</title><link>https://pi4j.com/video/20210211-electronics-on-rpi/</link><pubDate>Thu, 11 Feb 2021 00:00:00 +0000</pubDate><guid>https://pi4j.com/video/20210211-electronics-on-rpi/</guid><description>&lt;h2 id="java-javafx-and-electronics-programming-on-the-raspberry-pi"&gt;Java, JavaFX, and electronics programming on the Raspberry Pi&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;20210211 - PL JUGs United, Online&lt;/strong&gt;&lt;/p&gt;
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;"&gt;
 &lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share; fullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/J_Nigj0MfFk?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"&gt;&lt;/iframe&gt;
 &lt;/div&gt;

&lt;p&gt;Java, JavaFX and a Raspberry Pi are an ideal combination for any project where you want to connect software and hardware (LEDs, buttons, sensors&amp;hellip;) with a beautiful, easy-to-use user interface. In this talk, we will go through the process of building some example Java applications which use electronic components connected to a Raspberry Pi.&lt;/p&gt;</description></item><item><title>2021 Future of Java on RPi</title><link>https://pi4j.com/video/20210207-future-of-java-on-rpi/</link><pubDate>Sun, 07 Feb 2021 00:00:00 +0000</pubDate><guid>https://pi4j.com/video/20210207-future-of-java-on-rpi/</guid><description>&lt;h2 id="the-future-of-java-on-raspberry-pi"&gt;The Future of Java on Raspberry Pi&lt;/h2&gt;
&lt;h3 id="java-javafx-raspberry-pi-and-electronics"&gt;Java, JavaFX, Raspberry Pi and Electronics&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;20210207 - Fosdem “Friends of OpenJDK devroom”, Online&lt;/strong&gt;&lt;/p&gt;
&lt;video width="640" height="360" controls&gt;
 &lt;source src="https://mirrors.dotsrc.org/fosdem/2021/D.openjdk/javaraspberrypi.webm" type="video/webm"&gt;
 Your browser does not support the video tag.
&lt;/video&gt;
&lt;p&gt;Java on the Raspberry Pi is still a controversial topic, but recent evolutions of both the JDK and OpenJFX have proven they are a perfect match! In this talk we will look into some examples and discuss what could be the next steps.&lt;/p&gt;</description></item><item><title>2013 JavaOne Interview</title><link>https://pi4j.com/video/20130907-javaone-interview/</link><pubDate>Sat, 07 Sep 2013 00:00:00 +0000</pubDate><guid>https://pi4j.com/video/20130907-javaone-interview/</guid><description>&lt;h2 id="javaone-interview-with-robert-savage"&gt;JavaOne Interview with Robert Savage&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;20130907 - Live Interview&lt;/strong&gt;&lt;/p&gt;
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;"&gt;
 &lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share; fullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/Z_eI7DfDMjI?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"&gt;&lt;/iframe&gt;
 &lt;/div&gt;

&lt;p&gt;Live interview with Robert Savage, creator of Pi4J, a Java framework for doing physical computing with Raspberry Pi and Java.&lt;/p&gt;</description></item><item><title>Annotated provisioning</title><link>https://pi4j.com/architecture/advanced/annotated-provisioning/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/architecture/advanced/annotated-provisioning/</guid><description>&lt;div class="notices warning" &gt;&lt;p&gt;To simplify the initial V2 version, the DI implementation has be removed so it could be
refactored and extended later. It is still available in the branch
&lt;a href="https://github.com/Pi4J/pi4j/tree/feature/%2322-annotations" target="_blank" rel="noopener"&gt;#22-annotations&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Next to the declarative approach, Java annotations are available for the configuration of I/O provisioning instead
of the hard-coded approach offered in V1.&lt;/p&gt;
&lt;p&gt;This implementation still needs to be further fine-tuned and unified somehow to make things cleaner and more
straightforward, but would provide a way to initialize a I/O for instance like this:&lt;/p&gt;</description></item><item><title>Dependency injection</title><link>https://pi4j.com/architecture/advanced/dependency-injection/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/architecture/advanced/dependency-injection/</guid><description>&lt;div class="notices warning" &gt;&lt;p&gt;To simplify the initial V2 version, the DI implementation has be removed so it could be
refactored and extended later. It is still available in the branch
&lt;a href="https://github.com/Pi4J/pi4j/tree/feature/%2322-annotations" target="_blank" rel="noopener"&gt;#22-annotations&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Along with the annotated I/O configuration the ability to support I/O provisioning via dependency injection also
makes a lot of sense. There is some basic brute-force stuff working but this needs more work to make this a compatible
implementation for Spring or CDI.&lt;/p&gt;</description></item><item><title>Native Library Path</title><link>https://pi4j.com/architecture/advanced/library-path/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/architecture/advanced/library-path/</guid><description>&lt;h2 id="overview"&gt;Overview&lt;/h2&gt;
&lt;p&gt;Some Pi4J plugins, such as the Pi4J PiGpio Provider plugin, depend on native JNI libraries to communicate with the
underlying system. By default Pi4J embeds these native libraries as resources inside the plugin&amp;rsquo;s JAR file. At
runtime Pi4J extracts the native library into a temporary directory so the JVM can load the library from the filesystem.
Upon termination the temporary file is automatically removed.&lt;/p&gt;
&lt;p&gt;This automatic extration behavior works well for most users; however, there are certain edge cases where this may fail.
On failure, its common to see a &lt;code&gt;UnsatisfiedLinkError&lt;/code&gt; on startup of your application or when you create a Pi4J context.
Edge cases such as the following may require customization of the runtime to deal with native library loading.&lt;/p&gt;</description></item><item><title>Plug-ins</title><link>https://pi4j.com/architecture/advanced/plugins/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/architecture/advanced/plugins/</guid><description>&lt;p&gt;The goal of Pi4J V2+ is to provide a solid base with all required &amp;ldquo;minimal functionality&amp;rdquo; while at the same time, promote third-party development and extensibility, thus enabling developers to build and maintain their extensions outside of the Pi4J core projects codebase.&lt;/p&gt;
&lt;p&gt;This will enable us to deliver a stable, fully tested framework as the number of features inside of Pi4J can be limited and support for specific I/O hardware can be provided with an extension for Pi4J.&lt;/p&gt;</description></item><item><title>Raspberry Pi</title><link>https://pi4j.com/documentation/platforms/raspberry-pi/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/documentation/platforms/raspberry-pi/</guid><description>&lt;p&gt;Pi4J was designed for the Raspberry Pi, so this is the only supported platform (at this moment), although the architecture of the project allows other platforms to be added.&lt;/p&gt;
&lt;p&gt;Add this dependency to include the Raspberry Pi Platform Plugin.&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt; &amp;lt;dependency&amp;gt;
 &amp;lt;groupId&amp;gt;com.pi4j&amp;lt;/groupId&amp;gt;
 &amp;lt;artifactId&amp;gt;pi4j-plugin-raspberrypi&amp;lt;/artifactId&amp;gt;
 &amp;lt;version&amp;gt;${pi4j.version}&amp;lt;/version&amp;gt;
 &amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</description></item><item><title>Remote support</title><link>https://pi4j.com/architecture/advanced/remote-support/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/architecture/advanced/remote-support/</guid><description>&lt;p&gt;One of the big features on the wish-list for V2+: native support for remote I/O capability. Predominantly to support
the ability for a user to perform development work on their desktop/laptop and be able to run their project with
remote support slaving the I/O to a daemon running on the Raspberry Pi (or other supported SBC).&lt;/p&gt;

&lt;div class="notices warning" &gt;&lt;p&gt;TO BE DECIDED: the V2+ codebase does support this currently by using the PiGpio daemon.&lt;br&gt;
This may be an OK place to start for the first release, but a separate Pi4J daemon may be ideal for a long term
solution to capture some of the edge cases and provide remote I/O capability no matter which underlying I/O library
is being used.&lt;/p&gt;</description></item></channel></rss>