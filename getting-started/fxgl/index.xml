<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Game development with FXGL on Pi4J</title><link>https://pi4j.com/getting-started/fxgl/</link><description>Recent content in Game development with FXGL on Pi4J</description><generator>Hugo</generator><language>en-us</language><atom:link href="https://pi4j.com/getting-started/fxgl/index.xml" rel="self" type="application/rss+xml"/><item><title>FXGl to Picade</title><link>https://pi4j.com/getting-started/fxgl/fxgl-to-picade/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/getting-started/fxgl/fxgl-to-picade/</guid><description>GITHUB PROJECT: https://github.com/Pi4J/pi4j-example-fxgl
In this section we demonstrate how to convert existing FXGL projects to work on a RaspberryPi
If you don&amp;rsquo;t have an existing FXGL project, go grab one from FXGLGames
Steps to get your app running on a RaspberryPi Add Maven support to your project In our project we use Maven to manage dependencies and build the application, other build tools such as gradle are also viable but not covered in this tutorial.</description></item><item><title>JavaFX kiosk mode</title><link>https://pi4j.com/getting-started/fxgl/kiosk-mode/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/getting-started/fxgl/kiosk-mode/</guid><description>Visit webtechie.be for the full blogpost
Kiosk Mode With Gluon&amp;rsquo;s JavaFX 17-ea, we are able to run applications in different modes: Desktop and Kiosk mode. In this post we focus on the Kiosk mode only.
With this approach, the application is the only thing you see on the screen. This prevents the user to open any other applications, or mess up your system. In this case, there is no need for a window manager, and the application directly uses the underlying (hardware) framebuffer.</description></item></channel></rss>