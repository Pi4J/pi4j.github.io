<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ADS1115 on Pi4J</title><link>https://pi4j.com/tags/ads1115/</link><description>Recent content in ADS1115 on Pi4J</description><generator>Hugo</generator><language>en-us</language><atom:link href="https://pi4j.com/tags/ads1115/index.xml" rel="self" type="application/rss+xml"/><item><title>Component Examples</title><link>https://pi4j.com/examples/components/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/examples/components/</guid><description>&lt;p&gt;The FHNW University contributed a full project with example implementations of the following devices.&lt;/p&gt;
&lt;h3 id="current-available-components"&gt;Current available components&lt;/h3&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th style="text-align: left"&gt;Device(s)&lt;/th&gt;
 &lt;th style="text-align: left"&gt;Developed by&lt;/th&gt;
 &lt;th style="text-align: left"&gt;Link&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td style="text-align: left"&gt;&lt;a href="https://pi4j.com/examples/components/simplebutton"&gt;Simple Button&lt;/a&gt;&lt;/td&gt;
 &lt;td style="text-align: left"&gt;Reto Stutz, Mike Schoder&lt;/td&gt;
 &lt;td style="text-align: left"&gt;&lt;a href="https://github.com/Pi4J/pi4j-example-components/blob/main/src/main/java/com/pi4j/catalog/applications/SimpleButton_App.java" target="_blank" rel="noopener"&gt;Example Devices&lt;/a&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td style="text-align: left"&gt;&lt;a href="https://pi4j.com/examples/components/simpleled"&gt;Simple LED&lt;/a&gt;&lt;/td&gt;
 &lt;td style="text-align: left"&gt;Reto Stutz, Mike Schoder&lt;/td&gt;
 &lt;td style="text-align: left"&gt;&lt;a href="https://github.com/Pi4J/pi4j-example-components/blob/main/src/main/java/com/pi4j/catalog/applications/SimpleLed_App.java" target="_blank" rel="noopener"&gt;Example Devices&lt;/a&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td style="text-align: left"&gt;&lt;a href="https://pi4j.com/examples/components/ads1115"&gt;AD Converter ADS1115&lt;/a&gt;&lt;/td&gt;
 &lt;td style="text-align: left"&gt;Reto Stutz, Mike Schoder&lt;/td&gt;
 &lt;td style="text-align: left"&gt;&lt;a href="https://github.com/Pi4J/pi4j-example-components/blob/main/src/main/java/com/pi4j/catalog/applications/Ads1115_App.java" target="_blank" rel="noopener"&gt;Example Devices&lt;/a&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td style="text-align: left"&gt;&lt;a href="https://pi4j.com/examples/components/buzzer"&gt;Buzzer&lt;/a&gt;&lt;/td&gt;
 &lt;td style="text-align: left"&gt;Reto Stutz, Mike Schoder&lt;/td&gt;
 &lt;td style="text-align: left"&gt;&lt;a href="https://github.com/Pi4J/pi4j-example-components/blob/main/src/main/java/com/pi4j/catalog/applications/Buzzer_App.java" target="_blank" rel="noopener"&gt;Example Devices&lt;/a&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td style="text-align: left"&gt;&lt;a href="https://pi4j.com/examples/components/camera"&gt;Camera&lt;/a&gt;&lt;/td&gt;
 &lt;td style="text-align: left"&gt;Reto Stutz, Mike Schoder&lt;/td&gt;
 &lt;td style="text-align: left"&gt;&lt;a href="https://github.com/Pi4J/pi4j-example-components/blob/main/src/main/java/com/pi4j/catalog/applications/Camera_App.java" target="_blank" rel="noopener"&gt;Example Devices&lt;/a&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td style="text-align: left"&gt;&lt;a href="https://pi4j.com/examples/components/joystick"&gt;Joystick&lt;/a&gt;&lt;/td&gt;
 &lt;td style="text-align: left"&gt;Reto Stutz, Mike Schoder&lt;/td&gt;
 &lt;td style="text-align: left"&gt;&lt;a href="https://github.com/Pi4J/pi4j-example-components/blob/main/src/main/java/com/pi4j/catalog/applications/Joystick_App.java" target="_blank" rel="noopener"&gt;Example Devices&lt;/a&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td style="text-align: left"&gt;&lt;a href="https://pi4j.com/examples/components/joystickanalog"&gt;Joystick Analog&lt;/a&gt;&lt;/td&gt;
 &lt;td style="text-align: left"&gt;Reto Stutz, Mike Schoder&lt;/td&gt;
 &lt;td style="text-align: left"&gt;&lt;a href="https://github.com/Pi4J/pi4j-example-components/blob/main/src/main/java/com/pi4j/catalog/applications/JoystickAnalog_App.java" target="_blank" rel="noopener"&gt;Example Devices&lt;/a&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td style="text-align: left"&gt;&lt;a href="https://pi4j.com/examples/components/lcddisplay"&gt;LCD Display&lt;/a&gt;&lt;/td&gt;
 &lt;td style="text-align: left"&gt;Reto Stutz, Mike Schoder&lt;/td&gt;
 &lt;td style="text-align: left"&gt;&lt;a href="https://github.com/Pi4J/pi4j-example-components/blob/main/src/main/java/com/pi4j/catalog/applications/LcdDisplay_App.java" target="_blank" rel="noopener"&gt;Example Devices&lt;/a&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td style="text-align: left"&gt;&lt;a href="https://pi4j.com/examples/components/ledbutton"&gt;LED Button&lt;/a&gt;&lt;/td&gt;
 &lt;td style="text-align: left"&gt;Reto Stutz, Mike Schoder&lt;/td&gt;
 &lt;td style="text-align: left"&gt;&lt;a href="https://github.com/Pi4J/pi4j-example-components/blob/main/src/main/java/com/pi4j/catalog/applications/LedButton_App.java" target="_blank" rel="noopener"&gt;Example Devices&lt;/a&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td style="text-align: left"&gt;&lt;a href="https://pi4j.com/examples/components/ledmatrix"&gt;LED Matrix&lt;/a&gt;&lt;/td&gt;
 &lt;td style="text-align: left"&gt;Reto Stutz, Mike Schoder&lt;/td&gt;
 &lt;td style="text-align: left"&gt;&lt;a href="https://github.com/Pi4J/pi4j-example-components/blob/main/src/main/java/com/pi4j/catalog/applications/LedMatrix_App.java" target="_blank" rel="noopener"&gt;Example Devices&lt;/a&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td style="text-align: left"&gt;&lt;a href="https://pi4j.com/examples/components/ledstrip"&gt;LED Strip&lt;/a&gt;&lt;/td&gt;
 &lt;td style="text-align: left"&gt;Reto Stutz, Mike Schoder&lt;/td&gt;
 &lt;td style="text-align: left"&gt;&lt;a href="https://github.com/Pi4J/pi4j-example-components/blob/main/src/main/java/com/pi4j/catalog/applications/LedStrip_App.java" target="_blank" rel="noopener"&gt;Example Devices&lt;/a&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td style="text-align: left"&gt;&lt;a href="https://pi4j.com/examples/components/potentiometer"&gt;Potentiometer&lt;/a&gt;&lt;/td&gt;
 &lt;td style="text-align: left"&gt;Reto Stutz, Mike Schoder&lt;/td&gt;
 &lt;td style="text-align: left"&gt;&lt;a href="https://github.com/Pi4J/pi4j-example-components/blob/main/src/main/java/com/pi4j/catalog/applications/Potentiometer_App.java" target="_blank" rel="noopener"&gt;Example Devices&lt;/a&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td style="text-align: left"&gt;&lt;a href="https://pi4j.com/examples/components/servo"&gt;Servo Motor&lt;/a&gt;&lt;/td&gt;
 &lt;td style="text-align: left"&gt;Reto Stutz, Mike Schoder&lt;/td&gt;
 &lt;td style="text-align: left"&gt;&lt;a href="https://github.com/Pi4J/pi4j-example-components/blob/main/src/main/java/com/pi4j/catalog/applications/Servo_App.java" target="_blank" rel="noopener"&gt;Example Devices&lt;/a&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="simple-implementation"&gt;Simple Implementation&lt;/h3&gt;
&lt;p&gt;For a Simple Implementation, the recommendation is to use the &lt;a href="https://github.com/Pi4J/pi4j-example-components/tree/main/src/main/java/com/pi4j/catalog/Launcher.java" target="_blank" rel="noopener"&gt;Launcher Class&lt;/a&gt;.
With this, a simple application can be started.&lt;/p&gt;</description></item><item><title>Sensor drivers</title><link>https://pi4j.com/featured-projects/sensor-drivers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/featured-projects/sensor-drivers/</guid><description>&lt;p&gt;In case you want to read the data from various I2C sensors connected to Raspberry Pi
the difficult part is usually writing a piece of code which talks to the I2C sensor.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/jveverka/rpi-projects/tree/pi4j-v2/rpi-drivers" target="_blank" rel="noopener"&gt;rpi-drivers&lt;/a&gt;
is a Java library by &lt;strong&gt;Juraj Veverka&lt;/strong&gt; implementing simple APIs and communication code for some
widely used I2C sensors. You can easily measure temperature, pressure and humidity,
get ambient light intensity or measure voltage in your java Raspberry Pi projects.&lt;/p&gt;</description></item><item><title>AD Converter ADS1115</title><link>https://pi4j.com/examples/components/ads1115/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/examples/components/ads1115/</guid><description>&lt;h3 id="description"&gt;Description&lt;/h3&gt;
&lt;p&gt;The Analog Digital Converter &lt;a href="https://github.com/Pi4J/pi4j-example-components/tree/main/src/main/java/com/pi4j/catalog/components/Ads1115.java" target="_blank" rel="noopener"&gt;Ads1115&lt;/a&gt; is a template class, that you can use in your own Java-project.
The ADS1115 device is a precision, low-power, 16-bit, I2C-compatible, analog-to-digital converter (ADCs). The ADS1115 device incorporates a low-drift voltage reference and an oscillator as well as a programmable gain amplifier (PGA) and
a digital comparator. These features, along with a wide operating supply range, makes the ADS1115 well suited for power- and space-constrained, sensor measurement applications.&lt;/p&gt;</description></item><item><title>Joystick Analog</title><link>https://pi4j.com/examples/components/joystickanalog/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/examples/components/joystickanalog/</guid><description>&lt;h3 id="description"&gt;Description&lt;/h3&gt;
&lt;p&gt;The &lt;a href="https://github.com/Pi4J/pi4j-example-components/tree/main/src/main/java/com/pi4j/catalog/components/JoystickAnalog.java" target="_blank" rel="noopener"&gt;JoystickAnalog&lt;/a&gt; is a template class, that you can use in your own Java-project.
The template class is created for an analog joystick, for example the KY-023, which consists of two potentiometers, one for the X-axis and one for the Y-axis. But any joystick with two potentiometers will meet the requirements.&lt;/p&gt;
&lt;p&gt;The basic functions of the template class are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;return of a normalized value, optionally between 0 and 1 or between -1 and 1, of the X-axis and the Y-axis&lt;/li&gt;
&lt;li&gt;creation of simple events at a value change of the X-axis or the Y-axis, simple event handlers for button pressed, button depressed, while button is pressed&lt;/li&gt;
&lt;li&gt;calibration of the center position of the joystick (center position 0.5 at a normalized value between 0 and 1, center position 0 at a normalized value between -1 and 1)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="layout"&gt;Layout&lt;/h3&gt;
&lt;p&gt;&lt;img src="https://pi4j.com/assets/examples/components/components/Layout-JoystickAnalog.png" alt="Joystick Layout"&gt;&lt;/p&gt;</description></item><item><title>Potentiometer</title><link>https://pi4j.com/examples/components/potentiometer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/examples/components/potentiometer/</guid><description>&lt;h3 id="description"&gt;Description&lt;/h3&gt;
&lt;p&gt;The &lt;a href="https://github.com/Pi4J/pi4j-example-components/tree/main/src/main/java/com/pi4j/catalog/components/Potentiometer.java" target="_blank" rel="noopener"&gt;Potentiometer&lt;/a&gt; is a template class, that you can use in your own Java-project.
The constructor of the class requires an ADS1115 object. In addition, the channel, with which the AD converter evaluates the current position of the sliding contact must be defined. For normalization, the maximum voltage that can drop across the sliding contact must also be specified. Any commercially available potentiometer with three connections (fixed resistor and the slider) can be evaluated with this class.&lt;/p&gt;</description></item></channel></rss>