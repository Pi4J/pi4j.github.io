<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Java on Pi4J</title><link>https://pi4j.com/tags/java/</link><description>Recent content in Java on Pi4J</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Wed, 05 Feb 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://pi4j.com/tags/java/index.xml" rel="self" type="application/rss+xml"/><item><title>Pi4J welcomes Java 21</title><link>https://pi4j.com/blog/2025/20250205-welcome-java-21/</link><pubDate>Wed, 05 Feb 2025 00:00:00 +0000</pubDate><guid>https://pi4j.com/blog/2025/20250205-welcome-java-21/</guid><description>&lt;p>2025-02-05 by Frank Delporte&lt;/p>
&lt;p>The development of the Pi4J library faced a decision point&amp;hellip;&lt;/p>
&lt;p>&lt;em>&lt;strong>Stick to Java 11 for existing projects and old Raspberry Pi&amp;rsquo;s (&lt;a href="https://pi4j.com/documentation/java-for-arm/">with ARMv6&lt;/a>), versus moving on and making use of better and more performant Java code with the latest Long Term Support (LTS) version?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>We actually wanted to move on to Java 22, as it brings a new way of interacting with C-code, thanks to &lt;a href="https://openjdk.org/jeps/454" target="_blank" rel="noopener">JEP 454: Foreign Function &amp;amp; Memory API&lt;/a>. As this is the core behavior of Pi4J to interact with the GPIOs, it would make it much easier to implement new ways to control electronics, as confirmed &lt;a href="https://github.com/eitch/pi4j-test/blob/develop/src/main/java/ch/eitchnet/pi4j/test/LibGPIODController.java" target="_blank" rel="noopener">with a first test by Robert &amp;ldquo;Eitch&amp;rdquo;&lt;/a>. But as Java 22 is not an LTS release, we won&amp;rsquo;t make this move yet.&lt;/p></description></item></channel></rss>