<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Maven on Pi4J</title><link>https://pi4j.com/tags/maven/</link><description>Recent content in Maven on Pi4J</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Mon, 04 Nov 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://pi4j.com/tags/maven/index.xml" rel="self" type="application/rss+xml"/><item><title>Developing on a remote PC</title><link>https://pi4j.com/getting-started/developing-on-a-remote-pc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/getting-started/developing-on-a-remote-pc/</guid><description>&lt;div class="notices tip" >&lt;p>GITHUB PROJECT: &lt;a href="https://github.com/Pi4J/pi4j-maven-archetype" target="_blank" rel="noopener">https://github.com/Pi4J/pi4j-maven-archetype&lt;/a>&lt;/p>
&lt;/div>

&lt;h2 id="developing-java-programs-using-a-remote-pc-workstation">Developing Java programs using a remote PC workstation&lt;/h2>
&lt;p>Writing your Java program, compiling and running it directly on the Raspberry Pi board
as shown in the previous chapter is perfectly fine, of course,
but there is an alternative way to arrange your developing laboratory, using a normal
desktop computer as Remote Developing Workstation (RDW).&lt;/p>
&lt;p>This &lt;a href="https://github.com/Pi4J/pi4j-maven-archetype" title="raspimaven-archetype" target="_blank" rel="noopener">Maven Archetype&lt;/a> will give you
a tool to generate Pi4J V.2 skeleton Java projects. You can use it for your next Pi4j project and you will be able
to develop your program on the remote workstation (RDW), compile them, transmit the executable
code on the target Pi board and run it. You can also start a remote debugging session.&lt;/p></description></item><item><title>Minimal example application</title><link>https://pi4j.com/getting-started/minimal-example-application/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/getting-started/minimal-example-application/</guid><description>&lt;div class="notices tip" >&lt;p>GITHUB PROJECT: &lt;a href="https://github.com/Pi4J/pi4j-example-minimal" target="_blank" rel="noopener">https://github.com/Pi4J/pi4j-example-minimal&lt;/a>&lt;/p>
&lt;/div>

&lt;p>In the &lt;a href="https://github.com/Pi4J/pi4j-example-minimal" target="_blank" rel="noopener">&amp;ldquo;pi4j-example-minimal&amp;rdquo; GitHub project&lt;/a> you can
find a project which contains the minimal code to control a digital input and output with Pi4J. The project is further
described on this page. The application will toggle an LED on/off and each time you press the button, the toggling
speed increases. When you have pushed the button 5 times, the application stops.&lt;/p>

&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
 &lt;iframe src="https://player.vimeo.com/video/525570174" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="vimeo video" webkitallowfullscreen mozallowfullscreen allowfullscreen>&lt;/iframe>
&lt;/div>

&lt;h2 id="wiring">Wiring&lt;/h2>
&lt;p>This minimal example application uses this wiring:&lt;/p></description></item><item><title>User interface with JavaFX</title><link>https://pi4j.com/getting-started/user-interface-with-javafx/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/getting-started/user-interface-with-javafx/</guid><description>&lt;div class="notices tip" >&lt;p>GITHUB PROJECT: &lt;a href="https://github.com/Pi4J/pi4j-example-javafx" target="_blank" rel="noopener">https://github.com/Pi4J/pi4j-example-javafx&lt;/a>&lt;/p>
&lt;/div>

&lt;p>JavaFX is a framework to create user interfaces for desktop (Windows, Mac, Linux) and mobile phones. JavaFX is
an opensource project which is documented on &lt;a href="https://openjfx.io/" target="_blank" rel="noopener">openjfx.io&lt;/a> and the sources are available
in &lt;a href="https://github.com/openjdk/jfx" target="_blank" rel="noopener">this GitHub project&lt;/a>.&lt;/p>
&lt;p>The main goal of Java has always been to be able to create applications which are &lt;strong>&amp;ldquo;write once, run everywhere&amp;rdquo;&lt;/strong>.
JavaFX promises the same for Graphical User Interface applications.&lt;/p>
&lt;p>&lt;a href="https://gluonhq.com/" target="_blank" rel="noopener">Gluon&lt;/a> is the main maintainer of the OpenJFX project and offers commercial support to
companies who want to use JavaFX in critical applications. They also provide &lt;a href="https://gluonhq.com/products/" target="_blank" rel="noopener">tools to build and compile Java
code to native applications for all platforms&lt;/a>.&lt;/p></description></item><item><title>JavaFX GUI and MVC template</title><link>https://pi4j.com/getting-started/javafx-mvc-template/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/getting-started/javafx-mvc-template/</guid><description>&lt;div class="notices tip" >&lt;p>GITHUB PROJECT: &lt;a href="https://github.com/Pi4J/pi4j-template-javafx" target="_blank" rel="noopener">https://github.com/Pi4J/pi4j-template-javafx&lt;/a>&lt;/p>
&lt;/div>

&lt;p>The &lt;a href="https://www.fhnw.ch" target="_blank" rel="noopener">FHNW University&lt;/a> created a template project which is now part of the Pi4J example repositories.&lt;/p>
&lt;p>The goal of this project is to:&lt;/p>
&lt;ul>
&lt;li>Provide a clear step-by-step how to prepare your Raspberry Pi&lt;/li>
&lt;li>Provide multiple test and start applications&lt;/li>
&lt;li>Explain the use of a MVC-model (Model-View-Controller) to clearly split data, actions and user interface&lt;/li>
&lt;li>Explain the use of JUnit test&lt;/li>
&lt;/ul>
&lt;h2 id="sources-and-info">Sources and info&lt;/h2>
&lt;p>Please check the README of the sources of the project for a full description of the setup process of the Raspberry Pi
and to fully understand the example applications and the MVC-model. This page is only intended to give you a quick overview.&lt;/p></description></item><item><title>Build Java modules with Maven</title><link>https://pi4j.com/documentation/building/modules-maven/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/documentation/building/modules-maven/</guid><description>&lt;div class="notices tip" >&lt;p>GITHUB PROJECT: &lt;a href="https://github.com/Pi4J/pi4j-example-minimal" target="_blank" rel="noopener">https://github.com/Pi4J/pi4j-example-minimal&lt;/a>&lt;/p>
&lt;/div>

&lt;p>Because the Pi4J V.2 project follows the modular approach of Java, the functionality of the framework has been split into
different modules, each with their own responsibility.&lt;/p>
&lt;p>The easiest way to start a new project, is to copy one of the example projects which include a full Maven pom.xml-file
with all the required steps and configurations to build the project with all its modules into the &lt;code>target/distribution&lt;/code>
directory.&lt;/p></description></item><item><title>Maven Downloads</title><link>https://pi4j.com/blog/2024/20241104-download-stats/</link><pubDate>Mon, 04 Nov 2024 00:00:00 +0000</pubDate><guid>https://pi4j.com/blog/2024/20241104-download-stats/</guid><description>&lt;p>2024-11-04 by Frank Delporte&lt;/p>
&lt;p>As an open-source project it&amp;rsquo;s very difficult to understand how much it&amp;rsquo;s used &amp;ldquo;in the wild&amp;rdquo;. The only stats we have, are the number of downloads from the Maven repository. So end of October I made a few screenshots to share here with the statistics including September 2024.&lt;/p>
&lt;p>These are the numbers for all Pi4J libraries combined. Is this much? I have no clue as I can&amp;rsquo;t compare it with a similar project. ;-)&lt;/p></description></item></channel></rss>