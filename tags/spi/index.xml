<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>SPI on Pi4J</title><link>https://pi4j.com/tags/spi/</link><description>Recent content in SPI on Pi4J</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Wed, 17 Apr 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://pi4j.com/tags/spi/index.xml" rel="self" type="application/rss+xml"/><item><title>SmartCoop</title><link>https://pi4j.com/featured-projects/smartcoop/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/featured-projects/smartcoop/</guid><description>&lt;div class="notices tip" >&lt;p>PROJECT WEBSITE: &lt;a href="https://www.smartcoop.tech" target="_blank" rel="noopener">smartcoop.tech&lt;/a>&lt;/p>
&lt;/div>

&lt;p>Dave Duncanson, an ex Royal Australian Airforce (RAAF) electronics technician and embedded software developer, created the &lt;strong>SmartCoop&lt;/strong>. It&amp;rsquo;s a fully automated Chicken Coop Controller solution which uses a Raspberry Pi and a ESP32-S3 Processor located on a custom designed Surface Mount Designed (SMD) PCB. The goal of this project was to significantly reduce the amount of regular and routine tasks required to keep a small flock (~30) of chickens on a hobby farm located in NSW just outside of Canberra Australia.&lt;/p></description></item><item><title>PiGpio Provider</title><link>https://pi4j.com/documentation/providers/pigpio/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/documentation/providers/pigpio/</guid><description>&lt;p>The current implementation of the PiGpio exposes the GPIO functions available on the Raspberry Pi (see Note Pi5 below).
This implementation is developed/supported by a team separate of Pi4j. Pi4j is a consumer of that PiGpio work.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>Pi5 At the present time the PiGpio implementation does not support the new Pi5 board. 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- This new Pi5 RP1 chip will require a large development effort. There is no known plan &lt;span style="color:#66d9ef">for&lt;/span> this develoment. 
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Providers in the PiGpio plugin:&lt;/p></description></item><item><title>8x8 LED Matrix</title><link>https://pi4j.com/examples/jbang/jbang_pi4j_spi_led_matrix/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/examples/jbang/jbang_pi4j_spi_led_matrix/</guid><description>&lt;h2 id="controlling-a-8x8-led-matrix-with-max7219-via-spi">Controlling a 8x8 LED Matrix with MAX7219 via SPI&lt;/h2>

&lt;div class="notices tip" >&lt;p>GITHUB PROJECT: &lt;a href="https://github.com/Pi4J/pi4j-jbang/blob/main/Pi4JLedMatrixSpi.java" target="_blank" rel="noopener">github.com/Pi4J/pi4j-jbang &amp;gt; Pi4JLedMatrixSpi.java&lt;/a>&lt;/p>
&lt;/div>

&lt;p>This example is explained in the following video:&lt;/p>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
 &lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share; fullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/BXOqXuh50KI?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video">&lt;/iframe>
 &lt;/div>

&lt;h2 id="intro">Intro&lt;/h2>

&lt;div class="notices warning" >&lt;p>Before proceeding with this example, make sure that you have a Raspberry Pi prepared to execute Java code with JBang as &lt;a href="https://pi4j.com/examples/jbang/" target="_blank" rel="noopener">explained here&lt;/a>.&lt;/p></description></item><item><title>Serial Peripheral Interface (SPI)</title><link>https://pi4j.com/documentation/io-examples/spi/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/documentation/io-examples/spi/</guid><description>&lt;h2 id="what-is-it">What is it?&lt;/h2>
&lt;p>The Serial Peripheral Interface, abbreviated to SPI, is a bus system which enables
communication between a main device (called “master”) and one or more secondary devices
(called “slave”). A direct communication between all participants is not possible here,
much more the master can choose at any time with which slave he would like to exchange data.&lt;/p>
&lt;p>In order to address only one slave, a total of 3 signal lines are required, two of which
are used for bidirectional data transmission and one as a clock generator for serial
transmission. If further slaves are to be addressed, additional signal lines are required
depending on the desired topology.&lt;/p></description></item><item><title>LED Matrix with SPI MAX7219</title><link>https://pi4j.com/blog/2024/20240417_led_matrix_max7219_spi_web/</link><pubDate>Wed, 17 Apr 2024 00:00:00 +0000</pubDate><guid>https://pi4j.com/blog/2024/20240417_led_matrix_max7219_spi_web/</guid><description>&lt;p>2024-04-18, by Frank Delporte&lt;/p>
&lt;p>Roberto Marquez shared a project with us that uses Java to interface with a MAX7219 SPI device to control an LED matrix. It&amp;rsquo;s inspired by the blog &lt;a href="https://www.hackerspacetech.com/raspberry-pi-and-spi-8x8-led-matrix-example-with-java-and-pi4j/" target="_blank" rel="noopener">Raspberry Pi and SPI 8×8 LED matrix example with Java and Pi4j&lt;/a>, but differs in that it is Web-enabled via Spring Boot. This project is the starting point to create a weather station in combination with the BMP280, see &lt;a href="https://pi4j.com/examples/jbang/bme280_temperature_humidity_pressure/" target="_blank" rel="noopener">BME280 Sensor (temp, humidity, pressure) via Pi4J, I2C, and JBang&lt;/a>.&lt;/p></description></item></channel></rss>