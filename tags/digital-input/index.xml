<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Digital Input on Pi4J</title><link>https://pi4j.com/tags/digital-input/</link><description>Recent content in Digital Input on Pi4J</description><generator>Hugo</generator><language>en-us</language><atom:link href="https://pi4j.com/tags/digital-input/index.xml" rel="self" type="application/rss+xml"/><item><title>Minimal example application</title><link>https://pi4j.com/getting-started/minimal-example-application/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/getting-started/minimal-example-application/</guid><description>&lt;div class="notices tip" &gt;&lt;p&gt;GITHUB PROJECT: &lt;a href="https://github.com/Pi4J/pi4j-example-minimal" target="_blank" rel="noopener"&gt;https://github.com/Pi4J/pi4j-example-minimal&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;In the &lt;a href="https://github.com/Pi4J/pi4j-example-minimal" target="_blank" rel="noopener"&gt;&amp;ldquo;pi4j-example-minimal&amp;rdquo; GitHub project&lt;/a&gt; you can
find a project which contains the minimal code to control a digital input and output with Pi4J. The project is further
described on this page. The application will toggle an LED on/off and each time you press the button, the toggling
speed increases. When you have pushed the button 5 times, the application stops.&lt;/p&gt;

 &lt;div
 style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;"&gt;
 &lt;iframe
 src="https://player.vimeo.com/video/525570174?dnt=0"
 style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allow="fullscreen"&gt;
 &lt;/iframe&gt;
 &lt;/div&gt;

&lt;h2 id="wiring"&gt;Wiring&lt;/h2&gt;
&lt;p&gt;This minimal example application uses this wiring:&lt;/p&gt;</description></item><item><title>Minimal example as FAT JAR</title><link>https://pi4j.com/getting-started/minimal-example-application-fatjar/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/getting-started/minimal-example-application-fatjar/</guid><description>&lt;div class="notices tip" &gt;&lt;p&gt;GITHUB PROJECT: &lt;a href="https://github.com/Pi4J/pi4j-example-fatjar" target="_blank" rel="noopener"&gt;https://github.com/Pi4J/pi4j-example-fatjar&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;a href="https://pi4j.com/getting-started/minimal-example-application/"&gt;&amp;ldquo;Minimal example application&amp;rdquo;&lt;/a&gt; uses one LED and button to demonstrate
the basic use of Pi4J. When building that project with Maven, all the required Java modules are copied to the
&lt;code&gt;target/distribution&lt;/code&gt; directory. But a lot of developers like to produce a single, executable JAR that contains
all dependencies, also known as a &amp;ldquo;FAT JAR&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;The repository &lt;a href="https://github.com/Pi4J/pi4j-example-fatjar" target="_blank" rel="noopener"&gt;&amp;ldquo;pi4j-example-fatjar&amp;rdquo; GitHub project&lt;/a&gt; contains a Maven project
with identical wiring, dependencies and build command to the &amp;ldquo;Minimal example application&amp;rdquo;, but results in such a FAT JAR
instead of separate Java modules.&lt;/p&gt;</description></item><item><title>Spring Boot Alarm System</title><link>https://pi4j.com/featured-projects/spring-boot-alarm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/featured-projects/spring-boot-alarm/</guid><description>&lt;div class="notices tip" &gt;&lt;p&gt;GITHUB PROJECT: &lt;a href="https://github.com/bmike2047/springboot-rpi-alarm-system" target="_blank" rel="noopener"&gt;github.com/bmike2047/springboot-rpi-alarm-system&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;This project by &lt;strong&gt;Mihai Buleandra&lt;/strong&gt;, uses Spring Boot to create a simple wired alarm system. Most examples on this website use Maven, but this project is a nice example of how to configure a Gradle project to use Pi4J. Mihai also uses Thymeleaf and Bootstrap for the web user interface, that has live updates showing the state of the alarm system.&lt;/p&gt;
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;"&gt;
 &lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share; fullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/xRUWgISEngM?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"&gt;&lt;/iframe&gt;
 &lt;/div&gt;

&lt;p&gt;The alarm system makes use of Java&amp;rsquo;s multithreading capabilities, as it&amp;rsquo;s based on a non-blocking Finite State Machine. This means each state runs in its own thread allowing the web interface to not block while waiting for different operations. Multi-threaded reusable Java drivers for the Raspberry Pi are implemented using the Pi4J library for the keypad, Passive Infrared sensor (PIR), LED and Buzzer.
Keypad driver includes debounce implementation also.&lt;/p&gt;</description></item><item><title>User interface with JavaFX</title><link>https://pi4j.com/getting-started/user-interface-with-javafx/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/getting-started/user-interface-with-javafx/</guid><description>&lt;div class="notices tip" &gt;&lt;p&gt;GITHUB PROJECT: &lt;a href="https://github.com/Pi4J/pi4j-example-javafx" target="_blank" rel="noopener"&gt;https://github.com/Pi4J/pi4j-example-javafx&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;JavaFX is a framework to create user interfaces for desktop (Windows, Mac, Linux) and mobile phones. JavaFX is
an opensource project which is documented on &lt;a href="https://openjfx.io/" target="_blank" rel="noopener"&gt;openjfx.io&lt;/a&gt; and the sources are available
in &lt;a href="https://github.com/openjdk/jfx" target="_blank" rel="noopener"&gt;this GitHub project&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The main goal of Java has always been to be able to create applications which are &lt;strong&gt;&amp;ldquo;write once, run everywhere&amp;rdquo;&lt;/strong&gt;.
JavaFX promises the same for Graphical User Interface applications.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://gluonhq.com/" target="_blank" rel="noopener"&gt;Gluon&lt;/a&gt; is the main maintainer of the OpenJFX project and offers commercial support to
companies who want to use JavaFX in critical applications. They also provide &lt;a href="https://gluonhq.com/products/" target="_blank" rel="noopener"&gt;tools to build and compile Java
code to native applications for all platforms&lt;/a&gt;.&lt;/p&gt;</description></item><item><title>JavaFX GUI and MVC template</title><link>https://pi4j.com/getting-started/javafx-mvc-template/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/getting-started/javafx-mvc-template/</guid><description>&lt;div class="notices tip" &gt;&lt;p&gt;GITHUB PROJECT: &lt;a href="https://github.com/Pi4J/pi4j-template-javafx" target="_blank" rel="noopener"&gt;https://github.com/Pi4J/pi4j-template-javafx&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;a href="https://www.fhnw.ch" target="_blank" rel="noopener"&gt;FHNW University&lt;/a&gt; created a template project which is now part of the Pi4J example repositories.&lt;/p&gt;
&lt;p&gt;The goal of this project is to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Provide a clear step-by-step how to prepare your Raspberry Pi&lt;/li&gt;
&lt;li&gt;Provide multiple test and start applications&lt;/li&gt;
&lt;li&gt;Explain the use of a MVC-model (Model-View-Controller) to clearly split data, actions and user interface&lt;/li&gt;
&lt;li&gt;Explain the use of JUnit test&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="sources-and-info"&gt;Sources and Info&lt;/h2&gt;
&lt;p&gt;Please check the README of the sources of the project for a full description of the setup process of the Raspberry Pi
and to fully understand the example applications and the MVC-model. This page is only intended to give you a quick overview.&lt;/p&gt;</description></item><item><title>GpioD Provider</title><link>https://pi4j.com/documentation/providers/gpiod/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/documentation/providers/gpiod/</guid><description>&lt;p&gt;The GpioD plugin provider was added in Pi4J 2.5.0 to be able to support the Raspberry Pi 5 with the new &lt;a href="https://www.raspberrypi.com/documentation/microcontrollers/rp1.html" target="_blank" rel="noopener"&gt;GPIO chip RP1&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Providers in the GpioD plugin:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;gpiod-digital-input&lt;/li&gt;
&lt;li&gt;gpiod-digital-output&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="supported-operating-system-versions"&gt;Supported Operating System Versions&lt;/h2&gt;

&lt;div class="notices warning" &gt;&lt;p&gt;The GpioD provider requires minimum kernel Bullseye 6.1.21 and Bookworm 6.6.22 !&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;If you get an error at startup with the following content, your OS is outdated for the GpioD implementation used in Pi4J:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;UNDERLYING EXCEPTION: &lt;span style="color:#f92672"&gt;[&lt;/span&gt;java.lang.UnsatisfiedLinkError&lt;span style="color:#f92672"&gt;]=&lt;/span&gt;/tmp/libgpiod368899536808039438.so: /lib/aarch64-linux-gnu/libc.so.6: version &lt;span style="color:#e6db74"&gt;`&lt;/span&gt;GLIBC_2.33&lt;span style="color:#960050;background-color:#1e0010"&gt;&amp;#39;&lt;/span&gt; not found &lt;span style="color:#f92672"&gt;(&lt;/span&gt;required by /tmp/libgpiod368899536808039438.so&lt;span style="color:#f92672"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="dependencies"&gt;Dependencies&lt;/h2&gt;
&lt;p&gt;To use the GpioD provider include the following dependencies:&lt;/p&gt;</description></item><item><title>PiGpio Provider</title><link>https://pi4j.com/documentation/providers/pigpio/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/documentation/providers/pigpio/</guid><description>&lt;p&gt;The current implementation of the PiGpio exposes the GPIO functions available on the Raspberry Pi (see Note Pi5 below).
This implementation is developed/supported by a team separate of Pi4j. Pi4j is a consumer of that PiGpio work.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Pi5 At the present time the PiGpio implementation does not support the new Pi5 board. 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;- This new Pi5 RP1 chip will require a large development effort. There is no known plan &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; this develoment. 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Providers in the PiGpio plugin:&lt;/p&gt;</description></item><item><title>Minimal Example</title><link>https://pi4j.com/examples/jbang/jbang_minimal_example/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/examples/jbang/jbang_minimal_example/</guid><description>&lt;h2 id="minimal-pi4j-with-jbang-example"&gt;Minimal Pi4J with JBang example&lt;/h2&gt;

&lt;div class="notices tip" &gt;&lt;p&gt;GITHUB PROJECT: &lt;a href="https://github.com/Pi4J/pi4j-jbang/blob/main/Pi4JMinimalExample.java" target="_blank" rel="noopener"&gt;github.com/Pi4J/pi4j-jbang &amp;gt; Pi4JMinimalExample.java&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id="intro"&gt;Intro&lt;/h2&gt;

&lt;div class="notices warning" &gt;&lt;p&gt;Before proceeding with this example, make sure that you have a Raspberry Pi prepared to execute Java code with JBang as &lt;a href="https://pi4j.com/examples/jbang/" target="_blank" rel="noopener"&gt;explained here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;The following example is based on the &lt;a href="http://localhost:49905/getting-started/minimal-example-application/" target="_blank" rel="noopener"&gt;&amp;ldquo;Minimal example application&amp;rdquo;&lt;/a&gt;, and uses the same wiring with a button and LED. By using JBang we can run this project with a single file without the need of a full Maven or Gradle project, or compiling the Java code.&lt;/p&gt;</description></item><item><title>Digital Input (GPIO)</title><link>https://pi4j.com/documentation/io-examples/digital-input/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/documentation/io-examples/digital-input/</guid><description>&lt;p&gt;Similar to a digital output pin, a digital input translates an input value of 0V or 3.3V to the value false/true. This
means any type of device which can toggle between 3.3V and 0V, can generate an input value to the Raspberry Pi. Here the
most basic example is a toggle button. If you use other components, always check which is the voltage provided by the device.
Or if you use a power pin from the Raspberry Pi itself, to use a 3.3V pin and not a 5V pin.&lt;/p&gt;</description></item></channel></rss>