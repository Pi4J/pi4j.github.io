<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Digital Input on Pi4J</title><link>https://pi4j.com/tags/digital-input/</link><description>Recent content in Digital Input on Pi4J</description><generator>Hugo</generator><language>en-us</language><atom:link href="https://pi4j.com/tags/digital-input/index.xml" rel="self" type="application/rss+xml"/><item><title>Minimal example application</title><link>https://pi4j.com/getting-started/minimal-example-application/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/getting-started/minimal-example-application/</guid><description>&lt;div class="notices tip" >&lt;p>GITHUB PROJECT: &lt;a href="https://github.com/Pi4J/pi4j-example-minimal" target="_blank" rel="noopener">https://github.com/Pi4J/pi4j-example-minimal&lt;/a>&lt;/p>
&lt;/div>

&lt;p>In the &lt;a href="https://github.com/Pi4J/pi4j-example-minimal" target="_blank" rel="noopener">&amp;ldquo;pi4j-example-minimal&amp;rdquo; GitHub project&lt;/a> you can
find a project which contains the minimal code to control a digital input and output with Pi4J. The project is further
described on this page. The application will toggle an LED on/off and each time you press the button, the toggling
speed increases. When you have pushed the button 5 times, the application stops.&lt;/p>

 &lt;div
 style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
 &lt;iframe
 src="https://player.vimeo.com/video/525570174?dnt=0"
 style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allow="fullscreen">
 &lt;/iframe>
 &lt;/div>

&lt;h2 id="wiring">Wiring&lt;/h2>
&lt;p>This minimal example application uses this wiring:&lt;/p></description></item><item><title>Minimal example as FAT JAR</title><link>https://pi4j.com/getting-started/minimal-example-application-fatjar/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/getting-started/minimal-example-application-fatjar/</guid><description>&lt;div class="notices tip" >&lt;p>GITHUB PROJECT: &lt;a href="https://github.com/Pi4J/pi4j-example-fatjar" target="_blank" rel="noopener">https://github.com/Pi4J/pi4j-example-fatjar&lt;/a>&lt;/p>
&lt;/div>

&lt;p>The &lt;a href="https://pi4j.com/getting-started/minimal-example-application/">&amp;ldquo;Minimal example application&amp;rdquo;&lt;/a> uses one LED and button to demonstrate
the basic use of Pi4J. When building that project with Maven, all the required Java modules are copied to the
&lt;code>target/distribution&lt;/code> directory. But a lot of developers like to produce a single, executable JAR that contains
all dependencies, also known as a &amp;ldquo;FAT JAR&amp;rdquo;.&lt;/p>
&lt;p>The repository &lt;a href="https://github.com/Pi4J/pi4j-example-fatjar" target="_blank" rel="noopener">&amp;ldquo;pi4j-example-fatjar&amp;rdquo; GitHub project&lt;/a> contains a Maven project
with identical wiring, dependencies and build command to the &amp;ldquo;Minimal example application&amp;rdquo;, but results in such a FAT JAR
instead of separate Java modules.&lt;/p></description></item><item><title>User interface with JavaFX</title><link>https://pi4j.com/getting-started/user-interface-with-javafx/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/getting-started/user-interface-with-javafx/</guid><description>&lt;div class="notices tip" >&lt;p>GITHUB PROJECT: &lt;a href="https://github.com/Pi4J/pi4j-example-javafx" target="_blank" rel="noopener">https://github.com/Pi4J/pi4j-example-javafx&lt;/a>&lt;/p>
&lt;/div>

&lt;p>JavaFX is a framework to create user interfaces for desktop (Windows, Mac, Linux) and mobile phones. JavaFX is
an opensource project which is documented on &lt;a href="https://openjfx.io/" target="_blank" rel="noopener">openjfx.io&lt;/a> and the sources are available
in &lt;a href="https://github.com/openjdk/jfx" target="_blank" rel="noopener">this GitHub project&lt;/a>.&lt;/p>
&lt;p>The main goal of Java has always been to be able to create applications which are &lt;strong>&amp;ldquo;write once, run everywhere&amp;rdquo;&lt;/strong>.
JavaFX promises the same for Graphical User Interface applications.&lt;/p>
&lt;p>&lt;a href="https://gluonhq.com/" target="_blank" rel="noopener">Gluon&lt;/a> is the main maintainer of the OpenJFX project and offers commercial support to
companies who want to use JavaFX in critical applications. They also provide &lt;a href="https://gluonhq.com/products/" target="_blank" rel="noopener">tools to build and compile Java
code to native applications for all platforms&lt;/a>.&lt;/p></description></item><item><title>JavaFX GUI and MVC template</title><link>https://pi4j.com/getting-started/javafx-mvc-template/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/getting-started/javafx-mvc-template/</guid><description>&lt;div class="notices tip" >&lt;p>GITHUB PROJECT: &lt;a href="https://github.com/Pi4J/pi4j-template-javafx" target="_blank" rel="noopener">https://github.com/Pi4J/pi4j-template-javafx&lt;/a>&lt;/p>
&lt;/div>

&lt;p>The &lt;a href="https://www.fhnw.ch" target="_blank" rel="noopener">FHNW University&lt;/a> created a template project which is now part of the Pi4J example repositories.&lt;/p>
&lt;p>The goal of this project is to:&lt;/p>
&lt;ul>
&lt;li>Provide a clear step-by-step how to prepare your Raspberry Pi&lt;/li>
&lt;li>Provide multiple test and start applications&lt;/li>
&lt;li>Explain the use of a MVC-model (Model-View-Controller) to clearly split data, actions and user interface&lt;/li>
&lt;li>Explain the use of JUnit test&lt;/li>
&lt;/ul>
&lt;h2 id="sources-and-info">Sources and Info&lt;/h2>
&lt;p>Please check the README of the sources of the project for a full description of the setup process of the Raspberry Pi
and to fully understand the example applications and the MVC-model. This page is only intended to give you a quick overview.&lt;/p></description></item><item><title>GpioD Provider</title><link>https://pi4j.com/documentation/providers/gpiod/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/documentation/providers/gpiod/</guid><description>&lt;p>The GpioD plugin provider was added in Pi4J 2.5.0 to be able to support the Raspberry Pi 5 with the new &lt;a href="https://www.raspberrypi.com/documentation/microcontrollers/rp1.html" target="_blank" rel="noopener">GPIO chip RP1&lt;/a>.&lt;/p>
&lt;p>Providers in the GpioD plugin:&lt;/p>
&lt;ul>
&lt;li>gpiod-digital-input&lt;/li>
&lt;li>gpiod-digital-output&lt;/li>
&lt;/ul>
&lt;h2 id="supported-operating-system-versions">Supported Operating System Versions&lt;/h2>

&lt;div class="notices warning" >&lt;p>The GpioD provider requires minimum kernel Bullseye 6.1.21 and Bookworm 6.6.22 !&lt;/p>
&lt;/div>

&lt;p>If you get an error at startup with the following content, your OS is outdated for the GpioD implementation used in Pi4J:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>UNDERLYING EXCEPTION: &lt;span style="color:#f92672">[&lt;/span>java.lang.UnsatisfiedLinkError&lt;span style="color:#f92672">]=&lt;/span>/tmp/libgpiod368899536808039438.so: /lib/aarch64-linux-gnu/libc.so.6: version &lt;span style="color:#e6db74">`&lt;/span>GLIBC_2.33&lt;span style="color:#960050;background-color:#1e0010">&amp;#39;&lt;/span> not found &lt;span style="color:#f92672">(&lt;/span>required by /tmp/libgpiod368899536808039438.so&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="dependencies">Dependencies&lt;/h2>
&lt;p>To use the GpioD provider include the following dependencies:&lt;/p></description></item><item><title>PiGpio Provider</title><link>https://pi4j.com/documentation/providers/pigpio/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/documentation/providers/pigpio/</guid><description>&lt;p>The current implementation of the PiGpio exposes the GPIO functions available on the Raspberry Pi (see Note Pi5 below).
This implementation is developed/supported by a team separate of Pi4j. Pi4j is a consumer of that PiGpio work.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>Pi5 At the present time the PiGpio implementation does not support the new Pi5 board. 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- This new Pi5 RP1 chip will require a large development effort. There is no known plan &lt;span style="color:#66d9ef">for&lt;/span> this develoment. 
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Providers in the PiGpio plugin:&lt;/p></description></item><item><title>Minimal Example</title><link>https://pi4j.com/examples/jbang/jbang_minimal_example/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/examples/jbang/jbang_minimal_example/</guid><description>&lt;h2 id="minimal-pi4j-with-jbang-example">Minimal Pi4J with JBang example&lt;/h2>

&lt;div class="notices tip" >&lt;p>GITHUB PROJECT: &lt;a href="https://github.com/Pi4J/pi4j-jbang/blob/main/Pi4JMinimalExample.java" target="_blank" rel="noopener">github.com/Pi4J/pi4j-jbang &amp;gt; Pi4JMinimalExample.java&lt;/a>&lt;/p>
&lt;/div>

&lt;h2 id="intro">Intro&lt;/h2>

&lt;div class="notices warning" >&lt;p>Before proceeding with this example, make sure that you have a Raspberry Pi prepared to execute Java code with JBang as &lt;a href="https://pi4j.com/examples/jbang/" target="_blank" rel="noopener">explained here&lt;/a>.&lt;/p>
&lt;/div>

&lt;p>The following example is based on the &lt;a href="http://localhost:49905/getting-started/minimal-example-application/" target="_blank" rel="noopener">&amp;ldquo;Minimal example application&amp;rdquo;&lt;/a>, and uses the same wiring with a button and LED. By using JBang we can run this project with a single file without the need of a full Maven or Gradle project, or compiling the Java code.&lt;/p></description></item><item><title>Digital Input (GPIO)</title><link>https://pi4j.com/documentation/io-examples/digital-input/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/documentation/io-examples/digital-input/</guid><description>&lt;p>Similar to a digital output pin, a digital input translates an input value of 0V or 3.3V to the value false/true. This
means any type of device which can toggle between 3.3V and 0V, can generate an input value to the Raspberry Pi. Here the
most basic example is a toggle button. If you use other components, always check which is the voltage provided by the device.
Or if you use a power pin from the Raspberry Pi itself, to use a 3.3V pin and not a 5V pin.&lt;/p></description></item></channel></rss>