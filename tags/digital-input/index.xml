<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Digital Input on Pi4J</title><link>https://pi4j.com/tags/digital-input/</link><description>Recent content in Digital Input on Pi4J</description><generator>Hugo</generator><language>en-us</language><atom:link href="https://pi4j.com/tags/digital-input/index.xml" rel="self" type="application/rss+xml"/><item><title>Minimal example application</title><link>https://pi4j.com/getting-started/minimal-example-application/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/getting-started/minimal-example-application/</guid><description>GITHUB PROJECT: https://github.com/Pi4J/pi4j-example-minimal
In the &amp;ldquo;pi4j-example-minimal&amp;rdquo; GitHub project you can find a project which contains the minimal code to control a digital input and output with Pi4J. The project is further described on this page. The application will toggle an LED on/off and each time you press the button, the toggling speed increases. When you have pushed the button 5 times, the application stops.
Wiring This minimal example application uses this wiring:</description></item><item><title>Minimal example as FAT JAR</title><link>https://pi4j.com/getting-started/minimal-example-application-fatjar/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/getting-started/minimal-example-application-fatjar/</guid><description>GITHUB PROJECT: https://github.com/Pi4J/pi4j-example-fatjar
The &amp;ldquo;Minimal example application&amp;rdquo; uses one LED and button to demonstrate the basic use of Pi4J V.2. When building that project with Maven, all the required Java modules are copied to the target/distribution directory. But a lot of developers like to produce a single, executable JAR that contains all dependencies, also known as a &amp;ldquo;FAT JAR&amp;rdquo;.
The repository &amp;ldquo;pi4j-example-fatjar&amp;rdquo; GitHub project contains a Maven project with identical wiring, dependencies and build command to the &amp;ldquo;Minimal example application&amp;rdquo;, but results in such a FAT JAR instead of separate Java modules.</description></item><item><title>User interface with JavaFX</title><link>https://pi4j.com/getting-started/user-interface-with-javafx/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/getting-started/user-interface-with-javafx/</guid><description>GITHUB PROJECT: https://github.com/Pi4J/pi4j-example-javafx
JavaFX is a framework to create user interfaces for desktop (Windows, Mac, Linux) and mobile phones. JavaFX is an opensource project which is documented on openjfx.io and the sources are available in this GitHub project.
The main goal of Java has always been to be able to create applications which are &amp;ldquo;write once, run everywhere&amp;rdquo;. JavaFX promises the same for Graphical User Interface applications.
Gluon is the main maintainer of the OpenJFX project and offers commercial support to companies who want to use JavaFX in critical applications.</description></item><item><title>JavaFX GUI and MVC template</title><link>https://pi4j.com/getting-started/javafx-mvc-template/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/getting-started/javafx-mvc-template/</guid><description>GITHUB PROJECT: https://github.com/Pi4J/pi4j-template-javafx
The FHNW University created a template project which is now part of the Pi4J example repositories.
The goal of this project is to:
Provide a clear step-by-step how to prepare your Raspberry Pi Provide multiple test and start applications Explain the use of a MVC-model (Model-View-Controller) to clearly split data, actions and user interface Explain the use of JUnit test Sources and info Please check the README of the sources of the project for a full description of the setup process of the Raspberry Pi and to fully understand the example applications and the MVC-model.</description></item><item><title>GpioD Provider</title><link>https://pi4j.com/documentation/providers/gpiod/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/documentation/providers/gpiod/</guid><description>The GpioD plugin provider was added in Pi4J 2.5.0 to be able to support the Raspberry Pi 5 with the new GPIO chip RP1.
Providers in the GpioD plugin:
gpiod-digital-input gpiod-digital-output The GpioD provider requires minimum kernel Bullseye 6.1.21 and Bookworm 6.6.22 !
If you get an error at startup with the following content, your OS is outdated for the GpioD implementation used in Pi4J:
UNDERLYING EXCEPTION: [java.lang.UnsatisfiedLinkError]=/tmp/libgpiod368899536808039438.so: /lib/aarch64-linux-gnu/libc.so.6: version `GLIBC_2.</description></item><item><title>PiGpio Provider</title><link>https://pi4j.com/documentation/providers/pigpio/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/documentation/providers/pigpio/</guid><description>The current implementation of the PiGpio exposes the GPIO functions available on the Raspberry Pi (see Note Pi5 below). This implementation is developed/supported by a team separate of Pi4j. Pi4j is a consumer of that PiGpio work.
Pi5 At the present time the PiGpio implementation does not support the new Pi5 board. - This new Pi5 RP1 chip will require a large development effort. There is no known plan for this develoment.</description></item><item><title>Minimal Example</title><link>https://pi4j.com/examples/jbang/jbang_minimal_example/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/examples/jbang/jbang_minimal_example/</guid><description>Minimal Pi4J with JBang example GITHUB PROJECT: github.com/Pi4J/pi4j-jbang &amp;gt; Pi4JMinimalExample.java
Intro Before proceeding with this example, make sure that you have a Raspberry Pi prepared to execute Java code with JBang as explained here.
The following example is based on the &amp;ldquo;Minimal example application&amp;rdquo;, and uses the same wiring with a button and LED. By using JBang we can run this project with a single file without the need of a full Maven or Gradle project, or compiling the Java code.</description></item><item><title>Digital Input (GPIO)</title><link>https://pi4j.com/documentation/io-examples/digital-input/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/documentation/io-examples/digital-input/</guid><description>Similar to a digital output pin, a digital input translates an input value of 0V or 3.3V to the value false/true. This means any type of device which can toggle between 3.3V and 0V, can generate an input value to the Raspberry Pi. Here the most basic example is a toggle button. If you use other components, always check which is the voltage provided by the device. Or if you use a power pin from the Raspberry Pi itself, to use a 3.</description></item></channel></rss>