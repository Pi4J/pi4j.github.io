<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Pi4J OS on Pi4J</title><link>https://pi4j.com/tags/pi4j-os/</link><description>Recent content in Pi4J OS on Pi4J</description><generator>Hugo</generator><language>en-us</language><atom:link href="https://pi4j.com/tags/pi4j-os/index.xml" rel="self" type="application/rss+xml"/><item><title>The First Boot</title><link>https://pi4j.com/prepare/first-boot/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/prepare/first-boot/</guid><description>&lt;p>Put the SD Card with the operating system into the Raspberry Pi, connect a keyboard, mouse, and screen, and power it up!&lt;/p>

&lt;div class="notices tip" >&lt;p>If you configured the login, password, WiFi, and SSH settings in the &amp;ldquo;Use OS customisation?&amp;rdquo; part of the Imager tool, you can connect to the Raspberry Pi from another PC via SSH with the username and hostname you filled in: &lt;code>ssh USERNAME@HOSTNAME.local&lt;/code>.&lt;/p>
&lt;/div>

&lt;h2 id="update-the-system">Update the System&lt;/h2>
&lt;p>Yes, even when you just created the SD Card with the latest OS provided by the Imager tool, it is possible that there are updates available.&lt;/p></description></item><item><title>Install Java and Tools</title><link>https://pi4j.com/prepare/install-java/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/prepare/install-java/</guid><description>&lt;p>Our Raspberry Pi has started for the first time and we are now ready to add some Java to it!&lt;/p>

&lt;div class="notices tip" >&lt;p>As described on the previous page &amp;ldquo;The First Boot&amp;rdquo;, a script can be executed that will do all this at once: &lt;code>curl -sL https://raw.githubusercontent.com/Pi4J/pi4j-os/main/script/prepare-for-java.sh | bash&lt;/code>.&lt;/p>
&lt;/div>

&lt;h2 id="add-missing-dependencies">Add Missing Dependencies&lt;/h2>
&lt;p>Let&amp;rsquo;s start with some helper tools that will be useful later.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ sudo apt install -y i2c-tools vim git java-common libxi6 libxrender1 libxtst6
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>i2c-tools&lt;/code>: Tool to help you with I2C commands.&lt;/li>
&lt;li>&lt;code>vim&lt;/code>: Text editor like &lt;code>nano&lt;/code>, preferred by some, hated by others ;-)&lt;/li>
&lt;li>&lt;code>git&lt;/code>: Tool to interact with a Git repository, like GitHub.&lt;/li>
&lt;li>&lt;code>java-common libxi6 libxrender1 libxtst6&lt;/code>: Dependencies of the JDK Debian package.&lt;/li>
&lt;/ul>
&lt;h2 id="install-java">Install Java&lt;/h2>
&lt;p>There are many ways you can install Java. The easiest way to make Java available for both normal use and as root user (&lt;code>sudo&lt;/code>), is the following approach which downloads one of the many distributions that are available.&lt;/p></description></item><item><title>Develop with Intellij IDEA</title><link>https://pi4j.com/examples/crowpi/develop-crowpi-with-intellij/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/examples/crowpi/develop-crowpi-with-intellij/</guid><description>&lt;p>The CrowPi example project contains settings to make it easy to develop on a PC with IntelliJ IDEA and execute the application on the CrowPi. The articles, instructions and pictures are created accordingly.
IntelliJ IDEA is from available Jetbrains in different versions. The community version has enough functionality for development
with the CrowPi and is available for Windows, MacOS and Linux, but NOT for Raspberry Pi. The
&lt;a href="https://www.jetbrains.com/idea/download/" target="_blank" rel="noopener">download can be found here&lt;/a>.&lt;/p></description></item><item><title>CrowPi examples</title><link>https://pi4j.com/examples/crowpi/crowpi-examples/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/examples/crowpi/crowpi-examples/</guid><description>&lt;div class="notices tip" >&lt;p>GITHUB PROJECT: &lt;a href="https://github.com/Pi4J/pi4j-example-crowpi" target="_blank" rel="noopener">https://github.com/Pi4J/pi4j-example-crowpi&lt;/a>&lt;/p>
&lt;/div>

&lt;p>The CrowPi example code contains examples for the following components. The links in this table will bring you to the German documentation written by the students who created these examples.&lt;/p>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th style="text-align: left">Component&lt;/th>
 &lt;th style="text-align: left">Link&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td style="text-align: left">7-Segment Display&lt;/td>
 &lt;td style="text-align: left">&lt;a href="https://fhnw-ip5-ip6.github.io/CrowPiGoesJavaTutorial/de/components/seven-segment/" target="_blank" rel="noopener">seven-segment&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">Button&lt;/td>
 &lt;td style="text-align: left">&lt;a href="https://fhnw-ip5-ip6.github.io/CrowPiGoesJavaTutorial/de/components/button/" target="_blank" rel="noopener">button&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">Button Matrix&lt;/td>
 &lt;td style="text-align: left">&lt;a href="https://fhnw-ip5-ip6.github.io/CrowPiGoesJavaTutorial/de/components/button-matrix/" target="_blank" rel="noopener">button-matrix&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">Buzzer&lt;/td>
 &lt;td style="text-align: left">&lt;a href="https://fhnw-ip5-ip6.github.io/CrowPiGoesJavaTutorial/de/components/buzzer/" target="_blank" rel="noopener">buzzer&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">Infrared Receiver&lt;/td>
 &lt;td style="text-align: left">&lt;a href="https://fhnw-ip5-ip6.github.io/CrowPiGoesJavaTutorial/de/components/ir-receiver/" target="_blank" rel="noopener">ir-receiver&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">LCD Display&lt;/td>
 &lt;td style="text-align: left">&lt;a href="https://fhnw-ip5-ip6.github.io/CrowPiGoesJavaTutorial/de/components/lcd-display/" target="_blank" rel="noopener">lcd-display&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">LED Matrix&lt;/td>
 &lt;td style="text-align: left">&lt;a href="https://fhnw-ip5-ip6.github.io/CrowPiGoesJavaTutorial/de/components/led-matrix/" target="_blank" rel="noopener">led-matrix&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">Light sensor&lt;/td>
 &lt;td style="text-align: left">&lt;a href="https://fhnw-ip5-ip6.github.io/CrowPiGoesJavaTutorial/de/components/light-sensor/" target="_blank" rel="noopener">light-sensor&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">PIR Motion Sensor&lt;/td>
 &lt;td style="text-align: left">&lt;a href="https://fhnw-ip5-ip6.github.io/CrowPiGoesJavaTutorial/de/components/pir-motion-sensor/" target="_blank" rel="noopener">pir-motion-sensor&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">Relais&lt;/td>
 &lt;td style="text-align: left">&lt;a href="https://fhnw-ip5-ip6.github.io/CrowPiGoesJavaTutorial/de/components/relay/" target="_blank" rel="noopener">relay&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">RFID&lt;/td>
 &lt;td style="text-align: left">&lt;a href="https://fhnw-ip5-ip6.github.io/CrowPiGoesJavaTutorial/de/components/rfid/" target="_blank" rel="noopener">rfid&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">Step motor&lt;/td>
 &lt;td style="text-align: left">&lt;a href="https://fhnw-ip5-ip6.github.io/CrowPiGoesJavaTutorial/de/components/step-motor/" target="_blank" rel="noopener">step-motor&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">Servomotor&lt;/td>
 &lt;td style="text-align: left">&lt;a href="https://fhnw-ip5-ip6.github.io/CrowPiGoesJavaTutorial/de/components/servo-motor/" target="_blank" rel="noopener">servo-motor&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">Sound Sensor&lt;/td>
 &lt;td style="text-align: left">&lt;a href="https://fhnw-ip5-ip6.github.io/CrowPiGoesJavaTutorial/de/components/sound-sensor/" target="_blank" rel="noopener">sound-sensor&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">Temperature and humidity sensor&lt;/td>
 &lt;td style="text-align: left">&lt;a href="https://fhnw-ip5-ip6.github.io/CrowPiGoesJavaTutorial/de/components/humi-temp-sens/" target="_blank" rel="noopener">humi-temp-sens&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">Tilt Sensor&lt;/td>
 &lt;td style="text-align: left">&lt;a href="https://fhnw-ip5-ip6.github.io/CrowPiGoesJavaTutorial/de/components/tilt-sensor/" target="_blank" rel="noopener">tilt-sensor&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">Touch Sensor&lt;/td>
 &lt;td style="text-align: left">&lt;a href="https://fhnw-ip5-ip6.github.io/CrowPiGoesJavaTutorial/de/components/touch-sensor/" target="_blank" rel="noopener">touch-sensor&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">Ultrasonic distance sensor&lt;/td>
 &lt;td style="text-align: left">&lt;a href="https://fhnw-ip5-ip6.github.io/CrowPiGoesJavaTutorial/de/components/ultrasonic-sensor/" target="_blank" rel="noopener">ultrasonic-sensor&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">Vibration motor&lt;/td>
 &lt;td style="text-align: left">&lt;a href="https://fhnw-ip5-ip6.github.io/CrowPiGoesJavaTutorial/de/components/vibration-motor/" target="_blank" rel="noopener">vibration-motor&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table></description></item><item><title>Debugging Failures</title><link>https://pi4j.com/debugging-failures/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/debugging-failures/</guid><description>&lt;p>Combining software with hardware can fail on many levels. You need the correct version of the Operating Systems, the good version of the Pi4J library, the wiring between the Raspberry Pi and the electronic components must be correct, and so on&amp;hellip;&lt;/p>
&lt;h2 id="startup-failures">Startup Failures&lt;/h2>
&lt;p>Always make sure that you log errors in the terminal or into a file! When the Pi4J library initializes, a lot of useful info is outputted. A &lt;strong>successful start&lt;/strong> looks like this:&lt;/p></description></item></channel></rss>