<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>JBang on Pi4J</title><link>https://pi4j.com/tags/jbang/</link><description>Recent content in JBang on Pi4J</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Thu, 12 Oct 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://pi4j.com/tags/jbang/index.xml" rel="self" type="application/rss+xml"/><item><title>Install Java and Tools</title><link>https://pi4j.com/prepare/install-java/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/prepare/install-java/</guid><description>&lt;p&gt;Our Raspberry Pi has started for the first time and we are now ready to add some Java to it!&lt;/p&gt;

&lt;div class="notices tip" &gt;&lt;p&gt;As described on the previous page &amp;ldquo;The First Boot&amp;rdquo;, a script can be executed that will do all this at once: &lt;code&gt;curl -sL https://raw.githubusercontent.com/Pi4J/pi4j-os/main/script/prepare-for-java.sh | bash&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id="add-missing-dependencies"&gt;Add Missing Dependencies&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s start with some helper tools that will be useful later.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ sudo apt install -y i2c-tools vim git java-common libxi6 libxrender1 libxtst6
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;i2c-tools&lt;/code&gt;: Tool to help you with I2C commands.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vim&lt;/code&gt;: Text editor like &lt;code&gt;nano&lt;/code&gt;, preferred by some, hated by others ;-)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git&lt;/code&gt;: Tool to interact with a Git repository, like GitHub.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;java-common libxi6 libxrender1 libxtst6&lt;/code&gt;: Dependencies of the JDK Debian package.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="install-java"&gt;Install Java&lt;/h2&gt;
&lt;p&gt;There are many ways you can install Java. The easiest way to make Java available for both normal use and as root user (&lt;code&gt;sudo&lt;/code&gt;), is the following approach which downloads one of the many distributions that are available.&lt;/p&gt;</description></item><item><title>JBang Examples</title><link>https://pi4j.com/examples/jbang/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/examples/jbang/</guid><description>&lt;div class="notices tip" &gt;&lt;p&gt;GITHUB PROJECT: &lt;a href="https://github.com/Pi4J/pi4j-jbang" target="_blank" rel="noopener"&gt;https://github.com/Pi4J/pi4j-jbang&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Want to get started with Java programming on the Raspberry Pi?&lt;/p&gt;
&lt;p&gt;JBang is a great way to create your first program to control electronic components connected to the GPIO pins.
What is JBang?&lt;/p&gt;
&lt;h2 id="what-is-jbang"&gt;What is JBang?&lt;/h2&gt;
&lt;p&gt;As &lt;a href="https://www.jbang.dev/" target="_blank" rel="noopener"&gt;described on their website&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;JBang lets Students, Educators and Professional Developers create, edit and run self-contained source-only Java programs with unprecedented ease.&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Want to learn, explore or use Java instantly without setup?&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Do you like Java but use python, groovy, kotlin or similar languages for scripts, experimentation and exploration?&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Ever wanted to just be able to run Java from anywhere without any or very minimal setup?&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Ever tried out Java 11+ support for running .java files directly in your shell but felt it was a bit too cumbersome?&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;JBang lets you do all this!&lt;/em&gt;&lt;/p&gt;</description></item><item><title>Minimal Example</title><link>https://pi4j.com/examples/jbang/jbang_minimal_example/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/examples/jbang/jbang_minimal_example/</guid><description>&lt;h2 id="minimal-pi4j-with-jbang-example"&gt;Minimal Pi4J with JBang example&lt;/h2&gt;

&lt;div class="notices tip" &gt;&lt;p&gt;GITHUB PROJECT: &lt;a href="https://github.com/Pi4J/pi4j-jbang/blob/main/Pi4JMinimalExample.java" target="_blank" rel="noopener"&gt;github.com/Pi4J/pi4j-jbang &amp;gt; Pi4JMinimalExample.java&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id="intro"&gt;Intro&lt;/h2&gt;

&lt;div class="notices warning" &gt;&lt;p&gt;Before proceeding with this example, make sure that you have a Raspberry Pi prepared to execute Java code with JBang as &lt;a href="https://pi4j.com/examples/jbang/" target="_blank" rel="noopener"&gt;explained here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;The following example is based on the &lt;a href="http://localhost:49905/getting-started/minimal-example-application/" target="_blank" rel="noopener"&gt;&amp;ldquo;Minimal example application&amp;rdquo;&lt;/a&gt;, and uses the same wiring with a button and LED. By using JBang we can run this project with a single file without the need of a full Maven or Gradle project, or compiling the Java code.&lt;/p&gt;</description></item><item><title>8x8 LED Matrix</title><link>https://pi4j.com/examples/jbang/jbang_pi4j_spi_led_matrix/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/examples/jbang/jbang_pi4j_spi_led_matrix/</guid><description>&lt;h2 id="controlling-a-8x8-led-matrix-with-max7219-via-spi"&gt;Controlling a 8x8 LED Matrix with MAX7219 via SPI&lt;/h2&gt;

&lt;div class="notices tip" &gt;&lt;p&gt;GITHUB PROJECT: &lt;a href="https://github.com/Pi4J/pi4j-jbang/blob/main/Pi4JLedMatrixSpi.java" target="_blank" rel="noopener"&gt;github.com/Pi4J/pi4j-jbang &amp;gt; Pi4JLedMatrixSpi.java&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;This example is explained in the following video:&lt;/p&gt;
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;"&gt;
 &lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share; fullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/BXOqXuh50KI?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"&gt;&lt;/iframe&gt;
 &lt;/div&gt;

&lt;h2 id="intro"&gt;Intro&lt;/h2&gt;

&lt;div class="notices warning" &gt;&lt;p&gt;Before proceeding with this example, make sure that you have a Raspberry Pi prepared to execute Java code with JBang as &lt;a href="https://pi4j.com/examples/jbang/" target="_blank" rel="noopener"&gt;explained here&lt;/a&gt;.&lt;/p&gt;</description></item><item><title>BME280 Sensor</title><link>https://pi4j.com/examples/jbang/bme280_temperature_humidity_pressure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/examples/jbang/bme280_temperature_humidity_pressure/</guid><description>&lt;h2 id="bme280-sensor-temp-humidity-pressure-via-pi4j-i2c-and-jbang"&gt;BME280 Sensor (temp, humidity, pressure) via Pi4J, I2C, and JBang&lt;/h2&gt;

&lt;div class="notices tip" &gt;&lt;p&gt;GITHUB PROJECT: &lt;a href="https://github.com/Pi4J/pi4j-jbang/blob/main/Pi4JTempHumPressI2C.java" target="_blank" rel="noopener"&gt;github.com/Pi4J/pi4j-jbang &amp;gt; Pi4JTempHumPressI2C.java&lt;/a&gt; and &lt;a href="https://github.com/Pi4J/pi4j-jbang/blob/main/Pi4JTempHumPressSpi.java" target="_blank" rel="noopener"&gt;github.com/Pi4J/pi4j-jbang &amp;gt; Pi4JTempHumPressSpi.java&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id="intro"&gt;Intro&lt;/h2&gt;
&lt;p&gt;This is an example project to demonstrate how to read the temperature, humidity and pressure from a &lt;a href="https://www.adafruit.com/product/2652" target="_blank" rel="noopener"&gt;BME280 sensor, installed on an Adafruit board&lt;/a&gt; that can be controlled via I2C and SPI. Such a sensor itself is a very tiny component that can be integrated in phones and many other types of devices.&lt;/p&gt;</description></item><item><title>Running Pi4J with JBang</title><link>https://pi4j.com/documentation/building/jbang/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/documentation/building/jbang/</guid><description>&lt;p&gt;JBang allows you to execute Java code with dependencies as a single file without the need for a full Maven or Gradle project. You also don&amp;rsquo;t need to compile your code. So it&amp;rsquo;s a very easy way to get started with Java and Pi4J.&lt;/p&gt;
&lt;p&gt;Multiple examples and more information is available in the section &lt;a href="https://pi4j.com/examples/jbang/"&gt;&amp;ldquo;Example Implementations &amp;gt; JBang Examples&amp;rdquo;&lt;/a&gt;.&lt;/p&gt;</description></item><item><title>Pixelblaze Output Expander</title><link>https://pi4j.com/examples/jbang/pixelblaze_output_expander/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/examples/jbang/pixelblaze_output_expander/</guid><description>&lt;div class="notices tip" &gt;&lt;p&gt;GITHUB PROJECT: &lt;a href="https://github.com/Pi4J/pi4j-jbang/blob/main/PixelblazeOutputExpander.java" target="_blank" rel="noopener"&gt;github.com/Pi4J/pi4j-jbang &amp;gt; PixelblazeOutputExpander.java&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;One of the most &amp;ldquo;fancy&amp;rdquo; electronic components is definitely a LED strip. It&amp;rsquo;s really cool to control a long strip of lights with only a few lines of code&amp;hellip; But, there is a problem. The timing of the signals is crucial to reliably control these strips. Both Python and Java on a Raspberry Pi can struggle with these timings as they are running on Linux, a non-real-time operating system. So pauses in the garbage collection of the Java virtual machine, or any glitch in the operating system can cause unexpected effects on the LED strips. That&amp;rsquo;s why in most projects, a microcontroller (Arduino, Raspberry Pi Pico, ESP32,&amp;hellip;) is used to drive the LED strip.&lt;/p&gt;</description></item><item><title>Controlling a LED Matrix</title><link>https://pi4j.com/examples/jbang/pixelblaze_output_expander_image/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/examples/jbang/pixelblaze_output_expander_image/</guid><description>&lt;div class="notices tip" &gt;&lt;p&gt;GITHUB PROJECT: &lt;a href="https://github.com/Pi4J/pi4j-jbang/blob/main/PixelblazeOutputExpanderImageMatrix8x32.java" target="_blank" rel="noopener"&gt;github.com/Pi4J/pi4j-jbang &amp;gt; PixelblazeOutputExpanderImageMatrix8x32.java&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;A LED strip doesn&amp;rsquo;t only exist as a single strip, the same system is also used in a LED matrix. In this example, we will control such a &lt;a href="https://www.amazon.nl/dp/B0B81R484Z" target="_blank" rel="noopener"&gt;8*32 LED matrix&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Full LED strip code walkthrough, and additional info in this live session with Robert (aka Eitch) and Frank:&lt;/p&gt;
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;"&gt;
 &lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share; fullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/eToIXACqSuY?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"&gt;&lt;/iframe&gt;
 &lt;/div&gt;

&lt;h2 id="intro"&gt;Intro&lt;/h2&gt;
&lt;p&gt;This example is based on the &lt;a href="https://pi4j.com/examples/jbang/pixelblaze_output_expander/"&gt;Pixelblaze Output Expander (PBOE) JBang example&lt;/a&gt;. Make sure to check out the PBOE example, so you fully understand how to set up and use JBang, and connect and control a LED strip via a PBOE.&lt;/p&gt;</description></item><item><title>LED strip with a JavaFX UI</title><link>https://pi4j.com/examples/jbang/pixelblaze_output_expander_javafx/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/examples/jbang/pixelblaze_output_expander_javafx/</guid><description>&lt;div class="notices tip" &gt;&lt;p&gt;GITHUB PROJECT: &lt;a href="https://github.com/Pi4J/pi4j-jbang/blob/main/PixelblazeOutputExpanderJavaFX.java" target="_blank" rel="noopener"&gt;github.com/Pi4J/pi4j-jbang &amp;gt; PixelblazeOutputExpanderJavaFX.java&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;We already know how to control a LED strip, so let&amp;rsquo;s add a JavaFX User Interface to control the colors on each of the LEDs on the strip.&lt;/p&gt;
&lt;p&gt;


&lt;div class="gallery caption-position-bottom caption-effect-slide hover-effect-zoom hover-transition" itemscope itemtype="http://schema.org/ImageGallery"&gt;
	 

&lt;link rel="stylesheet" href="https://pi4j.com/css/hugo-easy-gallery.css" /&gt;
&lt;div class="box fancy-figure caption-position-center caption-effect-fade" &gt;
 &lt;figure itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject"&gt;
 &lt;div class="img" style="background-image: url('/assets/examples/jbang/pixelblaze/javafx-ui.png');"&gt;
 &lt;img itemprop="thumbnail" src="https://pi4j.com/assets/examples/jbang/pixelblaze/javafx-ui.png" alt="Demo of the JavaFX UI"/&gt;
 &lt;/div&gt;
 &lt;a href="https://pi4j.com/assets/examples/jbang/pixelblaze/javafx-ui.png" itemprop="contentUrl"&gt;&lt;/a&gt;
 &lt;figcaption&gt;
 &lt;p&gt;Demo of the JavaFX UI&lt;/p&gt;
 &lt;/figcaption&gt;
 &lt;/figure&gt;
&lt;/div&gt;


&lt;/div&gt;





 


&lt;script src="https://pi4j.com/js/load-photoswipe.js"&gt;&lt;/script&gt;


&lt;link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.1/photoswipe.min.css" integrity="sha256-sCl5PUOGMLfFYctzDW3MtRib0ctyUvI9Qsmq2wXOeBY=" crossorigin="anonymous" /&gt;
&lt;link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.1/default-skin/default-skin.min.css" integrity="sha256-BFeI1V+Vh1Rk37wswuOYn5lsTcaU96hGaI7OUVCLjPc=" crossorigin="anonymous" /&gt;
&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.1/photoswipe.min.js" integrity="sha256-UplRCs9v4KXVJvVY+p+RSo5Q4ilAUXh7kpjyIP5odyc=" crossorigin="anonymous"&gt;&lt;/script&gt;
&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.1/photoswipe-ui-default.min.js" integrity="sha256-PWHOlUzc96pMc8ThwRIXPn8yH4NOLu42RQ0b9SpnpFk=" crossorigin="anonymous"&gt;&lt;/script&gt;


&lt;div class="pswp" tabindex="-1" role="dialog" aria-hidden="true"&gt;

&lt;div class="pswp__bg"&gt;&lt;/div&gt;

&lt;div class="pswp__scroll-wrap"&gt;
 
 &lt;div class="pswp__container"&gt;
 &lt;div class="pswp__item"&gt;&lt;/div&gt;
 &lt;div class="pswp__item"&gt;&lt;/div&gt;
 &lt;div class="pswp__item"&gt;&lt;/div&gt;
 &lt;/div&gt;
 
 &lt;div class="pswp__ui pswp__ui--hidden"&gt;
 &lt;div class="pswp__top-bar"&gt;
 
 &lt;div class="pswp__counter"&gt;&lt;/div&gt;
 &lt;button class="pswp__button pswp__button--close" title="Close (Esc)"&gt;&lt;/button&gt;
 &lt;button class="pswp__button pswp__button--share" title="Share"&gt;&lt;/button&gt;
 &lt;button class="pswp__button pswp__button--fs" title="Toggle fullscreen"&gt;&lt;/button&gt;
 &lt;button class="pswp__button pswp__button--zoom" title="Zoom in/out"&gt;&lt;/button&gt;
 
 
 &lt;div class="pswp__preloader"&gt;
 &lt;div class="pswp__preloader__icn"&gt;
 &lt;div class="pswp__preloader__cut"&gt;
 &lt;div class="pswp__preloader__donut"&gt;&lt;/div&gt;
 &lt;/div&gt;
 &lt;/div&gt;
 &lt;/div&gt;
 &lt;/div&gt;
 &lt;div class="pswp__share-modal pswp__share-modal--hidden pswp__single-tap"&gt;
 &lt;div class="pswp__share-tooltip"&gt;&lt;/div&gt;
 &lt;/div&gt;
 &lt;button class="pswp__button pswp__button--arrow--left" title="Previous (arrow left)"&gt;
 &lt;/button&gt;
 &lt;button class="pswp__button pswp__button--arrow--right" title="Next (arrow right)"&gt;
 &lt;/button&gt;
 &lt;div class="pswp__caption"&gt;
 &lt;div class="pswp__caption__center"&gt;&lt;/div&gt;
 &lt;/div&gt;
 &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;</description></item><item><title>2023 LED strips with JBang</title><link>https://pi4j.com/video/20231012-led-strips/</link><pubDate>Thu, 12 Oct 2023 00:00:00 +0000</pubDate><guid>https://pi4j.com/video/20231012-led-strips/</guid><description>&lt;h2 id="having-fun-with-led-strips-with-java-on-the-raspberry-pi"&gt;Having fun with LED strips with Java on the Raspberry Pi&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;20231012 - Live Stream&lt;/strong&gt;&lt;/p&gt;
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;"&gt;
 &lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share; fullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/eToIXACqSuY?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"&gt;&lt;/iframe&gt;
 &lt;/div&gt;

&lt;p&gt;Frank Delporte and Robert von Burg (aka Eitch) take a look at examples using JBang and Pixelblaze, which are described on the Pi4J website at &lt;a href="https://www.pi4j.com/examples/jbang/pixelblaze_output_expander/" target="_blank" rel="noopener"&gt;https://www.pi4j.com/examples/jbang/pixelblaze_output_expander/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This was our first live stream using restream.io to see if we could create tutorials like this. This went smoothly for the first 44 minutes, and then I lost connection with Robert. But luckily, at that time, we had already explained almost everything we wanted to tell ;-)&lt;/p&gt;</description></item></channel></rss>