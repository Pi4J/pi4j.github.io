<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Spring on Pi4J</title><link>https://pi4j.com/tags/spring/</link><description>Recent content in Spring on Pi4J</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Wed, 24 Sep 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://pi4j.com/tags/spring/index.xml" rel="self" type="application/rss+xml"/><item><title>Spring Boot Alarm System</title><link>https://pi4j.com/featured-projects/spring-boot-alarm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/featured-projects/spring-boot-alarm/</guid><description>&lt;div class="notices tip" &gt;&lt;p&gt;GITHUB PROJECT: &lt;a href="https://github.com/bmike2047/springboot-rpi-alarm-system" target="_blank" rel="noopener"&gt;github.com/bmike2047/springboot-rpi-alarm-system&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;This project by &lt;strong&gt;Mihai Buleandra&lt;/strong&gt;, uses Spring Boot to create a simple wired alarm system. Most examples on this website use Maven, but this project is a nice example of how to configure a Gradle project to use Pi4J. Mihai also uses Thymeleaf and Bootstrap for the web user interface, that has live updates showing the state of the alarm system.&lt;/p&gt;
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;"&gt;
 &lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share; fullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/xRUWgISEngM?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"&gt;&lt;/iframe&gt;
 &lt;/div&gt;

&lt;p&gt;The alarm system makes use of Java&amp;rsquo;s multithreading capabilities, as it&amp;rsquo;s based on a non-blocking Finite State Machine. This means each state runs in its own thread allowing the web interface to not block while waiting for different operations. Multi-threaded reusable Java drivers for the Raspberry Pi are implemented using the Pi4J library for the keypad, Passive Infrared sensor (PIR), LED and Buzzer.
Keypad driver includes debounce implementation also.&lt;/p&gt;</description></item><item><title>2025 Live Coding: Vaadin</title><link>https://pi4j.com/video/20250924-live-coding-vaadin/</link><pubDate>Wed, 24 Sep 2025 00:00:00 +0000</pubDate><guid>https://pi4j.com/video/20250924-live-coding-vaadin/</guid><description>&lt;h2 id="live-stream-coding"&gt;Live Stream Coding&lt;/h2&gt;
&lt;h3 id="improving-the-vaadinspringpi4j-demo-application-with-matti-tahvonen"&gt;Improving the Vaadin+Spring+Pi4J demo application with Matti Tahvonen&lt;/h3&gt;
&lt;p&gt;2025-09-24, by Frank Delporte&lt;/p&gt;
&lt;p&gt;During a live stream coding session, &lt;a href="https://www.linkedin.com/in/mattitahvonen/" target="_blank" rel="noopener"&gt;Matti Tahvonen&lt;/a&gt; and &lt;a href="https://www.linkedin.com/in/frankdelporte/" target="_blank" rel="noopener"&gt;Frank Delporte&lt;/a&gt; updated an existing Vaadin+Spring+Pi4J demo application to use the latest version of the libraries and Java 25. It&amp;rsquo;s a demo application created a few years ago to be used during presentations at conferences. Of course, everything evolves, so a big update and refactoring was needed.&lt;/p&gt;
&lt;p&gt;(Sorry for the hiccups in the first minutes, the network connection dropped a few times&amp;hellip;)&lt;/p&gt;</description></item></channel></rss>