<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Signed on Pi4J</title><link>https://pi4j.com/tags/signed/</link><description>Recent content in Signed on Pi4J</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Fri, 27 Sep 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://pi4j.com/tags/signed/index.xml" rel="self" type="application/rss+xml"/><item><title>Signed versus unsigned values</title><link>https://pi4j.com/blog/2024/20240927-bits-bytes-signed-unsigned/</link><pubDate>Fri, 27 Sep 2024 00:00:00 +0000</pubDate><guid>https://pi4j.com/blog/2024/20240927-bits-bytes-signed-unsigned/</guid><description>&lt;p&gt;2024-09-27, by Frank Delporte&lt;/p&gt;
&lt;p&gt;When using bits and bytes to control electronic components, the conversion from a byte to, e.g., logging output can be a bit confusing as Java uses signed values. This means a byte value has a range of -128 till 127, while you would expect 0 (0x00) till 255 (0xFF).&lt;/p&gt;
&lt;p&gt;For example, the hex value &lt;code&gt;0x8F&lt;/code&gt; (&lt;code&gt;10001111&lt;/code&gt;) is handled like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; b &lt;span style="color:#f92672"&gt;=&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;byte&lt;/span&gt;) Integer.&lt;span style="color:#a6e22e"&gt;parseInt&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;10001111&amp;#34;&lt;/span&gt;, 2);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;System.&lt;span style="color:#a6e22e"&gt;out&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;println&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Byte value 10001111: &amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt; b);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// Output&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Byte value 10001111: &lt;span style="color:#f92672"&gt;-&lt;/span&gt;113
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can use &lt;code&gt;Byte.toUnsignedInt(b)&lt;/code&gt; to get the expected, unsigned value:&lt;/p&gt;</description></item></channel></rss>