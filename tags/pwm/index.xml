<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>PWM on Pi4J</title><link>https://pi4j.com/tags/pwm/</link><description>Recent content in PWM on Pi4J</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Tue, 23 Apr 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://pi4j.com/tags/pwm/index.xml" rel="self" type="application/rss+xml"/><item><title>LinuxFS Provider</title><link>https://pi4j.com/documentation/providers/linuxfs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/documentation/providers/linuxfs/</guid><description>&lt;p>The current implementation of the LinuxFS plugin implements a file based I2C, SPI, and PWM provider. The file based I2C provider opens
&lt;code>/dev/i2c-1&lt;/code> using a &lt;code>RandomAccessFile&lt;/code> to perform I2C reads and writes. The file based PWM provider opens
&lt;code>/sys/class/pwm/pwmchip?&lt;/code> using a &lt;code>RandomAccessFile&lt;/code> to perform PWM operations.&lt;/p>

&lt;div class="notices warning" >&lt;p>The Linuxfs provider linuxfs-pwm requires minimum kernel Bullseye 6.1.21 and Bookworm 6.6.22 !&lt;/p>
&lt;/div>

&lt;p>Providers in the LinuxFS plugin:&lt;/p>
&lt;ul>
&lt;li>linuxfs-i2c&lt;/li>
&lt;li>linuxfx-spi&lt;/li>
&lt;li>linuxfs-pwm&lt;/li>
&lt;li>Under construction
&lt;ul>
&lt;li>linuxfs-digital-input&lt;/li>
&lt;li>linuxfs-digital-output&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>To use the LinuxFS provider include the following dependencies:&lt;/p></description></item><item><title>PiGpio Provider</title><link>https://pi4j.com/documentation/providers/pigpio/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/documentation/providers/pigpio/</guid><description>&lt;p>The current implementation of the PiGpio exposes the GPIO functions available on the Raspberry Pi (see Note Pi5 below).
This implementation is developed/supported by a team separate of Pi4j. Pi4j is a consumer of that PiGpio work.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>Pi5 At the present time the PiGpio implementation does not support the new Pi5 board. 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- This new Pi5 RP1 chip will require a large development effort. There is no known plan &lt;span style="color:#66d9ef">for&lt;/span> this develoment. 
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Providers in the PiGpio plugin:&lt;/p></description></item><item><title>Pulse Width Modulation (PWM)</title><link>https://pi4j.com/documentation/io-examples/pwm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/documentation/io-examples/pwm/</guid><description>&lt;h2 id="what-is-it">What is it?&lt;/h2>
&lt;p>The abbreviation PWM stands for &amp;ldquo;Pulse Width Modulation&amp;rdquo; and is also often referred
to in German as pulse width modulation or pulse duration modulation. This technology
is used, among other things, to control servomotors and is also used, for example,
for the fans of a regular computer.&lt;/p>
&lt;p>With PWM, it is possible to control a component such as a motor no longer purely
binary, i.e. off (0% power) or on (100% power), but to control them almost at will.
The functionality of PWM works in such a way that the component is switched off and
on again and again within a certain period of time.&lt;/p></description></item><item><title>PWM Hardware Support on RPi5</title><link>https://pi4j.com/blog/2024/20240423_pwm_rpi5/</link><pubDate>Tue, 23 Apr 2024 00:00:00 +0000</pubDate><guid>https://pi4j.com/blog/2024/20240423_pwm_rpi5/</guid><description>&lt;p>2024-04-23, by Tom Aarts&lt;/p>
&lt;p>The next version of Pi4J (are now already in 2.5.2-SNAPSHOT) will add PWM support via a new provider &lt;code>linuxfs-pwm&lt;/code>. The previous PWM PiGpio provider does not support the Raspberry Pi 5 RP1 chip. To use this new provider, changes are required in your &lt;code>pom.xml&lt;/code> dependencies and Java code. The details of using this new provider are explained in the Pi4J documentation in &lt;a href="https://pi4j.com/documentation/io-examples/pwm/">Pulse Width Modulation&lt;/a>. In this blog post, I want to provide extra details and an example implementation. This post reference changes when using the Bookworm OS on a Raspberry Pi 5. If you are using the &lt;code>linuxfs-pwm&lt;/code> provider on a Raspberry Pi 4, consult the &lt;a href="https://pi4j.com/documentation/io-examples/pwm/">Pulse Width Modulation&lt;/a> for &lt;code>config.sys&lt;/code> and channel differences.&lt;/p></description></item></channel></rss>