<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2022 on Pi4J</title><link>https://pi4j.com/blog/2022/</link><description>Recent content in 2022 on Pi4J</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Mon, 28 Nov 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://pi4j.com/blog/2022/index.xml" rel="self" type="application/rss+xml"/><item><title>LED strip with Pi4J and JBang</title><link>https://pi4j.com/blog/2022/20221128_led_strip_with_jbang/</link><pubDate>Mon, 28 Nov 2022 00:00:00 +0000</pubDate><guid>https://pi4j.com/blog/2022/20221128_led_strip_with_jbang/</guid><description>&lt;p&gt;2022-11-28, by Robert von Burg&lt;/p&gt;
&lt;h2 id="intro"&gt;Intro&lt;/h2&gt;
&lt;p&gt;In an earlier post, JBang and Pi4J were used to control a LED and button connected to a Raspberry Pi.&lt;/p&gt;
&lt;p&gt;This week Robert von Burg, one of the main contributors of the Pi4J project, &lt;a href="https://mstdn.gsi.li/@eitch/109324090007015888" target="_blank" rel="noopener"&gt;shared on Mastodon&lt;/a&gt; another project where a LED strip is controlled via I2C.&lt;/p&gt;
&lt;p&gt;This is the result, notice the Foojay.io startup artwork ðŸ˜‰&lt;/p&gt;

 &lt;div
 style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;"&gt;
 &lt;iframe
 src="https://player.vimeo.com/video/771087170?dnt=0"
 style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allow="fullscreen"&gt;
 &lt;/iframe&gt;
 &lt;/div&gt;

&lt;h2 id="wiring"&gt;Wiring&lt;/h2&gt;
&lt;p&gt;The Raspberry Pi in the video is attached to a custom PCB used by Robert in &lt;a href="https://pi4j.com/featured-projects/soft-real-time-plc-written-in-strolch/" target="_blank" rel="noopener"&gt;medical cabinets&lt;/a&gt;.&lt;/p&gt;</description></item><item><title>Kotlin on the Raspberry Pi</title><link>https://pi4j.com/blog/2022/20221117_kotlin_on_raspberrypi/</link><pubDate>Thu, 17 Nov 2022 00:00:00 +0000</pubDate><guid>https://pi4j.com/blog/2022/20221117_kotlin_on_raspberrypi/</guid><description>&lt;p&gt;2022-11-17, by Muhammad Hashim&lt;/p&gt;
&lt;h2 id="intro"&gt;Intro&lt;/h2&gt;
&lt;p&gt;Pi4J is considered the project that brought the JVM to the RaspberryPi.&lt;/p&gt;
&lt;p&gt;It has been up for more than a decade allowing developers to write sophisticated, high-level, yet simple software on the RaspberryPi.&lt;/p&gt;
&lt;p&gt;And weâ€™re glad to make it even more simpler and powerful!&lt;/p&gt;
&lt;p&gt;For quite some years now Kotlin has been a most welcome language in the JVM ecosystem and the modern development toolchain.&lt;/p&gt;</description></item><item><title>Getting Started Template</title><link>https://pi4j.com/blog/2022/20220113_javafx_pi4j_template/</link><pubDate>Thu, 13 Jan 2022 00:00:00 +0000</pubDate><guid>https://pi4j.com/blog/2022/20220113_javafx_pi4j_template/</guid><description>&lt;p&gt;2022-01-13, by Frank Delporte&lt;/p&gt;
&lt;h2 id="intro"&gt;Intro&lt;/h2&gt;
&lt;p&gt;The Pi4J project wants to be the starting point for everyone who wants to use Java on the Raspberry Pi, being it a headless, JavaFX-user interface and/or GPIO-controller project.&lt;/p&gt;
&lt;p&gt;Pi4J is intended to provide a friendly object-oriented I/O API and implementation libraries for Java Programmers to access the full I/O capabilities of the Raspberry Pi platform. This project abstracts the low-level native integration and interrupt monitoring to enable Java programmers to focus on implementing their application business logic.&lt;/p&gt;</description></item></channel></rss>