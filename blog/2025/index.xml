<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2025 on Pi4J</title><link>https://pi4j.com/blog/2025/</link><description>Recent content in 2025 on Pi4J</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Mon, 11 Aug 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://pi4j.com/blog/2025/index.xml" rel="self" type="application/rss+xml"/><item><title>RPi5 PWM NoSuchFileException</title><link>https://pi4j.com/blog/2025/20250811-rpi5-pwm-not-working/</link><pubDate>Mon, 11 Aug 2025 00:00:00 +0000</pubDate><guid>https://pi4j.com/blog/2025/20250811-rpi5-pwm-not-working/</guid><description>&lt;p&gt;2025-08-11, by Tom Aarts&lt;/p&gt;
&lt;p&gt;On the Pi5, Pi kernel updates may result in failing PWM. The
exception details will state &lt;code&gt;/sys/class/pwm/pwmchip2/npwm was not found&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A kernel code update (6.12) resulted in the objects within &lt;code&gt;/sys/class/pwm&lt;/code&gt; being numbered differently. It is most likely the PWM is using &lt;code&gt;/sys/class/pwm/pwmchip0&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Until a proper fix is available, the following change to your application should resolve this error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// Add imports&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; com.pi4j.plugin.linuxfs.provider.pwm.LinuxFsPwmProvider;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; com.pi4j.plugin.linuxfs.provider.pwm.LinuxFsPwmProviderImpl;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// Replace newAutoContext&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// Instead of:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// Context pi4j = Pi4J.newAutoContext();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// Use:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Context pi4j &lt;span style="color:#f92672"&gt;=&lt;/span&gt; Pi4J.&lt;span style="color:#a6e22e"&gt;newContextBuilder&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; .&lt;span style="color:#a6e22e"&gt;add&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; LinuxFsPwmProviderImpl(&lt;span style="color:#e6db74"&gt;&amp;#34;/sys/class/pwm/&amp;#34;&lt;/span&gt;, 0) )
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; .&lt;span style="color:#a6e22e"&gt;build&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>Java 21+ Not Working on Zero 2</title><link>https://pi4j.com/blog/2025/20250625-java-21-not-working-on-zero-2/</link><pubDate>Wed, 25 Jun 2025 00:00:00 +0000</pubDate><guid>https://pi4j.com/blog/2025/20250625-java-21-not-working-on-zero-2/</guid><description>&lt;p&gt;2025-06-25 by Frank Delporte&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Dieter Holz&lt;/strong&gt; was experimenting with Pi4J V3 on a Raspberry Pi Zero 2. Because this version requires Java 21 or newer, he upgraded his OS to a newer Java version and found out that no Java code could be executed. He tried with Java 21 and 24, and neither worked correctly, although Java 17 runs without problems.&lt;/p&gt;
&lt;p&gt;The same SD card with Java 24 that didn&amp;rsquo;t work on the Zero 2 worked perfectly on a Raspberry Pi 4. So, what is happening under the hood? What is the difference between these two boards causing this problem? Let&amp;rsquo;s dive in.&lt;/p&gt;</description></item><item><title>Starting with a Desktop Icon</title><link>https://pi4j.com/blog/2025/20250507-start-program-with-desktop-icon/</link><pubDate>Wed, 07 May 2025 00:00:00 +0000</pubDate><guid>https://pi4j.com/blog/2025/20250507-start-program-with-desktop-icon/</guid><description>&lt;p&gt;2025-05-07 by Frank Delporte&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Richard Norrie&lt;/strong&gt; created an oscilloscope with Pi4J and was looking for a way to start his application with a desktop icon. Unfortunately, he ran into a few issues as the icon led to &amp;ldquo;Java not found&amp;rdquo; error. This was likely due to environment variables not being properly set in the desktop launcher context.&lt;/p&gt;
&lt;p&gt;Here are the steps how this got fixed as you can see in this screenshot:&lt;/p&gt;</description></item><item><title>Pi4J welcomes Java 21</title><link>https://pi4j.com/blog/2025/20250211-welcome-java-21/</link><pubDate>Wed, 05 Feb 2025 00:00:00 +0000</pubDate><guid>https://pi4j.com/blog/2025/20250211-welcome-java-21/</guid><description>&lt;p&gt;2025-02-11 by Frank Delporte&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The development of the Pi4J library faced a decision point&amp;hellip;: &amp;ldquo;&lt;em&gt;Should we stick to Java 11 for existing projects and old Raspberry Pi&amp;rsquo;s (&lt;a href="https://pi4j.com/documentation/java-for-arm/"&gt;with ARMv6&lt;/a&gt;), versus moving on and making use of better and more performant Java code with the latest Long Term Support (LTS) version?&lt;/em&gt;&amp;rdquo;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We actually wanted to move on to Java 22, as it brings a new way of interacting with C-code, thanks to &lt;a href="https://openjdk.org/jeps/454" target="_blank" rel="noopener"&gt;JEP 454: Foreign Function &amp;amp; Memory API&lt;/a&gt;. As this is the core behavior of Pi4J to interact with the GPIOs, it would make it much easier to implement new ways to control electronics, as confirmed &lt;a href="https://github.com/eitch/pi4j-test/blob/develop/src/main/java/ch/eitchnet/pi4j/test/LibGPIODController.java" target="_blank" rel="noopener"&gt;with a first test by Robert &amp;ldquo;Eitch&amp;rdquo;&lt;/a&gt;. But as Java 22 is not an LTS release, we won&amp;rsquo;t make this move yet.&lt;/p&gt;</description></item><item><title>Pi4J presentation for Miami JUG</title><link>https://pi4j.com/blog/2025/20250115-miami-jug/</link><pubDate>Wed, 15 Jan 2025 00:00:00 +0000</pubDate><guid>https://pi4j.com/blog/2025/20250115-miami-jug/</guid><description>&lt;p&gt;2025-01-15 by Frank Delporte&lt;/p&gt;
&lt;p&gt;Frank Delporte was invited by the Miami JVM Group to present his journey into Java development on the Raspberry Pi. This video contains the part of the presentation that introduces Pi4J, some of its history, and its current state. We also look at a basic and more extended example, with a demo of a Vaadin and Spring Boot application controlling several electronic components.&lt;/p&gt;
&lt;p&gt;This is the 30&amp;rsquo; version about Pi4J:&lt;/p&gt;</description></item></channel></rss>