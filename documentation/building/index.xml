<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Building and running on Pi4J</title><link>https://pi4j.com/documentation/building/</link><description>Recent content in Building and running on Pi4J</description><generator>Hugo</generator><language>en-us</language><atom:link href="https://pi4j.com/documentation/building/index.xml" rel="self" type="application/rss+xml"/><item><title>Building with javac</title><link>https://pi4j.com/documentation/building/javac/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/documentation/building/javac/</guid><description>You can build a Pi4J project using only java and javac.
Wiring No wiring is needed for this minimal example as it only demonstrates how to create a minimal application which initializes Pi4J.
Java release Any Java release over 11 is enough, check it with this command:
$ java -version java 17.0.1 2021-10-19 LTS Java(TM) SE Runtime Environment (build 17.0.1+12-LTS-39) Java HotSpot(TM) 64-Bit Server VM (build 17.0.1+12-LTS-39, mixed mode, sharing) PI4J jar files You will need to download the Pi4J distribution from the Maven repository:</description></item><item><title>Build as a FAT JAR with Maven</title><link>https://pi4j.com/documentation/building/fat-jar/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/documentation/building/fat-jar/</guid><description>EXAMPLE PROJECT: https://github.com/Pi4J/pi4j-example-fatjar
About FAT JARs With Pi4J V1 you can create a so-called FAT JAR, which packages all the dependencies into one jar-file. That way it is very easy to build your project on one computer and distribute your application as a single file to one or more clients.
Because of the modular approach and how Pi4J V.2 loads it dependencies at runtime, this approach can be achieved by using the maven-shade-plugin.</description></item><item><title>Build Java modules with Maven</title><link>https://pi4j.com/documentation/building/modules-maven/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/documentation/building/modules-maven/</guid><description>GITHUB PROJECT: https://github.com/Pi4J/pi4j-example-minimal
Because the Pi4J V.2 project follows the modular approach of Java, the functionality of the framework has been split into different modules, each with their own responsibility.
The easiest way to start a new project, is to copy one of the example projects which include a full Maven pom.xml-file with all the required steps and configurations to build the project with all its modules into the target/distribution directory.</description></item><item><title>Build Java modules with Gradle</title><link>https://pi4j.com/documentation/building/modules-gradle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/documentation/building/modules-gradle/</guid><description>GITHUB PROJECT: https://github.com/Pi4J/pi4j-example-minimal
The Pi4J V.2 project itself uses Maven and most example projects also use this build tool. But if you prefer to use Gradle, you can start with a copy of the &amp;ldquo;Minimal example application&amp;rdquo; which includes all the required files to build with Gradle.
Use Gradle version 6.6 (or later) and Java 11 OpenJDK (or later). The Gradle wrapper is used as described on docs.gradle.org. The Gradle configuration file build.</description></item><item><title>Running Pi4J with JBang</title><link>https://pi4j.com/documentation/building/jbang/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/documentation/building/jbang/</guid><description>JBang allows you to execute Java code with dependencies as a single file without the need for a full Maven or Gradle project. You also don&amp;rsquo;t need to compile your code. So it&amp;rsquo;s a very easy way to get started with Java and Pi4J.
Multiple examples and more information is available in the section &amp;ldquo;Example Implementations &amp;gt; JBang Examples&amp;rdquo;.</description></item></channel></rss>