<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Building and running on Pi4J</title><link>https://pi4j.com/documentation/building/</link><description>Recent content in Building and running on Pi4J</description><generator>Hugo</generator><language>en-us</language><atom:link href="https://pi4j.com/documentation/building/index.xml" rel="self" type="application/rss+xml"/><item><title>Building with javac</title><link>https://pi4j.com/documentation/building/javac/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/documentation/building/javac/</guid><description>&lt;p&gt;You can build a Pi4J project using only java and javac.&lt;/p&gt;
&lt;h2 id="wiring"&gt;Wiring&lt;/h2&gt;
&lt;p&gt;No wiring is needed for this minimal example as it only demonstrates how to create a minimal application which initializes
Pi4J.&lt;/p&gt;
&lt;h2 id="java-release"&gt;Java release&lt;/h2&gt;
&lt;p&gt;Any Java release over 21 is enough, check it with this command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ java -version
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openjdk version &lt;span style="color:#e6db74"&gt;&amp;#34;21.0.1&amp;#34;&lt;/span&gt; 2023-10-17 LTS
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;OpenJDK Runtime Environment Zulu21.30+15-CA &lt;span style="color:#f92672"&gt;(&lt;/span&gt;build 21.0.1+12-LTS&lt;span style="color:#f92672"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;OpenJDK 64-Bit Server VM Zulu21.30+15-CA &lt;span style="color:#f92672"&gt;(&lt;/span&gt;build 21.0.1+12-LTS, mixed mode, sharing&lt;span style="color:#f92672"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="pi4j-jar-files"&gt;PI4J jar files&lt;/h2&gt;
&lt;p&gt;You will need to download the Pi4J distribution from the Maven repository:&lt;/p&gt;</description></item><item><title>Build as a FAT JAR with Maven</title><link>https://pi4j.com/documentation/building/fat-jar/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/documentation/building/fat-jar/</guid><description>&lt;div class="notices tip" &gt;&lt;p&gt;EXAMPLE PROJECT: &lt;a href="https://github.com/Pi4J/pi4j-example-fatjar" target="_blank" rel="noopener"&gt;https://github.com/Pi4J/pi4j-example-fatjar&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id="about-fat-jars"&gt;About FAT JARs&lt;/h2&gt;
&lt;p&gt;With Pi4J V1 you can create a so-called FAT JAR, which packages all the dependencies into one jar-file. That way it is
very easy to build your project on one computer and distribute your application as a single file to one or more clients.&lt;/p&gt;
&lt;p&gt;Because of the modular approach and how Pi4J V2+ loads it dependencies at runtime, this approach can be achieved by using
the maven-shade-plugin.&lt;/p&gt;</description></item><item><title>Build Java modules with Maven</title><link>https://pi4j.com/documentation/building/modules-maven/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/documentation/building/modules-maven/</guid><description>&lt;div class="notices tip" &gt;&lt;p&gt;GITHUB PROJECT: &lt;a href="https://github.com/Pi4J/pi4j-example-minimal" target="_blank" rel="noopener"&gt;https://github.com/Pi4J/pi4j-example-minimal&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Because the Pi4J V2+ project follows the modular approach of Java, the functionality of the framework has been split into
different modules, each with their own responsibility.&lt;/p&gt;
&lt;p&gt;The easiest way to start a new project, is to copy one of the example projects which include a full Maven pom.xml-file
with all the required steps and configurations to build the project with all its modules into the &lt;code&gt;target/distribution&lt;/code&gt;
directory.&lt;/p&gt;</description></item><item><title>Build Java modules with Gradle</title><link>https://pi4j.com/documentation/building/modules-gradle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/documentation/building/modules-gradle/</guid><description>&lt;div class="notices tip" &gt;&lt;p&gt;GITHUB PROJECT: &lt;a href="https://github.com/Pi4J/pi4j-example-minimal" target="_blank" rel="noopener"&gt;https://github.com/Pi4J/pi4j-example-minimal&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;The Pi4J project itself uses Maven and most example projects also use this build tool. But if you prefer to use Gradle,
you can start with a copy of the &lt;a href="https://pi4j.com/getting-started/minimal-example-application/"&gt;&amp;ldquo;Minimal example application&amp;rdquo;&lt;/a&gt; which includes
all the required files to build with Gradle.&lt;/p&gt;
&lt;p&gt;Use Gradle version 6.6 (or later) and Java 21 OpenJDK (or later). The Gradle wrapper is used as described on
&lt;a href="https://docs.gradle.org/current/userguide/gradle_wrapper.html" target="_blank" rel="noopener"&gt;docs.gradle.org&lt;/a&gt;. The Gradle configuration file
&lt;a href="https://github.com/Pi4J/pi4j-example-minimal/blob/master/build.gradle" target="_blank" rel="noopener"&gt;build.gradle-file&lt;/a&gt; is included in the sources.&lt;/p&gt;</description></item><item><title>Running Pi4J with JBang</title><link>https://pi4j.com/documentation/building/jbang/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/documentation/building/jbang/</guid><description>&lt;p&gt;JBang allows you to execute Java code with dependencies as a single file without the need for a full Maven or Gradle project. You also don&amp;rsquo;t need to compile your code. So it&amp;rsquo;s a very easy way to get started with Java and Pi4J.&lt;/p&gt;
&lt;p&gt;Multiple examples and more information is available in the section &lt;a href="https://pi4j.com/examples/jbang/"&gt;&amp;ldquo;Example Implementations &amp;gt; JBang Examples&amp;rdquo;&lt;/a&gt;.&lt;/p&gt;</description></item></channel></rss>