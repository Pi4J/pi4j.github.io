<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>I/O Examples on Pi4J</title><link>https://pi4j.com/documentation/io-examples/</link><description>Recent content in I/O Examples on Pi4J</description><generator>Hugo</generator><language>en-us</language><atom:link href="https://pi4j.com/documentation/io-examples/index.xml" rel="self" type="application/rss+xml"/><item><title>Digital Output (GPIO)</title><link>https://pi4j.com/documentation/io-examples/digital-output/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/documentation/io-examples/digital-output/</guid><description>&lt;p>A digital output translates a false/true (or 0/1) to an output value of 0V or 3.3V. This
means you can control any type of device which works with max 3.3V to off or on. The most
basic example is a LED. Always check which is the correct input voltage for your device!
For a LED you will need to put a resistor with the correct value between the GPIO and the LED,
you can find a lot of examples and calculators online, for example on
&lt;a href="https://circuitdigest.com/calculators/led-resistor-calculator" target="_blank" rel="noopener">circuitdigest.com/calculators/led-resistor-calculator&lt;/a>.&lt;/p></description></item><item><title>Digital Input (GPIO)</title><link>https://pi4j.com/documentation/io-examples/digital-input/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/documentation/io-examples/digital-input/</guid><description>&lt;p>Similar to a digital output pin, a digital input translates an input value of 0V or 3.3V to the value false/true. This
means any type of device which can toggle between 3.3V and 0V, can generate an input value to the Raspberry Pi. Here the
most basic example is a toggle button. If you use other components, always check which is the voltage provided by the device.
Or if you use a power pin from the Raspberry Pi itself, to use a 3.3V pin and not a 5V pin.&lt;/p></description></item><item><title>Pulse Width Modulation (PWM)</title><link>https://pi4j.com/documentation/io-examples/pwm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/documentation/io-examples/pwm/</guid><description>&lt;h2 id="what-is-it">What is it?&lt;/h2>
&lt;p>The abbreviation PWM stands for &amp;ldquo;Pulse Width Modulation&amp;rdquo; and is also often referred
to in German as pulse width modulation or pulse duration modulation. This technology
is used, among other things, to control servomotors and is also used, for example,
for the fans of a regular computer.&lt;/p>
&lt;p>With PWM, it is possible to control a component such as a motor no longer purely
binary, i.e. off (0% power) or on (100% power), but to control them almost at will.
The functionality of PWM works in such a way that the component is switched off and
on again and again within a certain period of time.&lt;/p></description></item><item><title>Serial Peripheral Interface (SPI)</title><link>https://pi4j.com/documentation/io-examples/spi/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/documentation/io-examples/spi/</guid><description>&lt;h2 id="what-is-it">What is it?&lt;/h2>
&lt;p>The Serial Peripheral Interface, abbreviated to SPI, is a bus system which enables
communication between a main device (called “master”) and one or more secondary devices
(called “slave”). A direct communication between all participants is not possible here,
much more the master can choose at any time with which slave he would like to exchange data.&lt;/p>
&lt;p>In order to address only one slave, a total of 3 signal lines are required, two of which
are used for bidirectional data transmission and one as a clock generator for serial
transmission. If further slaves are to be addressed, additional signal lines are required
depending on the desired topology.&lt;/p></description></item><item><title>Serial (UART/RS232)</title><link>https://pi4j.com/documentation/io-examples/serial/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/documentation/io-examples/serial/</guid><description>&lt;div class="notices tip" >&lt;p>GITHUB PROJECT: &lt;a href="https://github.com/Pi4J/pi4j-example-components/blob/main/src/main/java/com/pi4j/catalog/applications/SerialGps_App.java" target="_blank" rel="noopener">https://github.com/Pi4J/pi4j-example-components/blob/main/src/main/java/com/pi4j/catalog/applications/SerialGps_App.java&lt;/a>&lt;/p>
&lt;/div>

&lt;h2 id="what-is-it">What is it?&lt;/h2>
&lt;p>Serial communication can be used to transfer data between different boards, devices, etc. Data is transfered bit-by-bit
in a sequence, through a single wire from a transmitter (= TX) to a receiver (= RX). On the receiver side the bits are
combined to bytes.&lt;/p>
&lt;p>When you need two-way communication, two wires are needed between RX and TX from both sides:&lt;/p>
&lt;p>&lt;img src="https://pi4j.com/assets/documentation/serial-two-devices.jpg" alt="Two-way serial communication">&lt;/p>
&lt;p>The communication between these two devices can happen in different ways:&lt;/p></description></item></channel></rss>